#{{{ dein self
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token=$DEINVIM_GITHUB_API_TOKEN
  command! DeinInstall call dein#install()
  command! DeinUpdate call dein#check_update(v:true)
'''
#}}}

#{{{ ecosystems
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# for nvim-tree, telescope and lualine
[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
hook_add = '''
  lua << EOF
    require('nvim-web-devicons').setup({
      override = {
        txt = {
          icon = '',
          name = 'Txt',
          cterm_color = "113",
        },
      },
    })
EOF
'''
#}}}

#{{{ coc
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
  augroup MyCoc
  autocmd!

  let g:coc_data_home = g:vim_data_dir . '/coc'
  " for completion
  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction
  inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1) :
    \ exists('b:_copilot.suggestions') ? copilot#Accept("\<CR>") :
    \ CheckBackspace() ? "\<TAB>" :
    \ coc#refresh()
  inoremap <silent><expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
  inoremap <silent><expr> <c-space> coc#refresh()
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  let g:coc_snippet_next = '<C-j>'
  let g:coc_snippet_prev = '<C-k>'
  imap <C-j> <Plug>(coc-snippets-expand-jump)
  xmap <C-j> <Plug>(coc-convert-snippet)

  " define mappings
  function! MyExecIfHasProvider(keys, feature, action) abort
    if a:feature == '' || CocAction('hasProvider', a:feature)
      if a:action == 'hover'
        call CocAction(a:action)
      elseif index([
        \ 'mru',
        \ 'links',
        \ 'commands',
        \ 'locations',
        \ 'references',
        \ 'definitions',
        \ 'declarations',
        \ 'implementations',
        \ 'type_definitions',
        \ 'diagnostics',
        \ 'code_actions',
        \ 'line_code_actions',
        \ 'file_code_actions',
        \ 'document_symbols',
        \ 'workspace_symbols',
        \ 'workspace_diagnostics',
        \ ], a:action) > 0
        execute 'Telescope coc ' . a:action
      else
        call CocActionAsync(a:action)
      endif
    else
      call feedkeys(a:keys, 'in')
    endif
  endfunction
  function! MyOptionalMap(mode, keys, feature, action) abort
    execute a:mode . 'noremap <silent> ' . a:keys . ' <Cmd>call MyExecIfHasProvider("' . a:keys . '", "' . a:feature . '", "' . a:action . '")<CR>'
  endfunction

  " common keybinds
  nmap     <silent> <Leader>a         <Plug>(coc-codeaction-cursor)
  nmap     <silent> <Leader>A         <Plug>(coc-codeaction-source)
  nmap     <silent> <Leader><Leader>l <Plug>(coc-codelends-action)
  nmap     <silent> [d                <Plug>(coc-diagnostic-prev)
  nmap     <silent> ]d                <Plug>(coc-diagnostic-next)
  call MyOptionalMap('n', '<Space>d', '', 'diagnostics')
  nnoremap <silent> [s                <Cmd>CocCommand document.jumpToPrevSymbol<CR>
  nnoremap <silent> ]s                <Cmd>CocCommand document.jumpToNextSymbol<CR>
  nnoremap <silent> <Space>o          <Cmd>CocList    outline<CR>
  call MyOptionalMap('n', 'K',         'hover',          'doHover')
  call MyOptionalMap('n', '<C-]>',     'definition',     'definitions')
  call MyOptionalMap('n', 't<C-]>',    'typeDefinition', 'type_definitions')
  call MyOptionalMap('n', 'g<C-]>',    'declaration',    'declarations')
  call MyOptionalMap('n', '<Leader>i', 'implementation', 'implementations')
  nnoremap <silent> <Leader>c  <Cmd>call CocActionAsync('showIncomingCalls')<CR>
  nmap     <silent> <Leader>R  <Plug>(coc-rename)
  call MyOptionalMap('n', '<Leader>dr', 'reference', 'references')
  call MyOptionalMap('n', 'gq',         'format',    'format')
  nmap     <silent> gQ <Plug>(coc-fix-current)
  nnoremap <silent> c: :<C-u>CocCommand<Space>

  " text objects
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " optional select
  nmap <silent> <Leader>v <Plug>(coc-range-select)
  xmap <silent> <Leader>v <Plug>(coc-range-select)

  " extensions
  let g:coc_global_extensions = []
  let g:coc_root_patterns = ['.git', '.hg']

  " for snippets
  call add(g:coc_global_extensions, 'coc-snippets')
  call coc#config('snippets', {
    \ 'userSnippetsDirectory': g:vim_dir . '/snippets',
    \ })

  " for unsupported linters and formatters
  call add(g:coc_global_extensions, 'coc-diagnostic')
  call coc#config('diagnostic-languageserver', {
    \ 'mergeConfig': v:true,
    \ 'debug': v:true,
    \ })

  " for configuration files
  call add(g:coc_global_extensions, 'coc-json')
  call add(g:coc_global_extensions, 'coc-yaml')

  " for Vim
  call add(g:coc_global_extensions, 'coc-vimlsp')

  " for Markdown
  call add(g:coc_global_extensions, 'coc-markdown-preview-enhanced')
  call coc#config('markdown-preview-enhanced', {
    \ 'enableScriptExecution': v:true,
    \ })

  " for Python
  autocmd FileType python let b:coc_root_patterns = g:coc_root_patterns + ['pyproject.toml']
  call add(g:coc_global_extensions, 'coc-pyright')
  call coc#config('python', {
    \ 'formatting.provider': 'blackd',
    \ 'linting.flake8Enabled': v:true,
    \ 'linting.mypyEnabled': v:true,
    \ })
  call coc#config('pyright', {
    \ 'organizeImports.provider': 'pytest',
    \ 'testing.provider': 'pytest',
    \ })

  " for Go
  call add(g:coc_global_extensions, 'coc-go')
  let g:go_directory_filters = []
    " common
    call extend(g:go_directory_filters, [
      \ "-**/.git",
      \ "-**/vendor",
      \ "-**/.symlinks",
      \ ])
    " for Node.JS
    call extend(g:go_directory_filters, [
      \ "-**/.next",
      \ "-**/.swc",
      \ "-**/node_modules",
      \ "-**/storybook-static",
      \ ])
    " for Python
    call extend(g:go_directory_filters, [
      \ "-**/.mypy_cache",
      \ "-**/__pycache__",
      \ "-**/.pytest_cache",
      \ "-**/.venv",
      \ "-**/venv",
      \ "-**/.neptune",
      \ ])
    " for Terraform
    call extend(g:go_directory_filters, [
      \ "-**/.terraform",
      \ ])
    " for Dart and Flutter
    call extend(g:go_directory_filters, [
      \ "-**/.dart_tool",
      \ ])
    " for iOS
    call extend(g:go_directory_filters, [
      \ "-**/Pods",
      \ "-**/.fvm",
      \ ])
    " for MyProjects
    call extend(g:go_directory_filters, [
      \ "-**/.cache",
      \ "-**/data",
      \ "-**/results",
      \ "-**/results_plots",
      \ "-**/output",
      \ "-**/.docker-compose-data",
      \ "-**/coverage",
      \ ])
  call coc#config('go.goplsOptions', {
    \ 'directoryFilters': g:go_directory_filters,
    \ 'templateExtensions': [
    \   '.go.tmpl',
    \   '.go.tpl',
    \   '.gotmpl',
    \   '.gotpl',
    \ ],
    \ 'local': getenv("GO_IMPORTS_LOCAL"),
    \ 'usePlaceholders': v:true,
    \ })
  if getenv("GO_IMPORTS_LOCAL")
    call coc#config('go.goplsOptions.local', getenv("GO_IMPORTS_LOCAL"))
  endif

  " for Node.js and frontend development
  autocmd FileType typescript,typescriptreact,javascript,javascriptreact let b:coc_root_patterns = g:coc_root_patterns + ['package.json']
  call add(g:coc_global_extensions, 'coc-tsserver')
  "" use prettier
  call add(g:coc_global_extensions, 'coc-react-refactor')
  call add(g:coc_global_extensions, 'coc-html')
  call add(g:coc_global_extensions, 'coc-css')
  call add(g:coc_global_extensions, 'coc-eslint')
  call add(g:coc_global_extensions, 'coc-prettier')
  call coc#config('typescript', {
    \ 'format.enabled': v:false,
    \ })
  call coc#config('javascript', {
    \ 'format.enabled': v:false,
    \ })
  call coc#config('html', {
    \ 'format.enabled': v:false,
    \ })
  call coc#config('css', {
    \ 'format.enabled': v:false,
    \ })
  call coc#config('scss', {
    \ 'format.enabled': v:false,
    \ })
  call coc#config('less', {
    \ 'format.enabled': v:false,
    \ })

  "" for Astro
  call add(g:coc_global_extensions, '@yaegassy/coc-astro')

  "" Deno
  call add(g:coc_global_extensions, 'coc-deno')

  " for Sell Scripts
  call add(g:coc_global_extensions, 'coc-sh')
  call coc#config('diagnostic-languageserver.formatFiletypes.sh', 'shfmt')
  call coc#config('diagnostic-languageserver.formatFiletypes.zsh', 'shfmt')

  " for Terraform
  call coc#config('languageserver.terraform', {
    \ 'command': 'terraform-ls',
    \ 'args': ['serve'],
    \ 'filetypes': ['terraform', 'tf'],
    \ })

  " for Docker
  call add(g:coc_global_extensions, 'coc-docker')
  call coc#config('diagnostic-languageserver.filetypes.Dockerfile', 'hadolint')

  " for GitHub Actions
  call coc#config('diagnostic-languageserver.linters.actionlint', {
    \ 'command': 'actionlint',
    \ 'rootPatterns': ['.github'],
    \ 'debounce': 100,
    \ 'isStdout': v:true,
    \ 'isStderr': v:false,
    \ 'args': ['-format', '{{json .}}'],
    \ 'sourceName': 'actionlint',
    \ 'parseJson': {
    \   'sourceName': 'filepath',
    \   'sourceNameFilter': v:true,
    \   'line': 'line',
    \   'column': 'column',
    \   'endLine': 'end_line',
    \   'endColumn': 'end_column',
    \   'message': '${message}'
    \ },
    \ })
  call coc#config('diagnostic-languageserver.filetypes.yaml', 'actionlint')

  augroup END
'''
#}}}

#{{{ telescope
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = '0.1.x'
depends = [
  'plenary.nvim',
]
hook_add = '''
  lua << EOF
    local actions = require("telescope.actions")
    local fb_actions = require('telescope').extensions.file_browser.actions
    require("telescope").setup({
      defaults = {
        mappings = {
          n = {
            ['<esc>'] = actions.close,
            ['<CR>']  = actions.select_default,

            s         = actions.select_horizontal,
            S         = actions.select_vertical,
            gs        = actions.select_tab,

            j         = actions.move_selection_next,
            k         = actions.move_selection_previous,

            H         = actions.move_to_top,
            M         = actions.move_to_middle,
            L         = actions.move_to_bottom,
            gg        = actions.move_to_top,
            G         = actions.move_to_bottom,

            x         = actions.toggle_selection + actions.move_selection_worse,
            X         = actions.toggle_all,

            ['<C-f>'] = actions.preview_scrolling_down,
            ['<C-b>'] = actions.preview_scrolling_up,
            ['<C-D>'] = false,
            ['<C-U>'] = false,

            ['?'] = actions.which_key,

            -- disable defaults
            ['<C-q>'] = false,
            ['<C-t>'] = false,
            ['<C-v>'] = false,
            ['<C-x>'] = false,
            ['<M-q>'] = false,
            ['<Tab>'] = false,
            ['<S-Tab>'] = false,
            ['<Up>'] = false,
            ['<Down>'] = false,
            ['<PageUp>'] = false,
            ['<PageDown>'] = false,
          },
          i = {
            ['<CR>']  = actions.select_default,

            ['<C-s>'] = actions.select_horizontal,
            ['<C-v>'] = actions.select_vertical,

            ['<C-j>'] = actions.move_selection_next,
            ['<C-k>'] = actions.move_selection_previous,

            ['<C-f>'] = actions.preview_scrolling_down,
            ['<C-b>'] = actions.preview_scrolling_up,

            -- disable defaults
            ['<C-c>'] = false,
            ['<C-d>'] = false,
            ['<C-l>'] = false,
            ['<C-p>'] = false,
            ['<C-q>'] = false,
            ['<C-t>'] = false,
            ['<C-u>'] = false,
            ['<M-q>'] = false,
            ['<Tab>'] = false,
            ['<S-Tab>'] = false,
            ['<Up>'] = false,
            ['<Down>'] = false,
            ['<PageUp>'] = false,
            ['<PageDown>'] = false,
          },
        }
      },
      extensions = {
        coc = {
          prefer_locations = true,
        },
        file_browser = {
          mappings = {
            n = {
              A = fb_actions.create,
              R = fb_actions.rename,
              M = fb_actions.move,
              C = fb_actions.copy,
              D = fb_actions.remove,
              o = fb_actions.open,
              ['<C-h>'] = fb_actions.goto_parent_dir,
              H = fb_actions.goto_cwd,
              X = fb_actions.toggle_all,

              -- disable defaults
              c = false,
              r = false,
              m = false,
              y = false,
              d = false,
              g = false,
              e = false,
              w = false,
              t = false,
              f = false,
              h = false,
              s = false,
            },
            i = {
              -- disable defaults
              ["<A-c>"]  = false,
              ["<S-CR>"] = false,
              ["<A-r>"]  = false,
              ["<A-m>"]  = false,
              ["<A-y>"]  = false,
              ["<A-d>"]  = false,
              ["<C-o>"]  = false,
              ["<C-g>"]  = false,
              ["<C-e>"]  = false,
              ["<C-w>"]  = false,
              ["<C-t>"]  = false,
              ["<C-f>"]  = false,
              ["<C-h>"]  = false,
              ["<C-s>"]  = false,
              ["<bs>"]   = false,
            },
          },
        },
      },
    })
EOF

  nnoremap <silent><nowait> <Space><Space> <Cmd>Telescope find_files<CR>
  nnoremap <silent><nowait> <Space>w       <Cmd>Telescope file_browser<CR>
  nnoremap <silent><nowait> <Space>W       <Cmd>Telescope file_browser path=%:p:h select_buffer=true<CR>
  nnoremap <silent><nowait> <Space>h       <Cmd>Telescope frecency<CR>
  nnoremap <silent><nowait> <Space>b       <Cmd>Telescope buffers<CR>
  nnoremap <silent><nowait> <Space>r       <Cmd>Telescope live_grep<CR>
  nnoremap <silent><nowait> <Space>.       <Cmd>Telescope resume<CR>

  nnoremap <silent><nowait> <Space>vs      <Cmd>Telescope git_status initial_mode=normal<CR>

  nnoremap <silent><nowait> <Space>u       <Cmd>Telescope undo<CR>

  nnoremap <silent><nowait> <Space>t       <Cmd>Telescope treesitter<CR>
  nnoremap <silent><nowait> <Space>p       <Cmd>Telescope registers<CR>

  " memolist
  nnoremap <silent><nowait> <Space>ml <Cmd>lua require('telescope.builtin').find_files({cwd=vim.g.memolist_path, find_command={'rg','--files','--sortr','path'}, initial_mode='normal'})<CR>
  nnoremap <silent><nowait> <Space>mr <Cmd>lua require('telescope.builtin').live_grep({cwd=vim.g.memolist_path})<CR>

  " dotfiles
  nnoremap <silent><nowait> <Space>sl <Cmd>lua require('telescope.builtin').find_files({cwd=os.getenv('HOME')..'/.dotfiles'})<CR>
  nnoremap <silent><nowait> <Space>sr <Cmd>lua require('telescope.builtin').live_grep({cwd=os.getenv('HOME')..'/.dotfiles'})<CR>
'''

[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'
depends = [
  'telescope.nvim',
]
hook_add = '''
  lua << EOF
    require('telescope').load_extension('coc')
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-file-browser.nvim'
depends = [
  'telescope.nvim',
]
hook_add = '''
  lua << EOF
    require('telescope').load_extension('file_browser')
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-frecency.nvim'
depends = [
  'telescope.nvim',
  'sqlite.lua',
]
hook_add = '''
  lua << EOF
    require('telescope').load_extension('frecency')
EOF
'''

[[plugins]]
repo = 'kkharji/sqlite.lua'

[[plugins]]
repo = 'debugloop/telescope-undo.nvim'
depends = [
  'telescope.nvim',
]
hook_add = '''
  lua << EOF
    require('telescope').load_extension('undo')
EOF
'''
#}}}

#{{{ filer
[[plugins]]
repo = 'nvim-tree/nvim-tree.lua'
hook_add = '''
  lua << EOF
    vim.g.loaded_netrw = 1
    vim.g.loaded_netrwPlugin = 1

    -- keybinds
    local function on_attach(bufnr)
      local api = require('nvim-tree.api')
      local function apply(keys, target, desc)
        vim.keymap.set('n', keys, target, { desc = 'nvim-tree: ' .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true })
      end
      local function toggleTreeOrOpen()
        local lib = require('nvim-tree.lib')
        local view = require('nvim-tree.view')
        local action = 'edit'
        local node = lib.get_node_at_cursor()

        if node.link_to and not node.nodes then
            require('nvim-tree.actions.node.open-file').fn(action, node.link_to)
            view.close() -- Close the tree if file was opened
        elseif node.nodes ~= nil then
            lib.expand_or_collapse(node)
        else
            require('nvim-tree.actions.node.open-file').fn(action, node.absolute_path)
            view.close() -- Close the tree if file was opened
        end
      end

      apply('o',    toggleTreeOrOpen, 'toggle tree or open')
      apply('<CR>', toggleTreeOrOpen, 'toggle tree or open')

      apply('<C-l>', api.tree.reload,          'reload')
      apply('K',     api.node.show_info_popup, 'info')

      -- select
      apply('x', api.marks.toggle, 'toggle mark')
      apply('X', api.marks.clear, 'clear marks')

      -- action
      apply('a',        api.fs.create,                  'create')
      apply('d',        api.fs.remove,                  'remove')
      apply('m',        api.fs.cut,                     'cut')
      apply('c',        api.fs.copy.node,               'copy')
      apply('p',        api.fs.paste,                   'paste')
      apply('<C-p>',    api.fs.clear_clipboard,         'clear clipboard')
      apply('P',        api.fs.print_clipboard,         'print clipboard')
      apply('r',        api.fs.rename_node,             'rename')
      apply('S',        api.node.open.vertical,         'edit vertical')
      apply('s',        api.node.open.edit,             'edit file')
      apply('gcd',      api.tree.change_root_to_node,   'change root')
      apply('y',        api.fs.copy.absolute_path,      'yank absolute_path')
      apply('<space>h', api.tree.change_root_to_parent, 'change root to parent')

      apply('?', api.tree.toggle_help, 'help')
      apply('gf', api.live_filter.start, 'live fitler start')
      apply('gF', api.live_filter.clear, 'live fitler clear')
    end

    require('nvim-tree').setup({
      disable_netrw = true,
      git = {
        ignore = false,
      },
      renderer = {
        icons = {
          git_placement = 'signcolumn',
        },
      },
      on_attach = on_attach,
    })
EOF

  nnoremap <silent> <Space>e  <Cmd>NvimTreeToggle<CR>
  nnoremap <silent> <Space>ge <Cmd>NvimTreeToggle %:h<CR>
  nnoremap <silent> <Space>E  <Cmd>NvimTreeFindFileToggle<CR>
'''
#}}}

#{{{ GitHub
[[plugins]]
repo = 'pwntester/octo.nvim'
depends = [
  'plenary.nvim',
  'telescope.nvim',
  'nvim-web-devicons',
]
hook_add = '''
  nnoremap <Space>vil <Cmd>Octo issue list<CR>
  nnoremap <Space>vpl <Cmd>Octo pr list<CR>
  lua << EOF
    require('octo').setup({
      default_remote = {'upstream', 'origin', 'hori-ryota'},
      mappings = {
        issue = {
          close_issue =       { lhs = '<Space>viC',  desc = 'close issue' },
          reopen_issue =      { lhs = '<Space>viO',  desc = 'reopen issue' },
          list_issue =        { lhs = '<Space>vil',  desc = 'list open issues on same repo' },
          reload =            { lhs = '<C-l>',       desc = 'reload' },
          open_in_browser =   { lhs = '<Space>vir',  desc = 'open issue in browser' },
          copy_url =          { lhs = "<Space>viy",  desc = "copy url to system clipboard" },
          add_assignee =      { lhs = "<Space>viaA", desc = "add assignee" },
          remove_assignee =   { lhs = "<Space>viaD", desc = "remove assignee" },
          create_label =      { lhs = "<Space>viLC", desc = "create label" },
          add_label =         { lhs = "<Space>viLA", desc = "add label" },
          remove_label =      { lhs = "<Space>viLD", desc = "remove label" },
          goto_issue =        { lhs = "<Space>vii",  desc = "navigate to a local repo issue" },
          add_comment =       { lhs = "<Space>vicA", desc = "add comment" },
          delete_comment =    { lhs = "<Space>vicD", desc = "delete comment" },
          next_comment =      { lhs = "]c",          desc = "go to next comment" },
          prev_comment =      { lhs = "[c",          desc = "go to previous comment" },
          react_hooray =      { lhs = "<Space>vet",  desc = "add/remove 🎉 reaction" },
          react_heart =       { lhs = "<Space>veh",  desc = "add/remove ❤️ reaction" },
          react_eyes =        { lhs = "<Space>vee",  desc = "add/remove 👀 reaction" },
          react_thumbs_up =   { lhs = "<Space>ve+",  desc = "add/remove 👍 reaction" },
          react_thumbs_down = { lhs = "<Space>ve-",  desc = "add/remove 👎 reaction" },
          react_rocket =      { lhs = "<Space>ver",  desc = "add/remove 🚀 reaction" },
          react_laugh =       { lhs = "<Space>ves",  desc = "add/remove 😄 reaction" },
          react_confused =    { lhs = "<Space>vec",  desc = "add/remove 😕 reaction" },
        },
        pull_request = {
          checkout_pr =         { lhs = "<Space>vpB",  desc = "checkout PR" },
          merge_pr =            { lhs = "<Space>vpM",  desc = "merge commit PR" },
          squash_and_merge_pr = { lhs = "<Space>vpS",  desc = "squash and merge PR" },
          list_commits =        { lhs = "<Space>ll",   desc = "list PR commits" },
          list_changed_files =  { lhs = "<Space>lf",   desc = "list PR changed files" },
          show_pr_diff =        { lhs = "<Space>ld",   desc = "show PR diff" },
          add_reviewer =        { lhs = "<Space>vprA", desc = "add reviewer" },
          remove_reviewer =     { lhs = "<Space>vprD", desc = "remove reviewer request" },
          close_issue =         { lhs = "<Space>vpC",  desc = "close PR" },
          reopen_issue =        { lhs = "<Space>voO",  desc = "reopen PR" },
          list_issues =         { lhs = "<Space>vpl",  desc = "list open issues on same repo" },
          reload =              { lhs = "<C-r>",       desc = "reload PR" },
          open_in_browser =     { lhs = "<Space>vpr",  desc = "open PR in browser" },
          copy_url =            { lhs = "<Space>vpy",  desc = "copy url to system clipboard" },
          goto_file =           { lhs = "<Space>vpf",  desc = "go to file" },
          add_assignee =        { lhs = "<Space>vpaA", desc = "add assignee" },
          remove_assignee =     { lhs = "<Space>vpaD", desc = "remove assignee" },
          create_label =        { lhs = "<Space>vpLC", desc = "create label" },
          add_label =           { lhs = "<Space>vpLA", desc = "add label" },
          remove_label =        { lhs = "<Space>vpLD", desc = "remove label" },
          goto_issue =          { lhs = "<Space>vpi",  desc = "navigate to a local repo issue" },
          add_comment =         { lhs = "<Space>vpcA", desc = "add comment" },
          delete_comment =      { lhs = "<Space>vpcD", desc = "delete comment" },
          next_comment =        { lhs = "]c",          desc = "go to next comment" },
          prev_comment =        { lhs = "[c",          desc = "go to previous comment" },
          react_hooray =        { lhs = "<Space>vet",  desc = "add/remove 🎉 reaction" },
          react_heart =         { lhs = "<Space>veh",  desc = "add/remove ❤️ reaction" },
          react_eyes =          { lhs = "<Space>vee",  desc = "add/remove 👀 reaction" },
          react_thumbs_up =     { lhs = "<Space>ve+",  desc = "add/remove 👍 reaction" },
          react_thumbs_down =   { lhs = "<Space>ve-",  desc = "add/remove 👎 reaction" },
          react_rocket =        { lhs = "<Space>ver",  desc = "add/remove 🚀 reaction" },
          react_laugh =         { lhs = "<Space>ves",  desc = "add/remove 😄 reaction" },
          react_confused =      { lhs = "<Space>vec",  desc = "add/remove 😕 reaction" },
        },
        review_thread = {
          goto_issue =        { lhs = "<Space>vpi",  desc = "navigate to a local repo issue" },
          add_comment =       { lhs = "<Space>vpcA", desc = "add comment" },
          add_suggestion =    { lhs = "<Space>vpG",  desc = "add suggestion" },
          delete_comment =    { lhs = "<Space>vpcD", desc = "delete comment" },
          next_comment =      { lhs = "]c",          desc = "go to next comment" },
          prev_comment =      { lhs = "[c",          desc = "go to previous comment" },
          select_next_entry = { lhs = "]e",          desc = "move to previous changed file" },
          select_prev_entry = { lhs = "[e",          desc = "move to next changed file" },
          close_review_tab =  { lhs = "<C-c>",       desc = "close review tab" },
          react_hooray =      { lhs = "<Space>vet",  desc = "add/remove 🎉 reaction" },
          react_heart =       { lhs = "<Space>veh",  desc = "add/remove ❤️ reaction" },
          react_eyes =        { lhs = "<Space>vee",  desc = "add/remove 👀 reaction" },
          react_thumbs_up =   { lhs = "<Space>ve+",  desc = "add/remove 👍 reaction" },
          react_thumbs_down = { lhs = "<Space>ve-",  desc = "add/remove 👎 reaction" },
          react_rocket =      { lhs = "<Space>ver",  desc = "add/remove 🚀 reaction" },
          react_laugh =       { lhs = "<Space>ves",  desc = "add/remove 😄 reaction" },
          react_confused =    { lhs = "<Space>vec",  desc = "add/remove 😕 reaction" },
        },
        submit_win = {
          approve_review =   { lhs = "<Space>vp<C-a>", desc = "approve review" },
          comment_review =   { lhs = "<Space>vp<C-c>", desc = "comment review" },
          request_changes =  { lhs = "<Space>vp<C-r>", desc = "request changes review" },
          close_review_tab = { lhs = "<Space>vp<C-d>", desc = "close review tab" },
        },
        review_diff = {
          add_review_comment =    { lhs = "<Space>vpcA", desc = "add a new review comment" },
          add_review_suggestion = { lhs = "<Space>vpgA", desc = "add a new review suggestion" },
          focus_files =           { lhs = "<Space>vpx",  desc = "move focus to changed file panel" },
          toggle_files =          { lhs = "<Space>vpz",  desc = "hide/show changed files panel" },
          next_thread =           { lhs = "]t",          desc = "move to next thread" },
          prev_thread =           { lhs = "[t",          desc = "move to previous thread" },
          select_next_entry =     { lhs = "]e",          desc = "move to previous changed file" },
          select_prev_entry =     { lhs = "[e",          desc = "move to next changed file" },
          close_review_tab =      { lhs = "<Space>vprq", desc = "close review tab" },
          toggle_viewed =         { lhs = "<Space>vpv",  desc = "toggle viewer viewed state" },
        },
        file_panel = {
          next_entry =        { lhs = "j",           desc = "move to next changed file" },
          prev_entry =        { lhs = "k",           desc = "move to previous changed file" },
          select_entry =      { lhs = "o",           desc = "show selected changed file diffs" },
          refresh_files =     { lhs = "<C-l>",       desc = "refresh changed files panel" },
          focus_files =       { lhs = "<Space>vpx",  desc = "move focus to changed file panel" },
          toggle_files =      { lhs = "<Space>vpz",  desc = "hide/show changed files panel" },
          select_next_entry = { lhs = "]e",          desc = "move to previous changed file" },
          select_prev_entry = { lhs = "[e",          desc = "move to next changed file" },
          close_review_tab =  { lhs = "<Space>vprq", desc = "close review tab" },
          toggle_viewed =     { lhs = "<Space>vpv",  desc = "toggle viewer viewed state" },
        },
      },
    })
EOF
'''
#}}}

#{{{ Formatting
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
#}}}

#{{{ Async Execution
[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = '''
  let g:dispatch_no_maps = 1
  let g:dispatch_compilers = {}
  let g:dispatch_quicfix_height = 30
  nnoremap <Leader>r  :<C-u>Dispatch<CR>
  nnoremap g<Leader>r :<C-u>Dispatch<CR>
  nnoremap <Leader>du :<C-u>Dispatch docker compose up --build -d<CR>
  nnoremap <Leader>dd :<C-u>Dispatch docker compose down<CR>

  nnoremap <silent> g<Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform apply'<CR>
'''
[plugins.ftplugin]
sh = '''
  nnoremap <buffer><silent> <Leader>r :<C-u>Dispatch "%:p"<CR>
'''
go_gomod = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch -dir=%:h go run .<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch -dir=%:h go generate .<CR>

  let g:dispatch_compilers['go test'] = 'go'
  nnoremap <buffer> <Leader>t :<C-u>Dispatch -dir=%:h go test .<CR>
  nnoremap <buffer> <Leader>gt :<C-u>Dispatch -dir=%:h go test ./...<CR>
  nnoremap <buffer> <Leader>pt :<C-u>Dispatch go test ./...<CR>

  let g:dispatch_compilers['golangci-lint run'] = 'go'
  nnoremap <buffer> <Leader>l :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 .<CR>
  nnoremap <buffer> <Leader>gl :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
  nnoremap <buffer> <Leader>pl :<C-u>Dispatch golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
'''
python = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch python -m "$(echo '%' \| tr / . \| sed -e 's/\.__main__\.py//' \| sed -e 's/\.py//')"<CR>
'''
javascript_javascriptreact_typescript_typescriptreact = '''
  let g:dispatch_compilers['npx eslint'] = 'go'
  nnoremap <buffer> <Leader>l :<C-u>Dispatch -dir=%:h npx eslint --cache -f unix "%"<CR>
  nnoremap <buffer> <Leader>gl :<C-u>Dispatch -dir=%:h npx eslint --cache -f unix .<CR>
  nnoremap <buffer> <Leader>pl :<C-u>Dispatch npx eslint --cache -f unix .<CR>
'''
terraform = '''
  nnoremap <buffer><silent> <Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform apply'<CR>
  nnoremap <buffer><silent> <Leader>t :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform plan'<CR>
  nnoremap <buffer><silent> <Leader><Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform init'<CR>
'''
marp = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch marp --watch --preview %<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch marp --pdf --allow-local-files --output %:s?.marp.md?.pdf? %<CR>
'''

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
hook_add = '''
  let g:dispatch_handlers = ['neovim']

'''
#}}}

#{{{ Testing
[[plugins]]
repo = 'nvim-neotest/neotest'
depends = [
  'plenary.nvim',
  'nvim-treesitter',
  'neotest-go',
  'neotest-python',
  'neotest-jest',
  'neotest-vitest',
  'neotest-dart',
]
hook_add = '''
  nnoremap <Leader>t <Cmd>lua require("neotest").run.run(vim.fn.expand('%'))<CR>
  nnoremap <Leader>T <Cmd>lua require("neotest").run.run()<CR>
  nnoremap ]f        <Cmd>lua require("neotest").jump.next({ status = "failed" })<CR>
  nnoremap [f        <Cmd>lua require("neotest").jump.prev({ status = "failed" })<CR>
  lua << EOF
    local neotest_ns = vim.api.nvim_create_namespace('neotest')
    vim.diagnostic.config({
      virtual_text = {
        format = function(diagnostic)
          local message =
            diagnostic.message:gsub('\n', ' '):gsub('\t', ' '):gsub('%s+', ' '):gsub('^%s+', '')
          return message
        end,
      },
    }, neotest_ns)
    require('neotest').setup({
      -- your neotest config here
      adapters = {
        require('neotest-go')({
          experimental = {
            test_table = true,
          },
          args = {
            '-count=1',
          },
        }),
        require('neotest-python'),
        require('neotest-jest'),
        require('neotest-vitest'),
        require('neotest-dart'),
      },
      icons = {
        failed  = '',
        passed  = '',
        running = '',
        skipped = '',
        unknown = '',
      },
      summary = {
        next_failed = "]f",
        prev_failed = "[f",
        expand = "o",
        expand_all = "O",
        jumpto = "<C-]>",
        mark = 'x',
        clear_marked = 'X',
        run = 'r',
        run_marked = 'R',
      },
    })
EOF
'''

[[plugins]]
repo = 'nvim-neotest/neotest-go'
[[plugins]]
repo = 'nvim-neotest/neotest-python'
[[plugins]]
repo = 'haydenmeade/neotest-jest'
[[plugins]]
repo = 'marilari88/neotest-vitest'
[[plugins]]
repo = 'sidlatau/neotest-dart'
# NOTE: neotest-denoはまだWIPな模様（README.mdにWIPと記載、docに `*neotest.config*` がありhelptagsが本体との重複で失敗する）

[[plugins]]
repo = 'vim-test/vim-test'
on_ft =  [
  'go',
  'python',
]
depends = [
  'vim-dispatch',
]
hook_add = '''
  let g:test#strategy = 'dispatch'
'''
[plugins.ftplugin]
go = '''
  let g:test#go#gotest#file_pattern = '\v.*\.go$'
  nnoremap <buffer><silent> <Leader>T     :<C-u>TestNearest<CR>
  nnoremap <buffer><silent> <Leader><C-t> :<C-u>TestLast<CR>

  function! s:debugNearest()
    let g:test#go#runner = 'delve'
    TestNearest
    unlet g:test#go#runner
  endfunction
  command! -buffer DebugNearest call s:debugNearest()
'''
python = '''
  nnoremap <buffer><silent> <Leader>t :<C-u>TestFile -s -l -vv<CR>
  nnoremap <buffer><silent> <Leader>T :<C-u>TestNearest -s -l -vv<CR>
'''
#}}}

#{{{ Debugger
[[plugins]]
repo = 'mfussenegger/nvim-dap'
on_ft = [
  'go',
  'python',
]
hook_source = '''
  nnoremap <silent> <Leader>ff :<C-u>lua require'dap'.continue()<CR>

  nnoremap <silent> <Leader>fbb :<C-u>lua require'dap'.toggle_breakpoint()<CR>
  nnoremap <silent> <Leader>fbc :<C-u>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
  nnoremap <silent> <Leader>fbl :<C-u>lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>

  nnoremap <silent> <Leader>fj :<C-u>lua require'dap'.step_over()<CR>
  nnoremap <silent> <Leader>fl :<C-u>lua require'dap'.step_into()<CR>
  nnoremap <silent> <Leader>fh :<C-u>lua require'dap'.step_out()<CR>

  nnoremap <silent> <leader>f: :<C-u>lua require'dap'.repl.open()<CR>
  nnoremap <silent> <leader>fR :<C-u>lua require'dap'.run_last()<CR>

  nnoremap <silent> <Leader>fn :<C-u>lua require'dap'.down()<CR>
  nnoremap <silent> <Leader>fp :<C-u>lua require'dap'.up()<CR>
'''

# [[plugins]]
# repo = 'rcarriga/nvim-dap-ui'
# on_source = 'nvim-dap'
# depends = [
#   'nvim-dap',
# ]
# hook_source = '''
#   nnoremap <buffer> <Leader>f<Space> :<C-u>lua require'dapui'.toggle()<CR>
# 
#   lua << EOF
#     -- auto open
#     require'dap'.listeners.after.event_initialized["dapup_config"] = function()
#       require'dapui'.open()
#     end
#     -- auto close
#     require'dap'.listeners.before.event_terminated["dapup_config"] = function()
#       require'dapui'.close()
#     end
#     require'dap'.listeners.before.event_exited["dapup_config"] = function()
#       require'dapui'.close()
#     end
# 
#     require("dapui").setup({
#       icons = { expanded = "▾", collapsed = "▸" },
#       mappings = {
#         -- Use a table to apply multiple mappings
#         expand = "o",
#         open = "<CR>",
#         remove = "d",
#         edit = "e",
#         repl = "r",
#       },
#       layouts = {
#         {
#           elements = {
#             { id = "scopes", size = 0.3 },
#             { id = "watches", size = 0.2 },
#             { id = "stacks", size = 0.3 },
#             { id = "breakpoints", size = 0.2 },
#           },
#           size = 80,
#           position = "left", -- Can be "left", "right", "top", "bottom"
#         },
#         {
#           elements = { "repl" },
#           size = 10,
#           position = "bottom", -- Can be "left", "right", "top", "bottom"
#         },
#       },
#       floating = {
#         max_height = nil, -- These can be integers or a float between 0 and 1.
#         max_width = nil, -- Floats will be treated as percentage of your screen.
#         border = "single", -- Border style. Can be "single", "double" or "rounded"
#         mappings = {
#           close = "<Esc>",
#         },
#       },
#       windows = { indent = 1 },
#     })
# 
# EOF
# '''

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
on_source = 'nvim-dap'
depends = [
  'nvim-dap',
]
hook_source = '''
  lua require("nvim-dap-virtual-text").setup()
'''

[[plugins]]
repo = 'leoluz/nvim-dap-go'
on_ft = [
  'go',
]
depends = [
  'nvim-dap',
  'nvim-treesitter',
]
hook_source = '''
  lua require('dap-go').setup()
'''
[plugins.ftplugin]
go = '''
  nnoremap <buffer> <Leader>ft :<C-u>lua require('dap-go').debug_test()<CR>
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap-python'
on_ft = [
  'python',
]
depends = [
  'nvim-dap',
  'nvim-treesitter',
]
hook_source = '''
  lua require('dap-python').setup()
'''
[plugins.ftplugin]
python = '''
  nnoremap <buffer> <Leader>ft :<C-u>:lua require('dap-python').test_method()<CR>
  nnoremap <buffer> <Leader>fc :<C-u>:lua require('dap-python').test_class()<CR>
'''
#}}}

#{{{ Utils
[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'direnv/direnv.vim'

#{{{ Editing Text Utils
[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]] # edit surround easy
repo = 'machakann/vim-sandwich'
hook_add = '''
  let g:sandwich_no_default_key_mappings = 1
  let g:operator_sandwich_no_default_key_mappings = 1

  " add
  silent! nmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
  silent! xmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
  silent! omap <unique> <Leader>wa <Plug>(operator-sandwich-g@)

  " delete
  silent! nmap <unique><silent> <Leader>wd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> <Leader>wdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  silent! xmap <unique> <Leader>wd <Plug>(operator-sandwich-delete)

  " replace
  silent! nmap <unique><silent> <Leader>wr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> <Leader>wrb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  silent! xmap <unique> <Leader>wr <Plug>(operator-sandwich-replace)
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'
hook_add = '''
    nmap <silent> <leader>x <Plug>(ArgWrapToggle)
'''
[plugins.ftplugin]
go = '''
    let b:argwrap_tail_comma = 1
'''

[[plugins]] # comment
repo = 'numToStr/Comment.nvim'
hook_add = '''
  lua << EOF
    require('Comment').setup({
    })
EOF
'''
#}}}

#{{{ Memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
  let g:memolist_path = "~/Dropbox/memo"
  let g:memolist_memo_suffix = "txt"
  let g:memolist_memo_date = "%Y-%m-%d %H:%M"
  nnoremap <Leader>mn :<C-u>MemoNew<CR>
'''
#}}}

#{{{ Diff tools
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
  nmap <silent> [<C-d> :<C-u>DirDiffPrev<CR>
  nmap <silent> ]<C-d> :<C-u>DirDiffNext<CR>
'''
#}}}

#}}}

#{{{ Appearance
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
hook_add = '''
  lua require('colorizer').setup()
'''
#}}}

#{{{ Highlights
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_done_update = '''
  TSUpdate
'''
merged = 0
hook_source = '''
  lua << EOF
    require'nvim-treesitter.configs'.setup{
      parser_install_dir = vim.g.treesitter_parser_dir,
      ignore_install = { --{{{
        'ada',
        'agda',
        'arduino',
        -- 'astro',
        -- 'awk',
        -- 'bash',
        'bass',
        'beancount',
        'bibtex',
        'bicep',
        'blueprint',
        -- 'c',
        -- 'c_sharp',
        'capnp',
        'chatito',
        'clojure',
        -- 'cmake',
        -- 'comment',
        'commonlisp',
        'cooklang',
        'cpon',
        -- 'cpp',
        -- 'css',
        -- 'cuda',
        'cue',
        'd',
        -- 'dart',
        'devicetree',
        'dhall',
        'diff',
        -- 'dockerfile',
        -- 'dot',
        'ebnf',
        'eex',
        'elixir',
        'elm',
        'elsa',
        'elvish',
        'embedded_template',
        'erlang',
        'fennel',
        'firrtl',
        'fish',
        'foam',
        'fortran',
        'fsh',
        'func',
        'fusion',
        'gdscript',
        -- 'git_config',
        -- 'git_rebase',
        -- 'gitattributes',
        -- 'gitcommit',
        -- 'gitignore',
        'gleam',
        'glimmer',
        'glsl',
        -- 'go',
        'godot_resource',
        -- 'gomod',
        -- 'gosum',
        -- 'gowork',
        -- 'graphql',
        'hack',
        'hare',
        'haskell',
        -- 'hcl',
        'heex',
        -- 'help',
        'hjson',
        'hlsl',
        'hocon',
        -- 'html',
        'htmldjango',
        -- 'http',
        'ini',
        -- 'java',
        -- 'javascript',
        -- 'jq',
        -- 'jsdoc',
        -- 'json',
        -- 'json5',
        -- 'jsonc',
        -- 'jsonnet',
        'julia',
        'kdl',
        -- 'kotlin',
        'lalrpop',
        -- 'latex',
        'ledger',
        'llvm',
        -- 'lua',
        -- 'luadoc',
        -- 'luap',
        'm68k',
        -- 'make',
        -- 'markdown',
        -- 'markdown_inline',
        -- 'matlab',
        'menhir',
        -- 'mermaid',
        'meson',
        'mlir',
        'nickel',
        'ninja',
        'nix',
        'norg',
        'ocaml',
        'ocaml_interface',
        'ocamllex',
        'org',
        'pascal',
        'passwd',
        -- 'perl',
        'php',
        'phpdoc',
        'pioasm',
        'po',
        'poe_filter',
        'pony',
        'prisma',
        -- 'proto',
        'prql',
        'pug',
        -- 'python',
        'ql',
        'qmldir',
        'qmljs',
        'query',
        'r',
        'racket',
        'rasi',
        'regex',
        'rego',
        'rnoweb',
        'ron',
        'rst',
        -- 'ruby',
        -- 'rust',
        -- 'scala',
        'scheme',
        -- 'scss',
        'slint',
        'smali',
        'smithy',
        'solidity',
        'sparql',
        -- 'sql',
        'squirrel',
        'starlark',
        'supercollider',
        'surface',
        'svelte',
        'swift',
        'sxhkdrc',
        't32',
        'tablegen',
        'teal',
        -- 'terraform',
        'thrift',
        'tiger',
        'tlaplus',
        'todotxt',
        -- 'toml',
        -- 'tsx',
        'turtle',
        'twig',
        -- 'typescript',
        'ungrammar',
        'uxntal',
        'v',
        'vala',
        'verilog',
        'vhs',
        -- 'vim',
        -- 'vue',
        'wgsl',
        'wgsl_bevy',
        -- 'yaml',
        'yang',
        'yuck',
        'zig',
      }; --}}}
      ensure_installed = 'all';
      highlight = {
        enable = true;
      };
      indent = {
        enable = false;
      };
    };
EOF
'''
#}}}

#{{{ Filetype

[ftplugin] #{{{
snippets = '''
  setlocal noexpandtab
'''
vim = '''
  setlocal tabstop=2
  setlocal shiftwidth=2
'''
make = '''
  setlocal noexpandtab
  setlocal tabstop=8
  setlocal shiftwidth=8
'''
python = '''
  setlocal tabstop=4
  setlocal shiftwidth=4
'''
kotlin = '''
  setlocal tabstop=4
  setlocal shiftwidth=4
'''
markdown = '''
  setlocal tabstop=4
  setlocal shiftwidth=4
'''
css = '''
  setlocal tabstop=4
  setlocal shiftwidth=4
'''
go = '''
  setlocal noexpandtab
  setlocal tabstop=2
  setlocal shiftwidth=2
'''
#}}}

#{{{ CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']
#}}}

#{{{ Go
[[plugins]]
repo = 'rhysd/vim-goyacc'
on_ft = 'goyacc'

[[plugins]]
repo = 'mattn/vim-gomod'
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'
#}}}

#{{{ Mermaid
[[plugins]]
repo = 'mracos/mermaid.vim'
on_ft = 'mermaid'
#}}}

#}}}

#{{{ Status bar
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
hook_add = '''
  lua << EOF
    require('lualine').setup({
      options = {
        disabled_filetypes = {
          status_line = {
            'fern',
          },
          winbar = {
            'fern',
          },
        },
      },
      sections = {
        lualine_a = { 'mode' },
        lualine_b = { 'branch', {
            'diagnostics',
            source = { 'coc' },
            sections = { 'error', 'warn' },
            symbols = {
              error = 'E',
              warn  = 'W',
              info  = 'I',
              hint  = 'H',
            },
          },
        },
        lualine_c = {
          {
            'filename',
            path = 1,
          },
        },
        lualine_x = { 'g:coc_status', 'encoding', 'fileformat', 'filetype' },
        lualine_y = { 'progress' },
        lualine_z = { 'location' },
      },
      inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = { 'filename' },
        lualine_x = { 'location' },
        lualine_y = {},
        lualine_z = {},
      },
      extensions = {
        'fern',
        'nvim-dap-ui',
        'quickfix',
      },
    })
EOF
'''
#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set termguicolors
'''
hook_post_source = '''
  colorscheme iceberg
'''
#}}}
