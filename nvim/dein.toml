#{{{ General

#{{{ crtlp
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    " Default mappings
    "" let g:ctrlp_map = '<C-p>'
    "" let g:ctrlp_cmd = 'CtrlP'

    let g:ctrlp_map = '<C-p><C-p>'

    let g:ctrlp_working_path_mode = 'wa'

    let g:ctrlp_match_window = 'max:50'

    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

    " Set delay to prevent extra search
    let g:ctrlp_lazy_update = 350

    " Do not clear filenames cache, to improve CtrlP startup
    " You can manualy clear it by <F5>
    let g:ctrlp_clear_cache_on_exit = 0

    " Set no file limit, we are building a big project
    let g:ctrlp_max_files = 0

    " If ag is available use it as filename list generator instead of 'find'
    if executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor
        let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --ignore ''.git'' --ignore ''.DS_Store'' --ignore ''node_modules'' --ignore ''Alfred.alfredpreferences'' --hidden -g ""'
    endif

    nnoremap <C-p>p :<C-u>CtrlP<CR>
    nnoremap <C-p>b :<C-u>CtrlPBuffer<CR>
    nnoremap <C-p>m :<C-u>CtrlPMRU<CR>
    nnoremap <C-p>T :<C-u>CtrlPTag<CR>
    nnoremap <C-p>t :<C-u>CtrlPBufTag<CR>
    nnoremap <C-p>q :<C-u>CtrlPQuickfix<CR>
    nnoremap <C-p>d :<C-u>CtrlPDir<CR>
    nnoremap <C-p>r :<C-u>CtrlPPTS<CR>
    nnoremap <C-p>u :<C-u>CtrlPUndo<CR>
    nnoremap <C-p>l :<C-u>CtrlPLine<CR>
    nnoremap <C-p>c :<C-u>CtrlPChange<CR>
    nnoremap <C-p>x :<C-u>CtrlPMixed<CR>
    nnoremap <C-p>y :<C-u>CtrlPYankRound<CR>
'''
[[plugins]]
repo = 'FelikZ/ctrlp-py-matcher'
#}}}

#{{{ Status bar
# color scheme for lightline
[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
                \ 'colorscheme': 'hybrid',
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
                \   'right': [ [ 'qfstatusline', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'component_function': {
                \   'fugitive': 'LightLineFugitive',
                \   'filename': 'LightLineFilename',
                \   'fileformat': 'LightLineFileformat',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'mode': 'LightLineMode',
                \   'ctrlpmark': 'CtrlPMark',
                \ },
                \ 'component_expand': {
                \   'qfstatusline': 'qfstatusline#Update',
                \ },
                \ 'component_type': {
                \   'qfstatusline': 'error',
                \ },
                \ 'subseparator': { 'left': '|', 'right': '|' }
                \ }

    function! LightLineModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help' && &readonly ? 'RO' : ''
    endfunction

    function! LightLineFilename()
        let fname = expand('%:t')
        return fname == 'ControlP' ? g:lightline.ctrlp_item :
                    \ fname == '__Tagbar__' ? g:lightline.fname :
                    \ fname =~ '__Gundo\|NERD_tree' ? '' :
                    \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \ &ft == 'unite' ? unite#get_status_string() :
                    \ &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ ('' != fname ? fname : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
        try
            if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
                let mark = ''  " edit here for cool mark
                let _ = fugitive#head()
                return strlen(_) ? mark._ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ fname == '__Gundo__' ? 'Gundo' :
                    \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                    \ fname =~ 'NERD_tree' ? 'NERDTree' :
                    \ &ft == 'unite' ? 'Unite' :
                    \ &ft == 'vimfiler' ? 'VimFiler' :
                    \ &ft == 'vimshell' ? 'VimShell' :
                    \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    function! CtrlPMark()
        if expand('%:t') =~ 'ControlP'
            call lightline#link('iR'[g:lightline.ctrlp_regex])
            return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
                        \ , g:lightline.ctrlp_next], 0)
        else
            return ''
        endif
    endfunction

    let g:ctrlp_status_func = {
                \ 'main': 'CtrlPStatusFunc_1',
                \ 'prog': 'CtrlPStatusFunc_2',
                \ }

    function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
        let g:lightline.ctrlp_regex = a:regex
        let g:lightline.ctrlp_prev = a:prev
        let g:lightline.ctrlp_item = a:item
        let g:lightline.ctrlp_next = a:next
        return lightline#statusline(0)
    endfunction

    function! CtrlPStatusFunc_2(str)
        return lightline#statusline(0)
    endfunction

    let g:tagbar_status_func = 'TagbarStatusFunc'

    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
        return lightline#statusline(0)
    endfunction

    let g:unite_force_overwrite_statusline = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimshell_force_overwrite_statusline = 0
'''
#}}}

#{{{ history
[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = '''
    nnoremap <space>u :<C-u>GundoToggle<CR>
'''
#}}}

#{{{ content
[[plugins]]
repo = 'vim-scripts/diffchar.vim'
hook_add = '''
    let g:DiffUnit = "Word1"
'''
#}}}

#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    let g:hybrid_use_Xresources = 1
    set background=dark
    augroup colorscheme_hybrid
      autocmd!
      autocmd  VimEnter * nested colorscheme hybrid
    augroup END
'''
#}}}

#{{{ Programming

#{{{ YouCompleteMe
[[plugins]]
repo = 'Valloric/YouCompleteMe'
build = 'brew install cmake; ./install.py --clang-completer --gocode-completer --tern-completer'
hook_add = '''
    " For 'scrooloose/syntastic'
    let g:ycm_show_diagnostics_ui = 0

    nnoremap <leader>dd :<C-u>YcmCompleter GoTo<CR>
    nnoremap <leader>dr :<C-u>YcmCompleter GoToReferences<CR>
    nnoremap <leader>gd :<C-u>YcmCompleter GetDoc<CR>
    nnoremap <leader>I :<C-u>YcmCompleter GetType<CR>


    let g:ycm_filetype_blacklist = {}

    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax = 1
    let g:ycm_add_preview_to_completeopt = 1
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_autoclose_preview_window_after_insertion = 1
    let g:ycm_filepath_completion_use_working_dir = 1
'''
#}}}

#{{{ Snippet
[[plugins]]
repo = 'honza/vim-snippets'
[[plugins]]
repo = 'SirVer/ultisnips'
depends = 'vim-snippets'
hook_add = '''
    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger = '<c-k>'
    let g:UltiSnipsJumpForwardTrigger = '<c-k>'
    let g:UltiSnipsJumpBackwardTrigger = '<c-j>'
    let g:UltiSnipsListSnippets = '<c-l>'
    let g:UltiSnipsSnippetsDir = g:vim_dir . '/UltiSnips'
    let g:UltiSnipsEditSplit = 'context'
'''
#}}}

#{{{ Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent> <space>e :<C-u>NERDTreeToggle<CR>
    let g:NERDTreeMinimalUI=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'
'''
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
#}}}

#{{{ Visual
[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
    " invoke with '-'
    nmap  -  <Plug>(choosewin)

    " use overlay feature
    let g:choosewin_overlay_enable = 1

    " workaround for overlay font broken on mutibyte buffer.
    let g:choosewin_overlay_clear_multibyte = 1

    " tmux like overlay color
    let g:choosewin_color_overlay = {
                \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
                \ 'cterm': [ 25, 25 ]
                \ }
    let g:choosewin_color_overlay_current = {
                \ 'gui': ['firebrick1', 'firebrick1' ],
                \ 'cterm': [ 124, 124 ]
                \ }

    let g:choosewin_blink_on_land      = 0 " dont' blink at land
    let g:choosewin_statusline_replace = 0 " don't replace statusline
    let g:choosewin_tabline_replace    = 0 " don't replace tabline
'''
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_color_term = 236
'''
#}}}

#{{{ Editor
# edit surround easy
[[plugins]]
repo = 'tpope/vim-surround'
# Aligning Text
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

    if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['"'] = {
                \ 'pattern': '"',
                \ 'ignore_groups': ['!Comment']
                \ }
'''
# comment stuff out
[[plugins]]
repo = 'tpope/vim-commentary'
# reuse register
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
let g:yankround_use_ctrlp = 1
let g:yankround_max_history = 50

nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-k> <Plug>(yankround-prev)
nmap <C-j> <Plug>(yankround-next)
cmap <C-r> <Plug>(yankround-insert-register)
cmap <C-y> <Plug>(yankround-pop)
'''
# easily search for, substitute, and abbreviate multiple variants of a word
[[plugins]]
repo = 'tpope/vim-abolish'
#}}}

#{{{ Motion
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " based on [Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa](http://haya14busa.com/mastering-vim-easymotion/)
    " =======================================
    " Boost your productivity with EasyMotion
    " =======================================
    " Disable default mappings
    " If you are true vimmer, you should explicitly map keys by yourself.
    " Do not rely on default bidings.
    let g:EasyMotion_do_mapping = 0

    " Or map prefix key at least(Default: <Leader><Leader>)
    " map <Leader> <Plug>(easymotion-prefix)

    " =======================================
    " Find Motions
    " =======================================
    " Jump to anywhere you want by just `4` or `3` key strokes without thinking!
    " `s{char}{char}{target}`
    nmap s <Plug>(easymotion-s2)
    xmap s <Plug>(easymotion-s2)
    omap z <Plug>(easymotion-s2)
    " Of course, you can map to any key you want such as `<Space>`
    " map <Space>(easymotion-s2)

    " Turn on case sensitive feature
    let g:EasyMotion_smartcase = 1

    " =======================================
    " Line Motions
    " =======================================
    " `JK` Motions: Extend line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    " keep cursor column with `JK` motions
    let g:EasyMotion_startofline = 0

    " =======================================
    " General Configuration
    " =======================================
    let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
    " Show target key with upper case to improve readability
    let g:EasyMotion_use_upper = 1
    " Jump to first match with enter & space
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_space_jump_first = 1
    let g:EasyMotion_use_migemo = 1


    " =======================================
    " Search Motions
    " =======================================
    " Extend search motions with vital-over command line interface
    " Incremental highlight of all the matches
    " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
    " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
    " :h easymotion-command-line
    nmap g/ <Plug>(easymotion-sn)
    xmap g/ <Plug>(easymotion-sn)
    omap g/ <Plug>(easymotion-tn)
'''
# highlight substitute target
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
    nnoremap <silent> <Leader>s :<C-u>OverCommandLine<CR>
'''
# pairs of handy bracket mappings
[[plugins]]
repo = 'tpope/vim-unimpaired'
#}}}

#{{{ syntax check
# syntax check
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [
  'shabadou.vim',
  'vimproc.vim',
  'vim-qfstatusline',
  'vim-hier',
  'quickfixstatus',
]
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
    let g:watchdogs_check_BufWritePost_enable = 1

    if !exists("g:quickrun_config")
        let g:quickrun_config = {}
    endif
    let g:quickrun_config["watchdogs_checker/_"] = {
                \ "outputter": "error",
                \ "outputter/error": "quickfix",
                \ "outputter/error/quickfix/open_cmd": "",
                \ "hook/close_quickfix/enable_exit": 1,
                \ "hook/back_window/enable_exit": 0,
                \ "hook/back_window/priority_exit": 1,
                \ "hook/qfstatusline_update/enable_exit": 1,
                \ "hook/qfstatusline_update/priority_exit": 2,
                \ "runner/vimproc/updatetime": 40,
                \ }

    " for go
    " gofmtとgovetも実行して混ぜたい->
    " 単純に連続実行でできたけど、&区切りの並列実行が上手くいかない
    " golintは変数名の指摘だけ無視して混ぜたい
    " need `go get github.com/kisielk/errcheck`
    let g:quickrun_config["watchdogs_checker/errcheck"] = {
                \ "command": "errcheck",
                \ "exec": "%c -abspath %o ./%s:.:h/...",
                \ "errorformat": '%f:%l:%c: %m, %f:%l:%c %#%m',
                \ }
    let g:quickrun_config["watchdogs_checker/go_all"] = {
                \ "command": "go",
                \ "exec": "%c vet %s:p; errcheck -abspath ./%s:.:h/*.go",
                \ "errorformat": '%f:%l:%c: %m, %f:%l:%c %#%m, vet: %.%\+: %f:%l:%c: %m,%W%f:%l: %m',
                \ }
    let g:quickrun_config["go/watchdogs_checker"] = {
                \ "type": "watchdogs_checker/errcheck"
                \ }
    " let g:quickrun_config["go/watchdogs_checker"] = {
    "             \ "type"
    "             \     : executable("errcheck") ? "watchdogs_checker/errcheck"
    "             \     : executable("gofmt") ? "watchdogs_checker/gofmt"
    "             \     : executable("govet") ? "watchdogs_checker/govet"
    "             \     : executable("go")    ? "watchdogs_checker/go_vet"
    "             \     : ""
    "             \ }

    " for Python
    let g:quickrun_config["python/watchdogs_checker"] = {
                \ "type"
                \     : executable("flake8") ? "watchdogs_checker/flake8"
                \     : executable("pyflakes") ? "watchdogs_checker/pyflakes"
                \     : ""
                \ }

    " for html
    let g:quickrun_config['html'] = { 'command' : 'open', 'exec' : '%c %s', 'outputter': 'browser' }

    " for lightline
    let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''
hook_post_source = '''
    " watchdogs.vim の設定を追加
    call watchdogs#setup(g:quickrun_config)
'''
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'
[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
[[plugins]]
repo = 'cohama/vim-hier'
[[plugins]]
repo = 'dannyob/quickfixstatus'
#}}}

#{{{ Git/Gist
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'cohama/agit.vim'
[[plugins]]
repo = 'idanarye/vim-merginal'
# Gist
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista', '<Plug>(gista-']
#}}}

#{{{ Javascript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']
[[plugins]]
repo = 'gavocanov/vim-js-indent'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']
[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
'''
[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['jst', 'ejs']
[[plugins]]
repo = 'digitaltoad/vim-jade'
on_ft = 'jade'
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'
[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'
#}}}

#{{{ TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
build = 'npm install -g clausreinke/typescript-tools typescript'
on_ft = 'typescript'
#}}}

#{{{ go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go_fmt_options = '-s'
    " metalinterにオプションを付ける方法が用意されていなかったのでとりあえず無理やり混ぜ込む
    let g:go_metalinter_deadline = '10s --tests'
    let g:go_metalinter_enabled = [
                \ 'deadcode',
                \ 'errcheck',
                \ 'gofmt',
                \ 'ineffassign',
                \ 'interfacer',
                \ 'structcheck',
                \ 'varcheck',
                \ 'vet',
                \ ]
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_build_constraints = 1
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [
                \ 'p:package',
                \ 'i:imports:1',
                \ 'c:constants',
                \ 'v:variables',
                \ 't:types',
                \ 'n:interfaces',
                \ 'w:fields',
                \ 'e:embedded',
                \ 'm:methods',
                \ 'r:constructor',
                \ 'f:functions'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                \ 't' : 'ctype',
                \ 'n' : 'ntype'
                \ },
                \ 'scope2kind' : {
                \ 'ctype' : 't',
                \ 'ntype' : 'n'
                \ },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }

    let g:go_def_reuse_buffer = 1
'''
#}}}

#{{{ Protocol Buffers
[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = 'proto'
#}}}

#{{{ Python
[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'
#}}}

#{{{ Ruby
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby', 'haml']
[[plugins]]
repo = 'ruby-matchit'
on_ft = ['ruby', 'eruby', 'haml']
[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = 'ruby'
[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = 'ruby'
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'
#}}}

#{{{ Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'groovy'
#}}}

#{{{ Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'
#}}}

#{{{ html
# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:user_emmet_leader_key=','

    let g:user_emmet_settings = {
                \   'variables': {
                \     'lang': 'ja'
                \   },
                \   'indentation': '  '
                \ }
'''
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
#}}}

#{{{ css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade', 'css']
[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'
[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'
[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = 'stylus'
#}}}

#{{{ Markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:markdown_enable_spell_checking = 0
    let g:markdown_mapping_switch_status = '<Learder>x'
'''

# Preview
[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = 'open-browser.vim'
hook_source = '''
    " realtime preview
    let g:previm_enable_realtime = 1
'''
#}}}

#{{{ JSON
# Preview
[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'javascript'
#}}}

#{{{ Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'dockerfile'
#}}}

#{{{ Ansible
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = 'ansible'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
hook_source = '''
    let g:plantuml_executable_script = '$HOME/.dotfiles/plantuml.sh'
'''
#}}}

#{{{ Graphviz
[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = 'dot'
hook_source = '''
    let g:WMGraphviz_output='png'
'''
#}}}

#{{{ SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_ft = 'sql'
[[plugins]]
repo = 'vim-scripts/Align'
on_ft = 'sql'
#}}}

#}}}

#{{{ Misc
# the_silver_searcher
[[plugins]]
repo = 'rking/ag.vim'
# replacement in quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace'
# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
                \ 'runner': 'vimproc',
                \ 'runner/vimproc/updatetime': 40,
                \ }
'''
# qargs
[[plugins]]
repo = 'henrik/vim-qargs'
# list tags
[[plugins]]
repo = 'majutsushi/tagbar'
build = 'brew install ctags'
hook_add = '''
    nmap <space>t :<C-u>TagbarToggle<CR>
'''
# mark and highlight words
[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
    nmap <Space>m <Plug>(quickhl-manual-this)
    xmap <Space>m <Plug>(quickhl-manual-this)
    nmap <Space>M <Plug>(quickhl-manual-reset)
    xmap <Space>M <Plug>(quickhl-manual-reset)

    nmap <Space>j <Plug>(quickhl-cword-toggle)
    nmap <Space>] <Plug>(quickhl-tag-toggle)
    map ,h <Plug>(operator-quickhl-manual-this-motion)
'''
# memo
[[plugins]]
repo = 'fuenor/qfixgrep'
[[plugins]]
repo = 'glidenote/memolist.vim'
depends = 'qfixgrep'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    " suffix type (default markdown)
    let g:memolist_memo_suffix = "txt"

    " date format (default %Y-%m-%d %H:%M)
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    "" let g:memolist_memo_date = "epoch"
    "" let g:memolist_memo_date = "%D %T"

    " tags prompt (default 0)
    "" let g:memolist_prompt_tags = 1

    " categories prompt (default 0)
    let g:memolist_prompt_categories = 1

    " use qfixgrep (default 0)
    let g:memolist_qfixgrep = 1

    " use vimfler (default 0)
    "" let g:memolist_vimfiler = 1

    " use arbitrary vimfler option (default -split -winwidth=50)
    "" let g:memolist_vimfiler_option = "-split -winwidth=50 -simple"

    " use unite (default 0)
    "" let g:memolist_unite = 1

    " use arbitrary unite option (default is empty)
    "" let g:memolist_unite_option = "-auto-preview -start-insert"

    " use arbitrary unite source (default is 'file')
    "" let g:memolist_unite_source = "file_rec"

    " use template
    let g:memolist_template_dir_path = "~/.vim/template/memolist"

    " remove filename prefix (default 0)
    "" let g:memolist_filename_prefix_none = 1

    " use various Ex commands (default '')
    let g:memolist_ex_cmd = 'CtrlP'
    let g:memolist_ex_cmd = 'NERDTree'

    nnoremap <Leader>mn :<C-u>MemoNew<CR>
    nnoremap <Leader>ml :<C-u>MemoList<CR>
    nnoremap <Leader>mg :<C-u>MemoGrep<CR>
    " use CtrlP
    nnoremap <Leader>mf :<C-u>exe "CtrlP" g:memolist_path<cr><f5>
'''

# use histogram algorithm for vimdiff
[[plugins]]
repo = 'chrisbra/vim-diff-enhanced'
hook_add = '''
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=histogram")'
'''
#}}}
