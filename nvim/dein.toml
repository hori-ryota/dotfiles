#{{{ dein self
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token=$DEINVIM_GITHUB_API_TOKEN
  command! DeinInstall call dein#install()
  command! DeinUpdate call dein#check_update(v:true)
'''
#}}}

#{{{ ecosystems
[[plugins]]
repo = 'vim-denops/denops.vim'
#}}}

#{{{ denite
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
depends = [
  'vim-clap',
  'neomru.vim',
  'neoyank.vim',
  'vim-denite-ghq',
]
hook_post_source = '''
  let s:denite_win_width_percent = 0.7
  let s:denite_win_height_percent = 0.7
  let s:denite_win_height_offset = 0.1
  call denite#custom#option('_', {
      \ 'split': 'floating',
      \ 'smartcase': 1,
      \ 'prompt': '> ',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns * (1 - s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines * (1 - s:denite_win_height_percent + 2 * s:denite_win_height_offset)) / 2),
      \ 'auto_action': 'preview',
      \ 'max_candidates': 1000000,
      \ })

  call denite#custom#filter('matcher/clap', 'clap_path', g:dein_dir . '/repos/github.com/liuchengxu/vim-clap')

  " Change matchers.
  call denite#custom#source('_', 'matchers', ['matcher/clap'])

  " Change file/rec command.
  call denite#custom#var('file/rec', 'command',
      \ ['rg', '--files', '--color', 'never'])

  " Ripgrep command on grep source
  call denite#custom#var('grep', {
      \ 'command': ['rg'],
      \ 'default_opts': [
      \ '--vimgrep', '--no-heading', '--color', 'never',
      \ ],
      \ 'recursive_opts': [],
      \ 'pattern_opt': ['--regexp'],
      \ 'separator': ['--'],
      \ 'final_opts': [],
      \ })

  "{{{ cd session
  let s:data_home = empty($XDG_DATA_HOME) ? expand('~/.local/share') : $XDG_DATA_HOME
  let s:session_dir = get(g:, 'denite_session_dir', s:data_home . '/nvim/denite_session')
  if !isdirectory(s:session_dir)
    call mkdir(s:session_dir, 'p')
  endif

  function! s:session_file_name(target_dir)
    return s:session_dir . '/' . trim(substitute(resolve(a:target_dir), '/', '-', 'g'), '-') . '.vim'
  endfunction

  function! s:save_session(target_dir)
    execute 'mksession! ' . s:session_file_name(a:target_dir)
  endfunction

  function! s:load_or_create_session(target_dir)
    let s:file_name = s:session_file_name(a:target_dir)
    if filereadable(s:file_name)
      execute 'source ' . s:file_name
      return
    endif
    call s:save_session(a:target_dir)
  endfunction

  function! s:cdsession_action(context)
    call s:save_session(getcwd())

    let s:target = a:context['targets'][0]
    let s:path = s:target['action__path']
    execute 'cd ' . s:path
    call s:load_or_create_session(s:path)
  endfunction

  call denite#custom#action('directory', 'cdsession', function('s:cdsession_action'))

  "{{{ clean session
  function! s:clean_session(target_dir)
    let s:file_name = s:session_file_name(a:target_dir)
    if filewritable(s:file_name)
      call delete(s:file_name)
    endif
  endfunction
  function! s:clean_session_action(context)
    let s:target = a:context['targets'][0]
    let s:path = s:target['action__path']
    call s:clean_session(s:path)
  endfunction
  call denite#custom#action('directory', 'clean_session', function('s:clean_session_action'), {'is_quit': 0})

  function! s:clean_sessions()
    call system('rm ' . s:session_file_name('*'))
  endfunction
  function! s:clean_sessions_action(context)
    call s:clean_sessions()
  endfunction
  call denite#custom#action('directory', 'clean_allsession', function('s:clean_sessions_action'), {'is_quit': 0})
  "}}}

  "}}}
'''
hook_add = '''
  nnoremap <silent> <Space><Space>  :<C-u>Denite           -start-filter file/rec<CR>
  nnoremap <silent> <Space>i<Space> :<C-u>Denite           -start-filter file/rec:
  nnoremap <silent> <Space>P        :<C-u>DeniteBufferDir  -start-filter file/rec<CR>
  nnoremap <silent> <Space>gp       :<C-u>DeniteProjectDir -start-filter file/rec<CR>

  nnoremap <silent> <Space>ls :<C-u>Denite file_mru<CR>
  nnoremap <silent> <Space>ft :<C-u>Denite -start-filter filetype<CR>

  nnoremap <silent> <Space>/  :<C-u>Denite -start-filter line<CR>
  nnoremap <silent> <Space>r  :<C-u>Denite grep<CR>
  nnoremap <silent> <Space>ir :<C-u>Denite grep:

  nnoremap <silent> <Space>: :<C-u>Denite command<CR>
  nnoremap <silent> <Space>; :<C-u>Denite command_history<CR>

  nnoremap <silent> <Space>p     :<C-u>Denite neoyank<CR>
  nnoremap <silent> <Space><C-k> :<C-u>Denite neosnippet<CR>
  nnoremap <silent> <C-Space>    :<C-u>Denite -start-filter ghq -default-action=cdsession<CR>

  " memolist
  nnoremap <silent> <Space>ml :<C-u>Denite -auto-action=preview -sorters=sorter_word,sorter_reverse file/rec:`expand(g:memolist_path)`<CR>
  " grep memolist
  nnoremap <silent> <Space>mr :<C-u>Denite -auto-action=preview grep:`expand(g:memolist_path)`<CR>

  nnoremap <silent> ]d       :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  nnoremap <silent> [d       :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
  nnoremap <silent> <space>. :<C-u>Denite -resume -cursor-pos=+0<CR>
  " Open dotfiles
  nnoremap <silent> <space>d :<C-u>Denite file/rec:$HOME/.dotfiles<CR>
'''
[plugins.ftplugin]
denite = '''
  " select
  nnoremap <silent><buffer><nowait><expr> x
              \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><nowait><expr> X
              \ denite#do_map('toggle_select_all')

  " action
  nnoremap <silent><buffer><nowait><expr> <CR>
              \ denite#do_map('do_action')
  nnoremap <silent><buffer><nowait><expr> .
              \ denite#do_map('do_previous_action')
  nnoremap <silent><buffer><nowait><expr> d
              \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><nowait><expr> P
              \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><nowait><expr> e
              \ denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><nowait><expr> v
              \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><nowait><expr> s
              \ denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><nowait><expr> cd
              \ denite#do_map('do_action', 'cd')
  nnoremap <silent><buffer><nowait><expr> <Tab>
              \ denite#do_map('choose_action')
  nnoremap <silent><buffer><nowait><expr> <ESC>
              \ denite#do_map('quit')

  " operation
  nnoremap <silent><buffer><nowait><expr> H
              \ denite#do_map('move_up_path')
  nnoremap <silent><buffer><nowait><expr> a
              \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><nowait><expr> i
              \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><nowait><expr> I
              \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><nowait><expr> o
              \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><nowait><expr> <C-l>
              \ denite#do_map('redraw')
  nnoremap <silent><buffer><nowait><expr> [d
              \ denite#do_map('restore_sources')
'''
denite-filter = '''
  imap     <silent><buffer><nowait> <ESC>  <Plug>(denite_filter_quit)
  inoremap <silent><buffer><nowait> g<ESC> <ESC>
'''

#{{{ matchers
[[plugins]]
repo = 'liuchengxu/vim-clap'
rev = 'v0.31'
hook_done_update = '''
  execute ':Clap install-binary'
'''
lazy = 1
#}}}

#{{{ sources
[[plugins]]
repo = 'Shougo/neomru.vim'
lazy = 1
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
[[plugins]]
repo = 'Jagua/vim-denite-ghq'
lazy = 1
#}}}
#}}}

#{{{ Filer
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_post_source = '''
  call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
  call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })

  let s:defx_win_width_percent = 0.7
  let s:defx_win_height_percent = 0.7
  let s:defx_win_height_offset = 0.1
  call defx#custom#option('_', {
        \ 'show_ignored_files': 1,
        \ 'toggle': 1,
        \ 'columns': 'mark:indent:icon:space:filename:type',
        \ 'floating_preview': 1,
        \ 'vertical_preview': 1,
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:defx_win_width_percent),
        \ 'wincol': float2nr((&columns * (1 - s:defx_win_width_percent)) / 2),
        \ 'winheight': float2nr(&lines * s:defx_win_height_percent),
        \ 'winrow': float2nr((&lines * (1 - s:defx_win_height_percent + 2 * s:defx_win_height_offset)) / 2),
        \ })
'''
hook_add = '''
  nnoremap <silent> <space>e :<C-u>Defx -listed -resume -buffer-name=`trim(substitute(getcwd(), '/', '-', 'g'), '-')`<CR>
  nnoremap <silent> <space>E :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
[plugins.ftplugin]
defx = '''
  setlocal nonumber

  " select
  nnoremap <silent><buffer><nowait><expr> x
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><nowait><expr> X
        \ defx#do_action('toggle_select_all')
  xnoremap <silent><buffer><nowait><expr> x
        \ defx#do_action('toggle_select_visual')
  xnoremap <silent><buffer><nowait><expr> <CR>
        \ defx#do_action('toggle_select_visual')
  xnoremap <silent><buffer><nowait><expr> <ESC>
        \ defx#do_action('clear_select_all')

  " tree
  nnoremap <silent><buffer><nowait><expr> o
        \ defx#is_directory() ?
        \ defx#do_action('open_or_close_tree') :
        \ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><nowait><expr> O
        \ defx#is_directory() ?
        \   defx#is_opened_tree() ?
        \ defx#do_action('close_tree') :
        \ defx#do_action('open_tree_recursive') :
        \ defx#do_action('close_tree')
  nnoremap <silent><buffer><nowait><expr> l
        \ defx#is_directory() ?
        \ defx#do_action('open') :
        \ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><nowait><expr> h
        \ defx#do_action('cd', ['..'])

  " new resource
  nnoremap <silent><buffer><nowait><expr> A
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><nowait><expr> a
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><nowait><expr> ga
        \ defx#do_action('new_multiple_files')

  " file action
  nnoremap <silent><buffer><nowait><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><nowait><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><nowait><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><nowait><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><nowait><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><nowait><expr> ;
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><nowait><expr> !
        \ defx#do_action('execute_system')

  nnoremap <silent><buffer><nowait><expr> <CR>
        \ defx#is_directory() ?
        \ defx#do_action('open') :
        \ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><nowait><expr> .
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><nowait><expr> s
        \ defx#do_action('multi', [['drop', 'split'], 'quit'])
  nnoremap <silent><buffer><nowait><expr> v
        \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
  nnoremap <silent><buffer><nowait><expr> P
        \ defx#do_action('open', 'pedit')

  " others
  nnoremap <silent><buffer><nowait><expr> gcd
        \ defx#async_action('change_vim_cwd')
  nnoremap <silent><buffer><nowait><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><nowait><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><nowait><expr> D
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:space:filename:type:size:time')
  nnoremap <silent><buffer><nowait><expr> y
        \ defx#do_action('yank_path')

  nnoremap <silent><buffer><nowait><expr> T
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><nowait><expr> I
        \ defx#do_action('toggle_ignored_files')

  " base
  nnoremap <silent><buffer><nowait><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><nowait><expr> k
        \ line('.') == 1 ? 'G' : 'k'
'''
#}}}

#{{{ Tag bar
[[plugins]]
repo = 'liuchengxu/vista.vim'
on_func = [
  'vista#',
  'NearestMethodOrFunction',
]
on_cmd = 'Vista'
hook_add = '''
  nnoremap <silent> <space>t :<C-u>Vista!!<CR>

  let g:vista_default_executive = 'ctags'
  let g:vista_executive_for = {
    \ 'markdown': 'toc',
    \ 'go': 'nvim_lsp',
    \ 'python': 'nvim_lsp',
    \ 'typescript': 'nvim_lsp',
    \ 'html': 'nvim_lsp',
    \ 'css': 'nvim_lsp',
    \ 'json': 'nvim_lsp',
    \ 'yaml': 'nvim_lsp',
    \ 'terraform': 'nvim_lsp',
    \ 'Dockerfile': 'nvim_lsp',
    \ }

  let g:vista_no_mappings = 1
  let g:vista#renderer#enable_icon = 0
'''
hook_source = '''
  " for `lightline.vim`
  function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
  endfunction
'''
[plugins.ftplugin]
vista_kind = '''
  nnoremap <silent><buffer><nowait><expr> <CR> vista#cursor#FoldOrJump()
  nnoremap <silent><buffer><nowait><expr> S vista#Sort()
  nnoremap <silent><buffer><nowait><expr> P vista#cursor#TogglePreview()
'''
#}}}

#{{{ VCS
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
	call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
      \ 'setlocal winfixheight',
      \)

  function! s:mapping(schema, mode, lhs, rhs)
    if a:rhs =~ '^<Plug>'
      call gina#custom#mapping#nmap(a:schema, a:lhs, a:rhs, {
        \ 'mode': a:mode,
        \ 'nowait': 1,
        \ })
      return
    endif
    call gina#custom#mapping#nmap(a:schema, a:lhs, a:rhs, {
      \ 'mode': a:mode,
      \ 'nowait': 1,
      \ 'noremap': 1,
      \ 'silent': 1,
      \ })
  endfunction

  "{{{ status settings
  call gina#custom#command#option('status', '-u|--untracked-files')
  call gina#custom#command#option('status', '-s|--short')
  call gina#custom#command#option('status', '-b|--branch')
  call s:mapping('status', 'n', '<Tab>', '<Plug>(gina-builtin-choice)')
  call s:mapping('status', 'n', 'x', '<Plug>(gina-builtin-mark)j')
  call s:mapping('status', 'n', 'yy', '<Plug>(gina-yank-path)')
  call s:mapping('status', 'n', 'Y', '<Plug>(gina-yank-rev)')

  call s:mapping('status', 'n', 'C', ':<C-u>Gina commit<CR>')
  call s:mapping('status', 'n', '<', '<Plug>(gina-index-stage)')
  call s:mapping('status', 'n', '>', '<Plug>(gina-index-unstage)')

  call s:mapping('status', 'n', 'gP', ':<C-u>Gina push<CR>')

  call s:mapping('status', 'n', '<CR>', '<Plug>(gina-edit)')
  call s:mapping('status', 'n', 's', '<Plug>(gina-edit-split)')
  call s:mapping('status', 'n', 'v', '<Plug>(gina-edit-vsplit)')
  call s:mapping('status', 'n', 'P', '<Plug>(gina-show-preview)')
  call s:mapping('status', 'n', 'g<CR>', '<Plug>(gina-show)')
  call s:mapping('status', 'n', 'gs', '<Plug>(gina-show-split)')
  call s:mapping('status', 'n', 'gv', '<Plug>(gina-show-vsplit)')

  call s:mapping('status', 'n', 'di', '<Plug>(gina-diff)')
  call s:mapping('status', 'n', 'gp', '<Plug>(gina-patch)')
  call s:mapping('status', 'n', 'gc', '<Plug>(gina-chaperon)')

  call s:mapping('status', 'n', 'gx', '<Plug>(gina-browse)')

  call s:mapping('status', 'n', 'stu', ':<C-u>Gina stash --include-untracked --keep-index<CR>')
  call s:mapping('status', 'n', 'sT', ':<C-u>Gina stash --include-untracked<CR>')
  call s:mapping('status', 'n', 'stp', ':<C-u>Gina stash pop<CR>')
  "}}}

  "{{{ commit settings
  call gina#custom#command#option('commit', '-u|--untracked-files')
  call gina#custom#command#option('commit', '-v|--verbose')
  call gina#custom#command#option('commit', '-S|--gpg-sign')
  call s:mapping('commit', 'n', 's!', '<Plug>(gina-commit-ammend)')
  "}}}

  "{{{ branch settings
  call s:mapping('branch', 'n', '<Tab>', '<Plug>(gina-builtin-choice)')
  call s:mapping('branch', 'n', 'x', '<Plug>(gina-builtin-mark)j')

  call s:mapping('branch', 'n', 'A', '<Plug>(gina-branch-new)')
  call s:mapping('branch', 'n', 'R', '<Plug>(gina-branch-move)')
  call s:mapping('branch', 'n', 'D', '<Plug>(gina-branch-delete-force)')

  call s:mapping('branch', 'n', 'g<CR>', '<Plug>(gina-commit-checkout-track)')
  call s:mapping('branch', 'n', 'M', '<Plug>(gina-commit-merge)')

  call s:mapping('branch', 'n', 'gP', ':<C-u>Gina push<CR>')
  "}}}

  "{{{ blame settings
  let g:gina#command#blame#formatter#format = '%su%=%au on %ti %ma%in'
  call s:mapping('blame', 'n', 'P', '<Plug>(gina-show-preview)')
  "}}}

'''
hook_add = '''
  " let g:gina#command#commit#use_default_mappings = 0
  " let g:gina#command#diff#use_default_mappings = 0
  " let g:gina#command#status#use_default_mappings = 0
  nnoremap <space>vs :<C-u>Gina status<CR>
  nnoremap <space>vb :<C-u>Gina branch --all<CR>

  "{{{ unuse default mappings
  " let g:gina#command#blame#use_default_mappings = 0
  " let g:gina#command#branch#use_default_mappings = 0
  " let g:gina#command#changes#use_default_mappings = 0
  " let g:gina#command#chaperon#use_default_mappings = 0
  let g:gina#command#commit#use_default_mappings = 0
  " let g:gina#command#diff#use_default_mappings = 0
  " let g:gina#command#grep#use_default_mappings = 0
  " let g:gina#command#log#use_default_mappings = 0
  " let g:gina#command#ls#use_default_mappings = 0
  " let g:gina#command#patch#use_default_mappings = 0
  " let g:gina#command#qrep#use_default_mappings = 0
  " let g:gina#command#reflog#use_default_mappings = 0
  " let g:gina#command#show#use_default_mappings = 0
  " let g:gina#command#stash#show#use_default_mappings = 0
  " let g:gina#command#stash#use_default_mappings = 0
  let g:gina#command#status#use_default_mappings = 0
  " let g:gina#command#tag#use_default_mappings = 0
  "}}}
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  let g:agit_no_default_mappings = 1
  nnoremap <silent> <space>vl :<C-u>Agit<CR>
  nnoremap <silent> <space>vL :<C-u>AgitFile<CR>
'''
[plugins.ftplugin]
agit = '''
  nmap <buffer><nowait> <C-n> <Plug>(agit-scrolldown-stat)
  nmap <buffer><nowait> <C-p> <Plug>(agit-scrollup-stat)
  nmap <buffer><nowait> <C-j> <Plug>(agit-scrolldown-diff)
  nmap <buffer><nowait> <C-k> <Plug>(agit-scrollup-diff)
  nmap <buffer><nowait> <C-l> <Plug>(agit-reload)
  nmap <buffer><nowait> yh    <Plug>(agit-yank-hash)
  nmap <buffer><nowait> <C-g> <Plug>(agit-print-commitmsg)
  nmap <buffer><nowait> <ESC> <Plug>(agit-exit)
  nmap <buffer><nowait> co    <Plug>(agit-git-checkout)
  nmap <buffer><nowait> bo    <Plug>(agit-git-checkout-b)
  nmap <buffer><nowait> bd    <Plug>(agit-git-branch-b)
  nmap <buffer><nowait> rs    <Plug>(agit-git-reset-soft)
  nmap <buffer><nowait> rr    <Plug>(agit-git-reset)
  nmap <buffer><nowait> rh    <Plug>(agit-git-reset-hard)
  nmap <buffer><nowait> rbb   <Plug>(agit-git-rebase)
  nmap <buffer><nowait> rbi   <Plug>(agit-git-rebase-i)
  nmap <buffer><nowait> cp    <Plug>(agit-git-cherry-pick)
  nmap <buffer><nowait> rv    <Plug>(agit-git-revert)
  nmap <buffer><nowait> di    <Plug>(agit-git-diff)
  nmap <buffer><nowait> dI    <Plug>(agit-git-diff-with-local)
'''
#}}}

#{{{ History
[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
  nnoremap <space>u :<C-u>MundoToggle<CR>
'''
#}}}

#{{{ Formatting
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
#}}}

#{{{ LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_source = '''
  lua << EOF
      function bind_key_map()
        -- vim.cmd "nnoremap <buffer><silent> <Leader>; :<C-u>Denite -start-filter contextMenu<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>a   :<C-u>lua vim.lsp.buf.code_action()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>:   :<C-u>lua vim.lsp.codelens.run()<CR>"
        vim.cmd "nnoremap <buffer><silent> K           :<C-u>lua vim.lsp.buf.hover()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>h   :<C-u>lua vim.lsp.buf.signature_help()<CR>"
        vim.cmd "nnoremap <buffer><silent> <C-]>       :<C-u>lua vim.lsp.buf.definition()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>i   :<C-u>lua vim.lsp.buf.implementation()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>c   :<C-u>lua vim.lsp.buf.incoming_calls()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>R   :<C-u>lua vim.lsp.buf.rename()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>ds  :<C-u>lua vim.lsp.buf.document_symbol()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>dr  :<C-u>lua vim.lsp.buf.references()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>a   :<C-u>lua vim.lsp.buf.code_action()<CR>"
        vim.cmd "vnoremap <buffer><silent> <Leader>a   :<C-u>lua vim.lsp.buf.range_code_action()<CR>"
        vim.cmd "nnoremap <buffer><silent> gq          :<C-u>lua vim.lsp.buf.formatting()<CR>"
        vim.cmd "vnoremap <buffer><silent> gq          :<C-u>lua vim.lsp.buf.range_formatting()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>h   :<C-u>lua vim.lsp.buf.document_highlight()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>H   :<C-u>lua vim.lsp.buf.clear_references()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>ws  :<C-u>lua vim.lsp.buf.workspace_symbol()<CR>"
      end

      function on_attach()
        bind_key_map()
        vim.cmd "hi! link DiagnosticError   ALEVirtualTextError"
        vim.cmd "hi! link DiagnosticWarn    ALEVirtualTextWarning"
        vim.cmd "hi! link DiagnosticInfo    Identifier"
        vim.cmd "hi! link DiagnosticHint    ALEVirtualTextWarning"
        vim.cmd "hi! link LspReferenceText  Normal"
        vim.cmd "hi! link LspReferenceRead  Identifier"
        vim.cmd "hi! link LspReferenceWrite MoreMsg"

        require'lsp_signature'.on_attach() -- for `ray-x/lsp_signature.nvim`
      end

      local lspconfig = require'lspconfig'

      lspconfig.vimls.setup{
        on_attach = on_attach;
      };

      lspconfig.gopls.setup{
        on_attach = on_attach;
        settings = {
          gopls = {
            analyses = {
              nilness = true;
              unusedparams = true;
              unusedwrite = true;
            };
            experimentalWorkspaceModule = true;
            usePlaceholders = true;
            codelenses = {
              gc_details = true;
              generate = true;
              regenerate_cgo = true;
              test = true;
              tidy = true;
              upgrade_dependency = true;
              vendor = true;
            };
            ["local"] = os.getenv("GO_IMPORTS_LOCAL");
          };
        };
      };
      lspconfig.pylsp.setup{
        on_attach = on_attach;
        settings = {
          pylsp = {
            configurationSources = {'flake8'};
            plugins = {
              flake8 = {enabled = true;};
              mypy = {
                enabled = true;
                dmypy = true;
              };
              pydocstyle = {enabled = true;};

              mccabe = {enabled = false;};
              pycodestyle = {enabled = false;};
              pyflakes = {enabled = false;};

              black = {enabled = true;};

              autopep8 = {enabled = false;};
              yapf = {enabled = false;};
            };
          };
        };
      };
      lspconfig.tsserver.setup{
        on_attach = on_attach;
      };

      lspconfig.html.setup{
        on_attach = on_attach;
      };
      lspconfig.cssls.setup{
        on_attach = on_attach;
      };

      lspconfig.jsonls.setup{
        on_attach = on_attach;
      };
      lspconfig.yamlls.setup{
        on_attach = on_attach;
      };

      lspconfig.terraformls.setup{
        on_attach = on_attach;
      };

      lspconfig.dockerls.setup{
        on_attach = on_attach;
      };

      lspconfig.efm.setup{
        filetypes = {
          'Dockerfile',
          'css',
          'csv',
          'html',
          'json',
          'make',
          'proto',
          'sh',
        };
        on_attach = on_attach;
      };
EOF

  function! s:ReloadLSP() abort
    lua vim.lsp.stop_client(vim.lsp.get_active_clients())
    edit
  endfunction
  command! ReloadLSP call s:ReloadLSP()
  nnoremap <Leader>L :<C-u>ReloadLSP<CR>
'''

#{{{ improvements
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
hook_source = '''
  lua << EOF
    require'lsp_signature'.setup{
      bind = true;
      handler_opts = {
        border = "rounded";
      };
      hi_parameter = "Underlined";
    };
EOF
'''
#}}}

#}}}

#{{{ Complement
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = [
  'denops.vim',
  'pum.vim',
]
hook_add = '''
  " Use pum.vim

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()

  inoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''
hook_source = '''
  nnoremap : <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    call dein#source('ddc.vim')

    cnoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ ddc#manual_complete()
    cnoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['necovim', 'cmdline-history', 'around'])

    autocmd CmdlineLeave * ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
    cunmap <Tab>
  endfunction
'''
hook_post_source = '''
  call ddc#custom#patch_global({
    \   'smartCase': v:true,
    \ })
  call ddc#custom#patch_global('sources', [
    \   'neosnippet',
    \   'nvim-lsp',
    \   'around',
    \   'file',
    \ ])
  call ddc#custom#patch_global('sourceOptions', {
    \   '_': {
    \     'matchers': ['matcher_head', 'matcher_length'],
    \     'sorters': ['sorter_rank'],
    \   },
    \   'around': {
    \     'mark': 'A',
    \   },
    \   'file': {
    \     'mark': 'F',
    \     'isVolatile': v:true,
    \     'forceCompletionPattern': '\S/\S*',
    \   },
    \   'nvim-lsp': {
    \     'mark': 'lsp',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'necovim': {
    \     'mark': 'vim',
    \   },
    \   'cmdline-history': {
    \     'mark': 'history',
    \   },
    \   'neosnippet': {
    \     'mark': 'neosnippet',
    \   },
    \ })

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
    \   'InsertEnter', 'TextChangedI', 'TextChangedP',
    \   'CmdlineEnter', 'CmdlineChanged',
    \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')

  call ddc#enable()
'''

#{{{ sources
[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
#}}}

#{{{ filters
[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
#}}}

#{{{ improvements
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_add = '''
  let g:popup_preview_config = {
  \   'border': v:false,
  \ }
'''
hook_post_source = '''
  call popup_preview#enable()
'''

# TODO: support LSP `textEdit` event on complete done

#{{{ ecosystems
[[plugins]]
repo = 'Shougo/pum.vim'
#}}}

#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-j> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }

    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#enable_complete_done = 1
'''
#}}}

#{{{ Async Execution
[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = '''
  let g:dispatch_no_maps = 1
  let g:dispatch_compilers = {}
  let g:dispatch_quickfix_height = 30
  nnoremap <Leader>r :<C-u>Dispatch<CR>
  nnoremap g<Leader>r :<C-u>Dispatch<CR>
  nnoremap <Leader>du :<C-u>Dispatch docker compose up --build -d<CR>
  nnoremap <Leader>dd :<C-u>Dispatch docker compose down<CR>
'''
[plugins.ftplugin]
sh = '''
  nnoremap <buffer><silent> <Leader>r :<C-u>Dispatch sh %<CR>
'''
go = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch -dir=%:h go run .<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch -dir=%:h go generate .<CR>

  let g:dispatch_compilers['go test'] = 'go'
  nnoremap <buffer> <Leader>t :<C-u>Dispatch -dir=%:h go test .<CR>
  nnoremap <buffer> <Leader>gt :<C-u>Dispatch -dir=%:h go test ./...<CR>
  nnoremap <buffer> <Leader>pt :<C-u>Dispatch go test ./...<CR>

  let g:dispatch_compilers['golangci-lint run'] = 'go'
  nnoremap <buffer> <Leader>l :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 .<CR>
  nnoremap <buffer> <Leader>gl :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
  nnoremap <buffer> <Leader>pl :<C-u>Dispatch golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
'''
python = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch python -m "$(echo '%' \| tr / . \| sed -e 's/\.__main__\.py//' \| sed -e 's/\.py//')"<CR>
'''
terraform = '''
  nnoremap <buffer><silent> <Leader>r :<C-u>Dispatch terraform apply<CR>
'''
marp = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch marp --watch --preview %<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch marp --pdf --allow-local-files --output %:s?.marp.md?.pdf? %<CR>
'''

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
hook_add = '''
  let g:dispatch_handlers = ['neovim']
'''
#}}}

#{{{ Testing
[[plugins]]
repo = 'vim-test/vim-test'
on_ft =  [
  'go',
]
depends = [
  'vim-dispatch',
]
hook_add = '''
  let g:test#strategy = 'dispatch'
'''
[plugins.ftplugin]
go = '''
  let g:test#go#gotest#file_pattern = '\v.*\.go$'
  nnoremap <buffer><silent> <Leader>T     :<C-u>TestNearest<CR>
  nnoremap <buffer><silent> <Leader><C-t> :<C-u>TestLast<CR>

  function! s:debugNearest()
    let g:test#go#runner = 'delve'
    TestNearest
    unlet g:test#go#runner
  endfunction
  command! -buffer DebugNearest call s:debugNearest()
'''
python = '''
  nnoremap <buffer><silent> <Leader>t :<C-u>TestFile -s -l -vv<CR>
  nnoremap <buffer><silent> <Leader>T :<C-u>TestNearest -s -l -vv<CR>
'''
#}}}

#{{{ Utils
[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'direnv/direnv.vim'

#{{{ increment Date
[[plugins]] 
repo = 'tpope/vim-speeddating'
hook_add = '''
    let g:speeddating_no_mappings = 1
    nmap  <C-A>     <Plug>SpeedDatingUp
    nmap  <C-X>     <Plug>SpeedDatingDown
    xmap  <C-A>     <Plug>SpeedDatingUp
    xmap  <C-X>     <Plug>SpeedDatingDown
'''
#}}}

#{{{ Editing Text Utils
[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'

[[plugins]] # edit surround easy
repo = 'machakann/vim-sandwich'
hook_add = '''
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1

    " add
    silent! nmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
    silent! xmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
    silent! omap <unique> <Leader>wa <Plug>(operator-sandwich-g@)

    " delete
    silent! nmap <unique><silent> <Leader>wd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> <Leader>wdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
    silent! xmap <unique> <Leader>wd <Plug>(operator-sandwich-delete)

    " replace
    silent! nmap <unique><silent> <Leader>wr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> <Leader>wrb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
    silent! xmap <unique> <Leader>wr <Plug>(operator-sandwich-replace)
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'
hook_add = '''
    nmap <silent> <leader>x <Plug>(ArgWrapToggle)
'''
[plugins.ftplugin]
go = '''
    let b:argwrap_tail_comma = 1
'''

[[plugins]] # comment
repo = 'tyru/caw.vim'
[plugins.ftplugin]
pu_uml_plantuml = '''
    let b:caw_oneline_comment = "'"
    let b:caw_wrap_oneline_comment = ["/'", "'/"]
    let b:caw_wrap_multiline_comment = {'right': "'/", 'left': "/'"}
'''

[[plugins]] # for caw.vim
repo = 'kana/vim-repeat'
#}}}

#{{{ Memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    let g:memolist_memo_suffix = "txt"
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    nnoremap <Leader>mn :<C-u>MemoNew<CR>
'''
#}}}

#{{{ Diff tools
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
    nmap <silent> [<C-d> :<C-u>DirDiffPrev<CR>
    nmap <silent> ]<C-d> :<C-u>DirDiffNext<CR>
'''
#}}}

#}}}

#{{{ Highlights
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_source = '''
  lua << EOF
    require'nvim-treesitter.configs'.setup{
      ensure_installed = 'maintained';
      highlight = {
        enable = true;
      };
      indent = {
        enable = false;
      };
    };
EOF
'''
#}}}

#{{{ Filetype

[ftplugin] #{{{
snippets = '''
    setlocal noexpandtab
'''
vim = '''
    setlocal tabstop=2
    setlocal shiftwidth=2
'''
make = '''
    setlocal noexpandtab
    setlocal tabstop=8
    setlocal shiftwidth=8
'''
python = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
    nnoremap <buffer> gQ :<C-u>%!tidy-imports --black --quiet<CR>
'''
kotlin = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
markdown = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal spellcapcheck='[.?!]\_[\])'" \t]\+'
'''
css = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
go = '''
    setlocal noexpandtab
    setlocal tabstop=2
    setlocal shiftwidth=2
    augroup GoAutocmd
      autocmd!
      autocmd BufWritePre *.go lua vim.lsp.buf.formatting_sync(nil, 1000)
    augroup END

    " https://github.com/golang/tools/blob/master/gopls/doc/vim.md#neovim-imports
    lua << EOF
      function goimports(timeout_ms)
        local context = { only = { "source.organizeImports" } }
        vim.validate { context = { context, "t", true } }

        local params = vim.lsp.util.make_range_params()
        params.context = context

        -- See the implementation of the textDocument/codeAction callback
        -- (lua/vim/lsp/handler.lua) for how to do this properly.
        local result = vim.lsp.buf_request_sync(0, "textDocument/codeAction", params, timeout_ms)
        if not result or next(result) == nil then return end
        local actions = result[1].result
        if not actions then return end
        local action = actions[1]

        -- textDocument/codeAction can return either Command[] or CodeAction[]. If it
        -- is a CodeAction, it can have either an edit, a command or both. Edits
        -- should be executed first.
        if action.edit or type(action.command) == "table" then
          if action.edit then
            vim.lsp.util.apply_workspace_edit(action.edit)
          end
          if type(action.command) == "table" then
            vim.lsp.buf.execute_command(action.command)
          end
        else
          vim.lsp.buf.execute_command(action)
        end
      end
EOF
    nnoremap <buffer> gQ :<C-u>lua goimports(30000)<CR>
'''
#}}}

#{{{ CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']
#}}}

#{{{ HTML, Javascript And Typescript
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'javascript', 'typescript', 'javascriptreact', 'typescriptreact']
hook_source = '''
  let g:user_emmet_leader_key = '<C-e>'
  let g:user_emmet_expandabbr_key = '<C-e><C-e>'
  let g:user_emmet_expandword_key = '<C-e>w'
  let g:user_emmet_update_tag = '<C-e>u'
  let g:user_emmet_balancetaginward_key = '<C-e>d'
  let g:user_emmet_balancetagoutward_key = '<C-e>D'
  let g:user_emmet_next_key = '<C-e>n'
  let g:user_emmet_prev_key = '<C-e>p'
  let g:user_emmet_imagesize_key = '<C-e>I'
  let g:user_emmet_togglecomment_key = '<C-e>/'
  let g:user_emmet_splitjointag_key = '<C-e>j'
  let g:user_emmet_removetag_key = '<C-e>\d'
  let g:user_emmet_anchorizeurl_key = '<C-e>x'
  let g:user_emmet_anchorizesummary_key = '<C-e>X'
  let g:user_emmet_mergelines_key = '<C-e>\m'
  let g:user_emmet_codepretty_key = '<C-e>\s'

  let g:user_emmet_settings = {
        \   'variables': {
        \     'lang': 'ja'
        \   },
        \   'indentation': '  ',
        \   'includeLanguages': {
        \     'typescript': 'typescriptreact'
        \   },
        \   'html': {
        \     'empty_element_suffix': '/>'
        \   },
        \   'javascript': {
        \     'extends': 'jsx'
        \   }
        \ }
'''
#}}}

#{{{ Go
[[plugins]]
repo = 'rhysd/vim-goyacc'
on_ft = 'goyacc'
#}}}

#{{{ Python
[[plugins]]
repo = 'heavenshell/vim-pydocstring'
on_ft = 'python'
build = 'make install'
hook_add = '''
  let g:pydocstring_enable_mapping = 0
  let g:pydocstring_formatter = 'google'
'''
# [[plugins]]
# repo = 'goerz/jupytext.vim'
#}}}

#{{{ Flutter
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
depends = [
  'nvim-lspconfig',
  'plenary.nvim',
]
hook_source = '''
  lua << EOF
      require'flutter-tools'.setup{
        lsp = {
          on_attach = on_attach;
        }
      }
EOF
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
#}}}

#{{{ Markdown
# Preview
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'plantuml']
build = 'cd app && yarn install'
hook_source = '''
    let g:mkdp_command_for_global = 1
    let g:mkdp_auto_close = 0
    let g:mkdp_markdown_css = g:vim_dir . '/markdown_preview-markdown.css'
'''
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'json']
hook_add = '''
  let g:terraform_fmt_on_save = 1
'''
#}}}

#{{{ Binary
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
#}}}

#}}}

#{{{ Status bar
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
              \ 'colorscheme': 'iceberg',
              \ 'mode_map': { 'c': 'NORMAL' },
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename', 'nearest_method' ] ],
              \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
              \ },
              \ 'inactive': {
              \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename', 'nearest_method' ] ],
              \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
              \ },
              \ 'component_function': {
              \   'readonly': 'LightlineReadonly',
              \   'gitbranch': 'LightLineGitBranch',
              \   'filename': 'LightLineFilename',
              \   'fileformat': 'LightLineFileformat',
              \   'filetype': 'LightLineFiletype',
              \   'fileencoding': 'LightLineFileencoding',
              \   'mode': 'LightLineMode',
              \   'nearest_method': 'NearestMethodOrFunction',
              \ },
              \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
              \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
              \ }

  function! LightLineModified()
      return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
      return &ft !~? 'help' && &readonly ? "\uE0A2" : ''
  endfunction

  function! LightLineFilename()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? g:lightline.fname :
                  \ fname =~ '__Mundo\|NERD_tree' ? '' :
                  \ &ft == 'denite' ? denite#get_status() :
                  \ &ft == 'denite-filter' ? denite#get_status() :
                  \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                  \ ('' != fname ? fname : '[No Name]') .
                  \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineGitBranch()
      try
          if expand('%:t') !~? 'Tagbar\|Mundo' && &ft !~? 'denite\|defx'
              let mark = ''  " edit here for cool mark
              let _ = gina#component#repo#branch()
              return strlen(_) ? mark._ : ''
          endif
      catch
      endtry
      return ''
  endfunction

  function! LightLineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
      return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? 'Tagbar' :
                  \ fname == '__Mundo__' ? 'Mundo' :
                  \ fname == '__Mundo_Preview__' ? 'Mundo Preview' :
                  \ &ft == 'defx' ? 'Defx' :
                  \ &ft == 'denite' ? 'Denite' :
                  \ &ft == 'denite-filter' ? 'Denite Filter' :
                  \ &ft == 'vimshell' ? 'VimShell' :
                  \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
      let g:lightline.fname = a:fname
      return lightline#statusline(0)
  endfunction

  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0
'''
#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    set termguicolors
'''
hook_post_source = '''
    colorscheme iceberg
'''
#}}}
