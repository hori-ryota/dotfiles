#{{{ General

[[plugins]]
repo = 'Shougo/dein.vim'

#{{{ config
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
#}}}

#{{{ LSP
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = './install.sh'
hook_add = '''
    let g:LanguageClient_diagnosticsEnable = 0
    let g:LanguageClient_diagnosticsList = 'Location'

    let g:LanguageClient_serverCommands = {
        \ 'go': [
            " https://github.com/golang/go/wiki/gopls
            " go get -u golang.org/x/tools/cmd/gopls
            \ 'gopls'
        \ ],
        \ 'java': [
            " https://github.com/Ruin0x11/intellij-lsp-server
            \ 'tcp://localhost:7777'
        \ ],
        \ 'kotlin': [
            " https://github.com/fwcd/KotlinLanguageServer
            " ghq get fwcd/KotlinLanguageServer && cd $(ghq root)/github.com/fwcd/KotlinLanguageServer && ./gradlew server:build
            \ '~/dev/src/github.com/fwcd/KotlinLanguageServer/server/build/install/server/bin/server'
        \ ],
        \ 'javascript': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'javascript.jsx': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'typescript': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'ruby': [
            " https://github.com/castwide/solargraph
            " gem install solargraph
            \ 'solargraph', 'stdio'
        \ ],
        \ 'c': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'c++': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'objc': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'objc++': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'swift': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ]
        \ }

    function! LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
        nnoremap <buffer><silent> <Leader>; :<C-u>Denite -start-filter contextMenu<CR>
        nnoremap <buffer><silent> K         :<C-u>call LanguageClient_textDocument_hover()<CR>
        nnoremap <buffer><silent> <C-]>     :<C-u>call LanguageClient_textDocument_definition()<CR>
        nnoremap <buffer><silent> <Leader>i :<C-u>call LanguageClient_textDocument_implementation()<CR>
        nnoremap <buffer><silent> <Leader>R :<C-u>call LanguageClient_textDocument_rename()<CR>
        nnoremap <buffer><silent> <Leader>s :<C-u>Denite -start-filter documentSymbol<CR>
        nnoremap <buffer><silent> <Leader>dr:<C-u>Denite -start-filter references<CR>
        nnoremap <buffer><silent> <Leader>a :<C-u>call LanguageClient_textDocument_codeAction()<CR>
        " nnoremap <buffer><silent> gq        :<C-u>call LanguageClient_textDocument_formatting()<CR>
        " vnoremap <buffer><silent> gq        :<C-u>call LanguageClient_textDocument_rangeFormatting()<CR>
        nnoremap <buffer><silent> <Leader>h :<C-u>call LanguageClient_textDocument_documentHighlight()<CR>
        nnoremap <buffer><silent> <Leader>H :<C-u>call LanguageClient_clearDocumentHighlight()<CR>
        nnoremap <buffer><silent> <Leader>S :<C-u>Denite -start-filter workspaceSymbol<CR>
      endif
    endfunction

    autocmd FileType * call LC_maps()
'''
#}}}

#{{{ denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'cpsm'
on_cmd = 'Denite'
hook_add = '''
    nnoremap <silent> <Space><Space>  :<C-u>Denite           -start-filter file/rec<CR>
    nnoremap <silent> <Space>i<Space> :<C-u>Denite           -start-filter file/rec:
    nnoremap <silent> <Space>P        :<C-u>DeniteBufferDir  -start-filter file/rec<CR>
    nnoremap <silent> <Space>gp       :<C-u>DeniteProjectDir -start-filter file/rec<CR>

    nnoremap <silent> <Space>ls :<C-u>Denite file_mru<CR>

    nnoremap <silent> <Space>ft :<C-u>Denite -start-filter filetype<CR>

    nnoremap <silent> <Space>o  :<C-u>Denite jump<CR>
    nnoremap <silent> <Space>g; :<C-u>Denite change<CR>
    nnoremap <silent> <Space>`  :<C-u>Denite mark<CR>

    nnoremap <silent> <Space>/  :<C-u>Denite -start-filter line<CR>
    nnoremap <silent> <Space>r  :<C-u>Denite grep<CR>
    nnoremap <silent> <Space>ir :<C-u>Denite grep:

    nnoremap <silent> <Space>: :<C-u>Denite command<CR>
    nnoremap <silent> <Space>; :<C-u>Denite command_history<CR>

    nnoremap <silent> <Space>y   :<C-u>Denite neoyank<CR>
    nnoremap <silent> <Space>k   :<C-u>Denite neosnippet<CR>
    nnoremap <silent> <Space>ghq :<C-u>Denite -start-filter ghq -default-action=cd<CR>

    " memolist
    nnoremap <silent> <Space>ml :<C-u>Denite -auto-action=preview -sorters=sorter_word,sorter_reverse file/rec:`expand(g:memolist_path)`<CR>
    " grep memolist
    nnoremap <silent> <Space>mg :<C-u>Denite -auto-action=preview grep:`expand(g:memolist_path)`<CR>

    nnoremap <silent> <space>co :<C-u>Denite quickfix<CR>
    nnoremap <silent> <space>lo :<C-u>Denite location_list<CR>

    nnoremap <silent> ]d       :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
    nnoremap <silent> [d       :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
    nnoremap <silent> <space>. :<C-u>Denite -resume -cursor-pos=+0<CR>
    " Open dotfiles
    nnoremap <space>d :<C-u>Denite file/rec:$HOME/.dotfiles<CR>
'''
hook_post_source = '''
    let s:denite_win_width_percent = 0.7
    let s:denite_win_height_percent = 0.7
    call denite#custom#option('_', {
                \ 'auto_resize': 1,
                \ 'split': 'floating',
                \ 'smartcase': 1,
                \ 'prompt': '> ',
                \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
                \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
                \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
                \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
                \ 'auto_action': 'preview',
                \ })

    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
                \ ['ag', '--follow', '--vimgrep', '--hidden',
                \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences',
                \ '-g', ''])

    " Change matchers.
    call denite#custom#source(
                \ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#source(
                \ 'file/rec', 'matchers', ['matcher/cpsm'])

    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
                \ ['--vimgrep', '--follow', '--hidden',
                \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences'
                \ ])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
'''
[plugins.ftplugin]
denite = '''
    " select
    nnoremap <silent><buffer><expr> x
                \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> X
                \ denite#do_map('toggle_select_all')

    " action
    nnoremap <silent><buffer><expr> <CR>
                \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> .
                \ denite#do_map('do_previous_action')
    nnoremap <silent><buffer><expr> d
                \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> P
                \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> e
                \ denite#do_map('do_action', 'edit')
    nnoremap <silent><buffer><expr> v
                \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> s
                \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> gcd
                \ denite#do_map('do_action', 'cd')
    nnoremap <silent><buffer><expr> <Tab>
                \ denite#do_map('choose_action')

    " operation
    nnoremap <silent><buffer><expr> H
                \ denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> i
                \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <C-l>
                \ denite#do_map('redraw')
    nnoremap <silent><buffer><expr> [d
                \ denite#do_map('restore_sources')
'''
denite-filter = '''
    imap     <silent><buffer> <ESC>  <Plug>(denite_filter_quit)
    inoremap <silent><buffer> g<ESC> <ESC>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'nixprime/cpsm'
on_source = ['denite.nvim', 'deoplete.nvim']
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'chemzqm/unite-location'
on_source = 'denite.nvim'
#}}}

#{{{ Filer
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
    nnoremap <silent> <space>e :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
    nnoremap <silent> <space>E :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
hook_post_source = '''
    call defx#custom#column('mark', {
                \ 'readonly_icon': '✗',
                \ 'selected_icon': '✓',
                \ })
    call defx#custom#column('icon', {
                \ 'directory_icon': '▸',
                \ 'opened_icon': '▾',
                \ 'root_icon': ' ',
                \ })

    let s:denite_win_width_percent = 0.7
    let s:denite_win_height_percent = 0.7
    call defx#custom#option('_', {
                \ 'columns': 'mark:indent:icon:filename:type',
                \ 'toggle': 1,
                \ 'show_ignored_files': 1,
                \ 'split': 'floating',
                \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
                \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
                \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
                \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
                \ 'session_file': '`$XDG_DATA_HOME`/nvim/defx/session',
                \ })
'''
[plugins.ftplugin]
defx = '''
    nnoremap <silent><buffer> <Space>s :<C-u>Denite defx/session<CR>
    nnoremap <silent><buffer> <Space>h :<C-u>Denite defx/history<CR>

    " session
    nnoremap <silent><buffer><expr> sa
                \ defx#async_action('add_session')
    nnoremap <silent><buffer><expr> sd
                \ defx#async_action('delete_session')

    " select
    nnoremap <silent><buffer><expr> x
                \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> X
                \ defx#do_action('toggle_select_all')
    xnoremap <silent><buffer><expr> x
                \ defx#do_action('toggle_select_visual')
    xnoremap <silent><buffer><expr> <CR>
                \ defx#do_action('toggle_select_visual')

    " tree
    nnoremap <silent><buffer><expr> o
                \ defx#is_directory() ?
                \ defx#do_action('open_or_close_tree') :
                \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> O
                \ defx#is_directory() ?
                \ defx#is_opened_tree() ?
                \ defx#do_action('close_tree') :
                \ defx#do_action('open_tree_recursive') :
                \ defx#do_action('close_tree')
    nnoremap <silent><buffer><expr> l
                \ defx#is_directory() ?
                \ defx#do_action('open') :
                \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> h
                \ defx#do_action('cd', ['..'])

    " new resource
    nnoremap <silent><buffer><expr> A
                \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> a
                \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> ga
                \ defx#do_action('new_multiple_files')

    " file action
    nnoremap <silent><buffer><expr> m
                \ defx#do_action('move')
    nnoremap <silent><buffer><expr> c
                \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> p
                \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> r
                \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> d
                \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> ;
                \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> !
                \ defx#do_action('execute_system')

    nnoremap <silent><buffer><expr> <CR>
                \ defx#is_directory() ?
                \ defx#do_action('open') :
                \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> .
                \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> v
                \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
    nnoremap <silent><buffer><expr> P
                \ defx#do_action('open', 'pedit')

    " others
    nnoremap <silent><buffer><expr> gcd
                \ defx#async_action('change_vim_cwd')
    nnoremap <silent><buffer><expr> <C-g>
                \ defx#do_action('print')
    " nnoremap <silent><buffer><expr> q
    "            \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <C-l>
                \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> I
                \ defx#do_action('toggle_columns',
                \                'mark:indent:filename:type:size:time')
    nnoremap <silent><buffer><expr> y
                \ defx#do_action('yank_path')

    nnoremap <silent><buffer><expr> S
                \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> >
                \ defx#do_action('toggle_ignored_files')

    " base
    nnoremap <silent><buffer><expr> j
                \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
                \ line('.') == 1 ? 'G' : 'k'
'''
#}}}

#{{{ fmt
[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
    nnoremap gq :<C-u>Neoformat<CR>

    " let g:neoformat_proto_prototool = {
    "  \ 'exe': 'prototool',
    "  \ 'args': ['format', '--fix', '-w', '%'],
    "  \ 'replace': 1,
    "  \ 'no_append': 1,
    "  \ }
    " let g:neoformat_enabled_proto = ['prototool']

    let g:neoformat_run_all_formatters = 1
'''
build = '''
    brew install astyle
'''
#}}}

#{{{ Status bar
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
                \ 'colorscheme': 'iceberg',
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename' ] ],
                \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'component_function': {
                \   'readonly': 'LightlineReadonly',
                \   'gitbranch': 'LightLineGitBranch',
                \   'filename': 'LightLineFilename',
                \   'fileformat': 'LightLineFileformat',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'mode': 'LightLineMode',
                \ },
                \ 'component_expand': {
                \    'linter_checking': 'lightline#ale#checking',
                \    'linter_warnings': 'lightline#ale#warnings',
                \    'linter_errors': 'lightline#ale#errors',
                \    'linter_ok': 'lightline#ale#ok',
                \ },
                \ 'component_type': {
                \     'linter_checking': 'left',
                \     'linter_warnings': 'warning',
                \     'linter_errors': 'error',
                \     'linter_ok': 'left',
                \ },
                \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
                \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
                \ }

    function! LightLineModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help' && &readonly ? "\uE0A2" : ''
    endfunction

    function! LightLineFilename()
        let fname = expand('%:t')
        return fname == 'ControlP' ? g:lightline.ctrlp_item :
                    \ fname == '__Tagbar__' ? g:lightline.fname :
                    \ fname =~ '__Gundo\|NERD_tree' ? '' :
                    \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \ &ft == 'unite' ? unite#get_status_string() :
                    \ &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ ('' != fname ? fname : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineGitBranch()
        try
            if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'defx'
                let mark = ''  " edit here for cool mark
                let _ = gina#component#repo#branch()
                return strlen(_) ? mark._ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ fname == '__Gundo__' ? 'Gundo' :
                    \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                    \ fname =~ 'NERD_tree' ? 'NERDTree' :
                    \ &ft == 'unite' ? 'Unite' :
                    \ &ft == 'vimfiler' ? 'VimFiler' :
                    \ &ft == 'vimshell' ? 'VimShell' :
                    \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    let g:tagbar_status_func = 'TagbarStatusFunc'

    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
        return lightline#statusline(0)
    endfunction

    let g:unite_force_overwrite_statusline = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimshell_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
#}}}

#{{{ history
[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
    let g:mundo_prefer_python3 = 1
    nnoremap <space>u :<C-u>MundoToggle<CR>
'''
#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    set termguicolors
    augroup colorscheme_iceberg
      autocmd!
      autocmd VimEnter * nested colorscheme iceberg
      autocmd VimEnter * hi! SpecialKey ctermfg=150 guifg=#b4be82
    augroup END
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'
[[plugins]]
repo = 'cocopon/inspecthi.vim'
[[plugins]]
repo = 'cocopon/pgmnt.vim'
#}}}

#}}}

#{{{ Programming

#{{{ deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1

    call deoplete#custom#option('ignore_sources', {'_': ['around', 'buffer', 'member']}) " use tabnine

    call deoplete#custom#option('camel_case', v:true)
    call deoplete#custom#option('max_list', 1000)

    call deoplete#custom#source('_', 'max_abbr_width', 0)
    call deoplete#custom#source('_', 'max_menu_width', 0)

    call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])
    call deoplete#custom#source('_', 'sorters', [])

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#manual_complete()
    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction "}}}

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

    inoremap <expr><C-g>         deoplete#refresh()
    inoremap <expr><C-e>         deoplete#cancel_popup()
    inoremap <silent><expr><C-l> deoplete#complete_common_string()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#close_popup() . "\<CR>"
    endfunction

    call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_event = 'InsertEnter'
build = './install.sh'

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_event = 'InsertEnter'
hook_source = '''
    let g:float_preview#docked = 1
'''

# for synchronizng editing with Intellij IDEA
[[plugins]]
repo = 'beeender/Comrade'
hook_add = '''
    let g:comrade_key_fix = '<Leader>q'
'''
#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-j> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }
'''
#}}}

#{{{ Editor Action
[[plugins]] # edit surround easy
repo = 'machakann/vim-sandwich'
hook_add = '''
    let g:sandwich_no_default_key_mappings = 1

    silent! nmap <unique><silent> \d <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> \r <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> \db <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
    silent! nmap <unique><silent> \rb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

    let g:operator_sandwich_no_default_key_mappings = 1

    " add
    silent! nmap <unique> \a <Plug>(operator-sandwich-add)
    silent! xmap <unique> \a <Plug>(operator-sandwich-add)
    silent! omap <unique> \a <Plug>(operator-sandwich-g@)

    " delete
    silent! xmap <unique> \d <Plug>(operator-sandwich-delete)

    " replace
    silent! xmap <unique> \r <Plug>(operator-sandwich-replace)
'''

[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # comment stuff out
repo = 'tyru/caw.vim'
[plugins.ftplugin]
pu_uml_plantuml = '''
    let b:caw_oneline_comment = "'"
    let b:caw_wrap_oneline_comment = ["/'", "'/"]
    let b:caw_wrap_multiline_comment = {'right': "'/", 'left': "/'"}
'''

[[plugins]] # for caw.vim
repo = 'kana/vim-repeat'

[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'

[[plugins]] # for binary
repo = 'Shougo/vinarise.vim'
#}}}

#{{{ Motion
[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'
#}}}

#{{{ syntax check
[[plugins]] # syntax check
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_echo_msg_format = '[%linter%] %s (%severity%)'
    let g:ale_statusline_format = ['E%d', 'W%d', '']
    let g:ale_virtualtext_cursor = 1
    let g:ale_set_loclist = 1
    " let g:ale_open_list = 'on_save'

    let g:ale_linters = {
                \ 'dockerfile': [
                    \ 'dockerfile_lint',
                    \ 'hadolint',
                    \ ],
                \ 'go': [
                    \ 'golangci-lint'
                    \ ],
                \ 'html': [
                    \ 'htmlhint'
                    \ ],
                \ 'kotlin': [
                    \ 'kotlinc',
                    \ 'ktlint',
                    \ ],
                \ 'proto': [
                    \ 'prototool'
                    \ ],
                \ 'terraform': [
                    \ 'terraform',
                    \ 'tflint',
                    \ ],
                \ }
    let g:ale_go_golangci_lint_options = '--fast --max-same-issues 0 --disable gochecknoinits --disable gochecknoglobals --disable lll --disable maligned --disable dupl'
    let g:ale_go_golangci_lint_package = 1
    " let g:ale_go_gometalinter_options = '--fast --exclude ".*\.pb\.go" --exclude ".*_mock\.go" --enable-gc --disable golint --disable maligned --disable vetshadow'
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'
#}}}

#{{{ Git/Gist
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
    call gina#custom#mapping#nmap(
                \ 'status', '<space>gs',
                \ ':<C-u>Gina status<CR>',
                \ {'noremap': 1, 'silent': 1},
                \)

    call gina#custom#execute(
                \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
                \ 'setlocal winfixheight',
                \)
'''

# TODO: gina移行
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    let g:fugitive_github_domains = ['[^/]*']
    nnoremap <silent> <space>g :<C-u>Git<space>
    nnoremap <silent> <space>ga :<C-u>Gwrite<CR>
    nnoremap <silent> <space>gc :<C-u>Gcommit<CR>
    nnoremap <silent> <space>gs :<C-u>Gstatus<CR>
    nnoremap <silent> <space>gr :<C-u>Gbrowse<CR>
    nnoremap <silent> <space>gd :<C-u>Gdiff<CR>
    nnoremap <silent> <space>gbl :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    let g:gitgutter_enabled = 0
    let g:gitgutter_eager = 0
    nnoremap <silent> <space>gg :<C-u>GitGutterToggle<CR>
    nnoremap <silent> <space>gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
    nnoremap <silent> <space>gl :<C-u>Agit<CR>
    nnoremap <silent> <space>gL :<C-u>AgitFile<CR>
'''
[plugins.ftplugin]
agit = '''
    nmap <buffer> ch <Plug>(agit-git-cherry-pick)
    nmap <buffer> Rv <Plug>(agit-git-revert)
'''

[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>(gista-'
#}}}
#{{{ ft

[ftplugin] #{{{
#{{{ python
python = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ css
css = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ kotlin
kotlin = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ make
make = '''
    setlocal noexpandtab
    setlocal tabstop=8
    setlocal shiftwidth=8
'''
#}}}
#{{{ Markdown
markdown = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#}}}
#{{{ vim
vim = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ snippets
snippets = '''
    setlocal noexpandtab
'''
#}}}
#{{{ revealjs
revealjs = '''
    nnoremap <buffer> <Leader>b :<C-u>!npm run build<CR>
    nnoremap <buffer> <Leader>r :<C-u>!npm run start<CR>
    nnoremap <buffer> <Leader>t :<C-u>!npm run test<CR>
'''
#}}}
#{{{ talkiejs
talkiejs = '''
    nnoremap <buffer> <Leader>b :<C-u>!npm run build<CR>
    nnoremap <buffer> <Leader>r :<C-u>!npm run start<CR>
    nnoremap <buffer> <Leader>w :<C-u>!npm run d<CR>
    nnoremap <buffer> <Leader>t :<C-u>!npm run test<CR>
'''
#}}}
#}}}

#{{{ TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
build = 'npm install -g clausreinke/typescript-tools typescript'
on_ft = 'typescript'
#}}}

#{{{ go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go_test_show_name = 1
    let g:go_test_timeout = '1m'

    let g:go_fmt_autosave = 1
    let g:go_fmt_experimental = 1
    " let g:go_info_mode = 'guru'
    let g:go_jump_to_error = 0
    let g:go_fmt_command = 'goimports'
    let g:go_fmt_options = {
                \ 'gofmt': '-s',
                \ 'goimports': '-e',
                \ }
    let g:go_mod_fmt_autosave = 1
    let g:go_def_mapping_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_snippet_engine = 'disable'
    let g:go_metalinter_autosave = 0

    let g:go_metalinter_enabled = [
                \ 'deadcode',
                \ 'errcheck',
                \ 'gosimple',
                \ 'govet',
                \ 'ineffassign',
                \ 'staticcheck',
                \ 'structcheck',
                \ 'typecheck',
                \ 'unused',
                \ 'varcheck',
                \ 'bodyclose',
                \ 'depguard',
                \ 'dogsled',
                "\ 'dupl',
                "\ 'funlen',
                "\ 'gochecknoglobals',
                "\ 'gochecknoinits',
                \ 'gocognit',
                \ 'goconst',
                \ 'gocritic',
                \ 'gocyclo',
                \ 'godox',
                \ 'gofmt',
                \ 'goimports',
                "\ 'golint',
                \ 'gosec',
                \ 'interfacer',
                "\ 'lll',
                "\ 'maligned',
                \ 'misspell',
                \ 'nakedret',
                \ 'prealloc',
                \ 'scopelint',
                "\ 'stylecheck',
                \ 'unconvert',
                \ 'unparam',
                \ 'whitespace',
                "\ 'wsl',
                \ ]

    let g:go_list_type = "quickfix"

    let g:go_term_enabled = 0

    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_space_tab_error = 1
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_operators = 0
    let g:go_highlight_functions = 0
    let g:go_highlight_function_parameters = 0
    let g:go_highlight_function_calls = 1
    let g:go_highlight_types = 0
    let g:go_highlight_fields = 0
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_string_spellcheck = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_variable_declarations = 1
    let g:go_highlight_variable_assignments = 1
'''
[plugins.ftplugin]
go = '''
    " nmap     <buffer><silent> K          <Plug>(go-doc)
    " nmap     <buffer><silent> <C-]>      <Plug>(go-def)
    " nmap     <buffer><silent> <Leader>i  <Plug>(go-implements)
    " nmap     <buffer><silent> <Leader>R  <Plug>(go-rename)
    " nnoremap <buffer><silent> <Leader>s  :<C-u>Denite decls:%<CR>
    " nmap     <buffer><silent> <Leader>dr <Plug>(go-referrers)
    " nmap     <buffer><silent> gq         <Plug>(go-imports)
    " nnoremap <buffer><silent> <Leader>h  :<C-u>GoSameIds<CR>
    " nnoremap <buffer><silent> <Leader>H  :<C-u>GoSameIdsClear<CR>
    " nnoremap <buffer><silent> <Leader>S  :<C-u>Denite decls<CR>

    nmap <buffer> <leader>r <Plug>(go-run)
    nmap <buffer> <leader>b :<C-u>make<CR>
    nmap <buffer> <leader>t <Plug>(go-test)
    nmap <buffer> <leader>c <Plug>(go-coverage-toggle)
    nmap <buffer> <leader>T <Plug>(go-test-func)

    nmap <buffer> <Leader>da <Plug>(go-alternate-edit)
    nmap <buffer> <Leader>de <Plug>(go-describe)
    nmap <buffer> <Leader>dc <Plug>(go-callers)

    " nmap <buffer> <Leader>I <Plug>(go-info)

    nmap <buffer> <Leader>m <Plug>(go-metalinter)
    nnoremap <buffer> <Leader>M :<C-u>GoMetaLinter ./...<CR>

    nnoremap <buffer> <Leader>e :<C-u>GoErrCheck<CR>
    nnoremap <buffer> <Leader>E :<C-u>GoErrCheck ./...<CR>

    nmap <buffer> <Leader>G <Plug>(go-generate)
'''
#}}}

#{{{ Protocol Buffers
[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = 'proto'
[plugins.ftplugin]
proto = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''

[[plugins]]
repo = 'uber/prototool'
rtp = 'vim/prototool'
on_ft = 'proto'
[plugins.ftplugin]
proto = '''
    nnoremap <buffer> gq :<C-u>call PrototoolFormatFix()<CR>
'''
#}}}

#{{{ Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#goto_command = '<C-]>'
    let g:jedi#use_tabs_not_buffers = 0  " current default is 1.
    let g:jedi#rename_command = '<Leader>R'
    let g:jedi#usages_command = '<Leader>I'
    let g:jedi#completions_enabled = 0
    let g:jedi#smart_auto_mappings = 1

    " Unite/ref and pydoc are more useful.
    let g:jedi#documentation_command = '<Leader>gd'
    let g:jedi#auto_close_doc = 1
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'
#}}}

#{{{ Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'groovy'
#}}}

#{{{ Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'
#}}}

#{{{ Swift
[[plugins]]
repo = 'apple/swift'
rtp = 'utils/vim'
on_ft = ['swift', 'sil', 'swiftgyb']
#}}}

#{{{ html
# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:user_emmet_leader_key=','

    let g:user_emmet_settings = {
                \   'variables': {
                \     'lang': 'ja'
                \   },
                \   'indentation': '  '
                \ }
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
#}}}

#{{{ css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade', 'css']
#}}}

#{{{ slim
[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'
#}}}

#{{{ Markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:markdown_enable_spell_checking = 0
    let g:markdown_mapping_switch_status = '<Learder>x'
    hi! link markdownXmlComment Comment
    hi! link markdownXmlElement Comment
'''

# Preview
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pu', 'uml', 'plantuml']
build = 'cp app & npm install'
hook_source = '''
    let g:mkdp_command_for_global = 1
    let g:mkdp_auto_close = 0
    let g:mkdp_markdown_css = g:vim_dir . '/markdown_preview-markdown.css'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'html']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = 'open-browser.vim'
hook_source = '''
    " realtime preview
    let g:previm_enable_realtime = 1
'''
#}}}

#{{{ Hugo
[[plugins]]
repo = 'robertbasic/vim-hugo-helper'
on_ft = 'markdown'
#}}}

#{{{ JSON
[[plugins]] # Preview
repo = 'elzr/vim-json'
on_ft = 'javascript'
hook_add = '''
    let g:vim_json_syntax_conceal = 0
'''
#}}}

#{{{ TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

#{{{ Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile', 'docker-compose']
#}}}

#{{{ nginx
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft= 'nginx'
#}}}

#{{{ Ansible
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = 'ansible'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = ['terraform', 'javascript']
#}}}

#{{{ Hashicorp Configuration Language
[[plugins]]
repo = 'fatih/vim-hclfmt'
on_ft = ['terraform', 'javascript']
hook_source = '''
    let g:hcl_fmt_autosave = 0
    let g:tf_fmt_autosave = 0
    let g:nomad_fmt_autosave = 0
'''
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
[plugins.ftplugin]
pu_uml_plantuml = '''
    nnoremap <silent> <buffer> <LocalLeader>b :make<CR>
'''
#}}}

#{{{ Graphviz
[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = 'dot'
hook_source = '''
    let g:WMGraphviz_output='png'
'''
[plugins.ftplugin]
dot = '''
    nnoremap <silent> <buffer> <LocalLeader>lp :GraphvizCompilePDF<CR>
'''
#}}}

#{{{ SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_ft = 'sql'

[[plugins]]
repo = 'vim-scripts/Align'
on_ft = 'sql'
#}}}

#{{{ Kubernetes
# repo = 'andrewstuart/vim-kubernetes'
#
# repo = 'c9s/helper.vim'
# repo = 'c9s/treemenu.vim'
# repo = 'c9s/vikube.vim'
#}}}

#}}}

#{{{ Misc
[[plugins]] # Argumentative aids with manipulating and moving between function arguments.
repo = 'PeterRincker/vim-argumentative'

[[plugins]] # the_silver_searcher
repo = 'rking/ag.vim'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]] # quickrun
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
                \ 'runner': 'vimproc',
                \ 'runner/vimproc/updatetime': 40,
                \ }
    let g:quickrun_config.html = {
                \ 'outputter': 'browser'
                \ }
'''

[[plugins]] # list tags
repo = 'majutsushi/tagbar'
build = 'brew install ctags'
hook_add = '''
    nmap <space>t :<C-u>TagbarToggle<CR>
'''

[[plugins]] # increment date
repo = 'tpope/vim-speeddating'
hook_add = '''
    let g:speeddating_no_mappings = 1
    nmap  <C-A>     <Plug>SpeedDatingUp
    nmap  <C-X>     <Plug>SpeedDatingDown
    xmap  <C-A>     <Plug>SpeedDatingUp
    xmap  <C-X>     <Plug>SpeedDatingDown
    " nmap d<C-A>     <Plug>SpeedDatingNowUTC
    " nmap d<C-X>     <Plug>SpeedDatingNowLocal
'''

# memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    " suffix type (default markdown)
    let g:memolist_memo_suffix = "txt"

    " date format (default %Y-%m-%d %H:%M)
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    "" let g:memolist_memo_date = "epoch"
    "" let g:memolist_memo_date = "%D %T"

    " tags prompt (default 0)
    "" let g:memolist_prompt_tags = 1

    " categories prompt (default 0)
    let g:memolist_prompt_categories = 1

    " use qfixgrep (default 0)
    " let g:memolist_qfixgrep = 1

    " use vimfler (default 0)
    " let g:memolist_vimfiler = 1

    " use arbitrary vimfler option (default -split -winwidth=50)
    " let g:memolist_vimfiler_option = "-split -winwidth=80 -simple"

    " use unite (default 0)
    "" let g:memolist_unite = 1

    " use arbitrary unite option (default is empty)
    "" let g:memolist_unite_option = "-auto-preview -start-insert"

    " use arbitrary unite source (default is 'file')
    "" let g:memolist_unite_source = "file/rec"

    " use template
    let g:memolist_template_dir_path = "~/.vim/template/memolist"

    " remove filename prefix (default 0)
    "" let g:memolist_filename_prefix_none = 1

    nnoremap <Leader>mn :<C-u>MemoNew<CR>
'''

[[plugins]] # use histogram algorithm for vimdiff
repo = 'chrisbra/vim-diff-enhanced'
hook_add = '''
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=histogram")'
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
    nmap <silent> [<C-d> :<C-u>DirDiffPrev<CR>
    nmap <silent> ]<C-d> :<C-u>DirDiffNext<CR>
'''

[[plugins]] # switch between a single-line statement and a multi-line one
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
    let g:calendar_frame = 'default'
    let g:calendar_first_day = 'monday'
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]] # esa
repo = 'upamune/esa.vim'
depends = 'webapi-vim'

[[plugins]]
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

# csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# docs
[[plugins]]
repo = 'rizzatti/dash.vim'

[[plugins]]
repo = 'akiomik/itermcolors-vim'
#}}}
