#{{{ dein self
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token=$DEINVIM_GITHUB_API_TOKEN
  command! DeinInstall call dein#install()
  command! DeinUpdate call dein#check_update(v:true)
'''
#}}}

#{{{ ecosystems
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
#}}}

#{{{ ddu
[[plugins]]
repo = 'Shougo/ddu.vim'
depends = [
  'denops.vim',
]
hook_add = '''
  nnoremap <silent> <Space><Space>  <Cmd>Ddu -name=files -ui-param-startFilter=v:true file_rec<CR>
  nnoremap <silent> <Space>i<Space> <Cmd>Ddu -name=files -ui-param-startFilter=v:true -source-option-path=`input('Path: ')` file_rec<CR>
  nnoremap <silent> <Space>g<Space> <Cmd>Ddu -name=files -ui-param-startFilter=v:true -source-option-path='%:h' file_rec<CR>
  nnoremap <silent> <Space>l <Cmd>Ddu -name=files -ui-param-startFilter=v:true file_old<CR>

  nnoremap <silent> <Space>p <Cmd>Ddu -buffer-name=register register<CR>

  nnoremap <silent> <Space>r <Cmd>Ddu -name=grep rg -source-param-input='`input('Grep: ')`'<CR>
  nnoremap <silent> <Space>gr <Cmd>call GrepAction('`input('Path: ')`')<CR>

  nnoremap <silent><nowait><expr> <Space>P ddu#pop()

  " Open dotfiles
  nnoremap <silent> <Space>d <Cmd>Ddu -name=files -ui-param-startFilter=v:true -source-option-path=`$HOME/.dotfiles` file_rec<CR>

  " memolist
  nnoremap <silent> <Space>ml <Cmd>Ddu -name=files -source-option-path=`expand(g:memolist_path)` file<CR>
  nnoremap <silent> <Space>mr <Cmd>Ddu -name=grep -source-param-path=`expand(g:memolist_path)` -source-param-input='`input('Grep: ')`' rg<CR>
'''
hook_post_source = '''

  let s:ddu_win_width_percent = 0.9
  let s:ddu_win_height_percent = 0.9
  let s:ddu_win_height_offset_percent = 0

  let s:ddu_win_width = float2nr(&columns * s:ddu_win_width_percent)
  let s:ddu_win_col = float2nr((&columns - s:ddu_win_width) / 2)
  let s:ddu_win_height = float2nr(&lines * s:ddu_win_height_percent)
  let s:ddu_win_row = float2nr((&lines - s:ddu_win_height) / 2 + &lines + s:ddu_win_height_offset_percent)

  call ddu#custom#patch_global({
    \   'resume': v:true,
    \   'ui': 'ff',
    \   'uiOptions': {
    \     'filer': {
    \       'toggle': v:true,
    \     },
    \   },
    \   'uiParams': {
    \     '_': {
    \       'winCol': s:ddu_win_col,
    \       'winRow': s:ddu_win_row,
    \       'winWidth': s:ddu_win_width,
    \       'winHeight': s:ddu_win_height,
    \       'highlights': {
    \         'selected': 'Cursor',
    \       },
    \     },
    \     'ff': {
    \       'split': 'floating',
    \       'filterSplitDirection': 'floating',
    \       'autoResize': v:true,
    \       'previewFloating': v:true,
    \       'prompt': '> ',
    \     },
    \     'filer': {
    \       'split': 'floating',
    \       'sort': 'filename',
    \       'sortTreesFirst': v:true,
    \     },
    \   },
    \   'filterParams': {
    \     'matcher_substring': {
    \       'highlightMatched': 'Search',
    \     },
    \   },
    \   'kindOptions': {
    \     'action': {
    \       'defaultAction': 'do',
    \     },
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \     'word': {
    \       'defaultAction': 'append',
    \     },
    \   },
    \   'sourceOptions': {
    \     '_': {
    \       'ignoreCase': v:true,
    \       'matchers': ['matcher_substring'],
    \       'maxItems': 1000000,
    \     },
    \     'file': {
    \       'sorters': ['sorter_alpha'],
    \     },
    \     'file_rec': {
    \       'matchers': ['matcher_substring', 'matcher_relative'],
    \     },
    \     'file_old': {
    \       'matchers': ['matcher_substring', 'matcher_relative'],
    \     },
    \     'dein': {
    \       'defaultAction': 'cd',
    \     },
    \     'markdown': {
    \       'sorters': [],
    \     },
    \   },
    \   'sourceParams': {
    \     'file_rec': {
    \       'ignoredDirectories': [
    \         '.cache',
    \         '.dart_tool',
    \         '.docker-compose-data',
    \         '.fvm',
    \         '.git',
    \         '.mypy_cache',
    \         '.neptune',
    \         '.next',
    \         '.pytest_cache',
    \         '.swc',
    \         '.symlinks',
    \         '.terraform',
    \         '.venv',
    \         'Pods',
    \         '__pycache__',
    \         'coverage',
    \         'data',
    \         'node_modules',
    \         'output',
    \         'results',
    \         'results_plots',
    \         'storybook-static',
    \         'vendor',
    \         'venv',
    \       ],
    \     },
    \     'dein': {
    \       'defaultAction': 'cd',
    \     },
    \     'markdown': {
    \       'style': 'indent',
    \     },
    \     'rg': {
    \       'args': ['--json'],
    \     },
    \   },
    \ })

  call ddu#custom#action('kind', 'file', 'grep',
      \ { args -> GrepWithDdu(args) })
  function! GrepWithDdu(args)
    " NOTE: param "path" must be one directory
    let path = a:args.items[0].action.path
    let directory = isdirectory(path) ? path : fnamemodify(path, ':h')

    call ddu#start({
        \ "name": a:args.options.name,
        \ "push": v:true,
        \ "sources": [
        \   {
        \     "name": "rg",
        \     "params": {
        \       "path": path,
        \       "input": input('Pattern: '),
        \     },
        \   },
        \ ],
        \ })
  endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'

#{{{ ui
#{{{ ddu-ui-ff
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[plugins.ftplugin]
ddu-ff = '''
  """ only ff """
  nnoremap <silent><buffer><nowait> A
              \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  """ common """
  nnoremap <silent><buffer><nowait> <C-l>
              \ <Cmd>call ddu#ui#ff#do_action('refreshItems')<CR>

  " select
  nnoremap <silent><buffer><nowait> x
              \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>j
  nnoremap <silent><buffer><nowait> X
              \ <Cmd>call ddu#ui#ff#do_action('toggleAllItems')<CR>

  " action
  nnoremap <silent><buffer><nowait> <Tab>
              \ <Cmd>call ddu#ui#ff#do_action('chooseAction')<CR>
  nnoremap <silent><buffer><nowait> <CR>
              \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <silent><buffer><nowait> a
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'newFile'})<CR>
  nnoremap <silent><buffer><nowait> d
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'delete'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> m
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'move'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> c
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'copy'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> p
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'paste'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> r
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'rename'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> gr
              \ <Cmd>call ddu#ui#ff#multi_actions([['itemAction', {'name': 'grep'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> P
              \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <silent><buffer><nowait> <C-g>
              \ <Cmd>call ddu#ui#ff#do_action('previewPath')<CR>
  nnoremap <silent><buffer><nowait> S
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>
  nnoremap <silent><buffer><nowait> s
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>
  nnoremap <silent><buffer><nowait> gcd
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'cd'})<CR>
  nnoremap <silent><buffer><nowait> y
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'yank'})<CR>
  nnoremap <silent><buffer><nowait> !
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'executeSystem'})<CR>
  nnoremap <silent><buffer><nowait> C
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'quickfix'})<CR>
  nnoremap <silent><buffer><nowait> L
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'loclist'})<CR>
  nnoremap <silent><buffer><nowait> <space>h
              \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
  nnoremap <silent><buffer><nowait> <space><CR>
              \ ddu#ui#filer#is_tree() ?
              \   "<Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'narrow'})<CR>" :
              \   "<Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open'})<CR>"
  nnoremap <silent><buffer><nowait> <ESC>
              \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>

  " operation
  nnoremap <silent><buffer><nowait> H
              \ <Cmd>call ddu#ui#ff#close()<CR>
'''
ddu-ff-filter = '''
  nnoremap <silent><buffer><nowait> <CR> <Cmd>call ddu#ui#ff#close()<CR>
  inoremap <silent><buffer><nowait> <CR> <ESC><Cmd>call ddu#ui#ff#close()<CR>
  nnoremap <silent><buffer><nowait> <ESC> <Cmd>call ddu#ui#ff#close()<CR>
'''
#}}}

#{{{ ddu-ui-filer
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
hook_add = '''
  function! OpenDduFiler(opts)
    let s:default_opts = {
      \   'path': getcwd(),
      \   'resume': v:true,
      \ }
    let s:opts = extend(s:default_opts, a:opts)
    let s:name = 'filer-'.trim(substitute(get(s:opts, 'id', s:opts.path), '/', '-', 'g'), '-')

    let s:param = {
      \   'name': s:name,
      \   'ui': 'filer',
      \   'sync': v:true,
      \   'profile': v:true,
      \   'resume': s:opts.resume,
      \   'sources': [{
      \     'name': 'file',
      \     'options': {
      \       'path': s:opts.path,
      \       'columns': ['icon_filename'],
      \     },
      \   }],
      \   'uiOptions': {
      \     'filer': {
      \     },
      \   },
      \ }
    if has_key(s:opts, 'searchPath')
      let s:param.searchPath = s:opts.searchPath
    endif
    call ddu#start(s:param)
  endfunction

  nnoremap <silent> <space>e <Cmd>call OpenDduFiler({
      \ })<CR>
  nnoremap <silent> <space>ge <Cmd>call OpenDduFiler({
      \   'searchPath': expand('%:p'),
      \ })<CR>
  nnoremap <silent> <space>gE <Cmd>call OpenDduFiler({
      \   'path': expand('%:h:p'),
      \   'searchPath': expand('%:p'),
      \ })<CR>
'''
[plugins.ftplugin]
ddu-filer = '''
  """ only filer """
  " tree
  nnoremap <silent><buffer><nowait><expr> o
              \ ddu#ui#filer#is_tree() ?
              \   "<Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>" :
              \   "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open'})<CR>"
  nnoremap <silent><buffer><nowait><expr> O
              \ "<Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle', 'maxLevel': -1})<CR>"

  " operation
  nnoremap <silent><buffer><nowait> <C-l>
              \ <Cmd>call ddu#ui#filer#do_action('refreshItems')<CR>

  """ common """
  " select
  nnoremap <silent><buffer><nowait> x
              \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>j
  nnoremap <silent><buffer><nowait> X
              \ <Cmd>call ddu#ui#filer#do_action('toggleAllItems')<CR>

  " action
  nnoremap <silent><buffer><nowait> <Tab>
              \ <Cmd>call ddu#ui#filer#do_action('chooseAction')<CR>
  nnoremap <silent><buffer><nowait> <CR>
              \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <silent><buffer><nowait> a
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newFile'})<CR>
  nnoremap <silent><buffer><nowait> d
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'delete'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> m
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'move'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> c
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'copy'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> p
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'paste'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> r
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'rename'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> gr
              \ <Cmd>call ddu#ui#filer#multi_actions([['itemAction', {'name': 'grep'}],['clearSelectAllItems']])<CR>
  nnoremap <silent><buffer><nowait> P
              \ <Cmd>call ddu#ui#filer#do_action('preview')<CR>
  nnoremap <silent><buffer><nowait> <C-g>
              \ <Cmd>call ddu#ui#filer#do_action('previewPath')<CR>
  nnoremap <silent><buffer><nowait> S
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>
  nnoremap <silent><buffer><nowait> s
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>
  nnoremap <silent><buffer><nowait> gcd
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'cd'})<CR>
  nnoremap <silent><buffer><nowait> y
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'yank'})<CR>
  nnoremap <silent><buffer><nowait> !
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'executeSystem'})<CR>
  nnoremap <silent><buffer><nowait> C
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'quickfix'})<CR>
  nnoremap <silent><buffer><nowait> L
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'loclist'})<CR>
  nnoremap <silent><buffer><nowait> <space>h
              \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
  nnoremap <silent><buffer><nowait><expr> <space><CR>
              \ ddu#ui#filer#is_tree() ?
              \   "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
              \   "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open'})<CR>"
  nnoremap <silent><buffer><nowait> <ESC>
              \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
'''
#}}}

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
depends = [
  'ddu.vim',
]
hook_post_source = '''
  call ddu#custom#patch_global({
    \   'columnParams': {
    \     'icon_filename': {
    \       'span': 2,
    \       'defaultIcon': {
    \         'icon': ' ',
    \         'color': 'NormalFloat',
    \       },
    \       'colors': {
    \         'default': 'NormalFloat',
    \       },
    \       'customSpecialIcons': {
    \         '.gitmodules': {'icon': '', 'color': 'NormalFloat'},
    \         '.envrc': {'icon': '', 'color': 'NormalFloat'},
    \         '.envrc.local': {'icon': '', 'color': 'NormalFloat'},
    \         '.editorconfig': {'icon': '', 'color': 'NormalFloat'},
    \         '.eslintignore': {'icon': '', 'color': 'NormalFloat'},
    \         '.eslintrc.cjs': {'icon': '', 'color': 'NormalFloat'},
    \         '.eslintcache': {'icon': '', 'color': 'NormalFloat'},
    \         '.prettierignore': {'icon': '', 'color': 'NormalFloat'},
    \         '.prettierrc': {'icon': '', 'color': 'NormalFloat'},
    \         '.prettierrc.cjs': {'icon': '', 'color': 'NormalFloat'},
    \         'package.json': {'icon': '', 'color': 'NormalFloat'},
    \         'package-lock.json': {'icon': '', 'color': 'NormalFloat'},
    \         'tsconfig.json': {'icon': '', 'color': 'NormalFloat'},
    \         'tsconfig.check.json': {'icon': '', 'color': 'NormalFloat'},
    \         '.tool-versions': {'icon': '', 'color': 'NormalFloat'},
    \         '.nvmrc': {'icon': '', 'color': 'NormalFloat'},
    \         '.node-version': {'icon': '', 'color': 'NormalFloat'},
    \         'node_modules/': {'icon': '', 'color': 'NormalFloat'},
    \         '.init.vim.local': {'icon': '', 'color': 'NormalFloat'},
    \         '.dockerignore': {'icon': '', 'color': 'NormalFloat'},
    \         'go.mod': {'icon': '', 'color': 'NormalFloat'},
    \         'go.sum': {'icon': '', 'color': 'NormalFloat'},
    \         'golangci.toml': {'icon': '', 'color': 'NormalFloat'},
    \         'terraform.tfstate.backup': {'icon': '', 'color': 'NormalFloat'},
    \       },
    \       'customFileIcons': {
    \         'tf': {'icon': '', 'color': 'NormalFloat'},
    \         'hcl': {'icon': '', 'color': 'NormalFloat'},
    \         'tfstate': {'icon': '', 'color': 'NormalFloat'},
    \         'json5': {'icon': '', 'color': 'NormalFloat'},
    \         'astro': {'icon': '', 'color': 'NormalFloat'},
    \         'snip': {'icon': '', 'color': 'NormalFloat'},
    \       },
    \     },
    \   },
    \ })
'''
#}}}

#{{{ kind
[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
#}}}

#{{{ filter
#{{{ matcher
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_relative'
#}}}
#{{{ sorter
[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'
#}}}
#}}}

#{{{ source
[[plugins]]
repo = 'Shougo/ddu-source-action'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'

[[plugins]]
repo = 'Shougo/ddu-source-register'

[[plugins]]
repo = 'mikanIchinose/ddu-source-markdown'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
#}}}

#}}}

#{{{ Tag bar
[[plugins]]
repo = 'liuchengxu/vista.vim'
on_func = [
  'vista#',
  'NearestMethodOrFunction',
]
on_cmd = 'Vista'
hook_add = '''
  nnoremap <silent> <space>t :<C-u>Vista!!<CR>

  let g:vista_default_executive = 'ctags'
  let g:vista_executive_for = {
    \ 'markdown': 'toc',
    \ }

  let g:vista_no_mappings = 0
  let g:vista#renderer#enable_icon = 0

  let g:vista_sidebar_width = 80
  let g:vista_cursor_delay = 0
  let g:vista_echo_cursor_strategy = 'scroll'
'''
hook_source = '''
  " for `lightline.vim`
  function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
  endfunction
'''
[plugins.ftplugin]
vista_kind = '''
  nnoremap <silent><buffer><nowait><expr> <CR> vista#cursor#FoldOrJump()
  nnoremap <silent><buffer><nowait><expr> S vista#Sort()
  nnoremap <silent><buffer><nowait><expr> P vista#cursor#TogglePreview()
'''
#}}}

#{{{ VCS
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
  call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
      \ 'setlocal winfixheight',
      \)

  function! s:mapping(schema, mode, lhs, rhs)
    if a:rhs =~ '^<Plug>'
      call gina#custom#mapping#nmap(a:schema, a:lhs, a:rhs, {
        \ 'mode': a:mode,
        \ 'nowait': 1,
        \ })
      return
    endif
    call gina#custom#mapping#nmap(a:schema, a:lhs, a:rhs, {
      \ 'mode': a:mode,
      \ 'nowait': 1,
      \ 'noremap': 1,
      \ 'silent': 1,
      \ })
  endfunction

  "{{{ status settings
  call gina#custom#command#option('status', '-u|--untracked-files')
  call gina#custom#command#option('status', '-s|--short')
  call gina#custom#command#option('status', '-b|--branch')
  call s:mapping('status', 'n', '<Tab>', '<Plug>(gina-builtin-choice)')
  call s:mapping('status', 'n', 'x', '<Plug>(gina-builtin-mark)j')
  call s:mapping('status', 'n', 'yy', '<Plug>(gina-yank-path)')
  call s:mapping('status', 'n', 'Y', '<Plug>(gina-yank-rev)')

  call s:mapping('status', 'n', 'C', ':<C-u>Gina commit<CR>')
  call s:mapping('status', 'n', '<', '<Plug>(gina-index-stage)')
  call s:mapping('status', 'n', '>', '<Plug>(gina-index-unstage)')

  call s:mapping('status', 'n', 'gP', ':<C-u>Gina push<CR>')

  call s:mapping('status', 'n', '<CR>', '<Plug>(gina-edit)')
  call s:mapping('status', 'n', 's', '<Plug>(gina-edit-split)')
  call s:mapping('status', 'n', 'v', '<Plug>(gina-edit-vsplit)')
  call s:mapping('status', 'n', 'P', '<Plug>(gina-show-preview)')
  call s:mapping('status', 'n', 'g<CR>', '<Plug>(gina-show)')
  call s:mapping('status', 'n', 'gs', '<Plug>(gina-show-split)')
  call s:mapping('status', 'n', 'gv', '<Plug>(gina-show-vsplit)')

  call s:mapping('status', 'n', 'di', '<Plug>(gina-diff)')
  call s:mapping('status', 'n', 'gp', '<Plug>(gina-patch)')
  call s:mapping('status', 'n', 'gc', '<Plug>(gina-chaperon)')

  call s:mapping('status', 'n', 'gx', '<Plug>(gina-browse)')

  call s:mapping('status', 'n', 'stu', ':<C-u>Gina stash --include-untracked --keep-index<CR>')
  call s:mapping('status', 'n', 'sT', ':<C-u>Gina stash --include-untracked<CR>')
  call s:mapping('status', 'n', 'stp', ':<C-u>Gina stash pop<CR>')
  "}}}

  "{{{ commit settings
  call gina#custom#command#option('commit', '-u|--untracked-files')
  call gina#custom#command#option('commit', '-v|--verbose')
  call gina#custom#command#option('commit', '-S|--gpg-sign')
  call s:mapping('commit', 'n', 's!', '<Plug>(gina-commit-ammend)')
  "}}}

  "{{{ branch settings
  call s:mapping('branch', 'n', '<Tab>', '<Plug>(gina-builtin-choice)')
  call s:mapping('branch', 'n', 'x', '<Plug>(gina-builtin-mark)j')

  call s:mapping('branch', 'n', 'A', '<Plug>(gina-branch-new)')
  call s:mapping('branch', 'n', 'R', '<Plug>(gina-branch-move)')
  call s:mapping('branch', 'n', 'D', '<Plug>(gina-branch-delete-force)')

  call s:mapping('branch', 'n', 'g<CR>', '<Plug>(gina-commit-checkout-track)')
  call s:mapping('branch', 'n', 'M', '<Plug>(gina-commit-merge)')

  call s:mapping('branch', 'n', 'gP', ':<C-u>Gina push<CR>')
  "}}}

  "{{{ blame settings
  let g:gina#command#blame#formatter#format = '%su%=%au on %ti %ma%in'
  call s:mapping('blame', 'n', 'P', '<Plug>(gina-show-preview)')
  "}}}

'''
hook_add = '''
  " let g:gina#command#commit#use_default_mappings = 0
  " let g:gina#command#diff#use_default_mappings = 0
  " let g:gina#command#status#use_default_mappings = 0
  nnoremap <space>vs :<C-u>Gina status<CR>
  nnoremap <space>vb :<C-u>Gina branch --all<CR>
  nnoremap <space>vo :<C-u>Gina browse :<CR>
  vnoremap <space>vo :<C-u>'<,'>Gina browse :<CR>

  "{{{ unuse default mappings
  " let g:gina#command#blame#use_default_mappings = 0
  " let g:gina#command#branch#use_default_mappings = 0
  " let g:gina#command#changes#use_default_mappings = 0
  " let g:gina#command#chaperon#use_default_mappings = 0
  let g:gina#command#commit#use_default_mappings = 0
  " let g:gina#command#diff#use_default_mappings = 0
  " let g:gina#command#grep#use_default_mappings = 0
  " let g:gina#command#log#use_default_mappings = 0
  " let g:gina#command#ls#use_default_mappings = 0
  " let g:gina#command#patch#use_default_mappings = 0
  " let g:gina#command#qrep#use_default_mappings = 0
  " let g:gina#command#reflog#use_default_mappings = 0
  " let g:gina#command#show#use_default_mappings = 0
  " let g:gina#command#stash#show#use_default_mappings = 0
  " let g:gina#command#stash#use_default_mappings = 0
  let g:gina#command#status#use_default_mappings = 0
  " let g:gina#command#tag#use_default_mappings = 0
  "}}}
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  let g:agit_no_default_mappings = 1
  nnoremap <silent> <space>vl :<C-u>Agit<CR>
  nnoremap <silent> <space>vL :<C-u>AgitFile<CR>
'''
[plugins.ftplugin]
agit = '''
  nmap <buffer><nowait> <C-n> <Plug>(agit-scrolldown-stat)
  nmap <buffer><nowait> <C-p> <Plug>(agit-scrollup-stat)
  nmap <buffer><nowait> <C-j> <Plug>(agit-scrolldown-diff)
  nmap <buffer><nowait> <C-k> <Plug>(agit-scrollup-diff)
  nmap <buffer><nowait> <C-l> <Plug>(agit-reload)
  nmap <buffer><nowait> yh    <Plug>(agit-yank-hash)
  nmap <buffer><nowait> <C-g> <Plug>(agit-print-commitmsg)
  nmap <buffer><nowait> <ESC> <Plug>(agit-exit)
  nmap <buffer><nowait> co    <Plug>(agit-git-checkout)
  nmap <buffer><nowait> bo    <Plug>(agit-git-checkout-b)
  nmap <buffer><nowait> bd    <Plug>(agit-git-branch-b)
  nmap <buffer><nowait> rs    <Plug>(agit-git-reset-soft)
  nmap <buffer><nowait> rr    <Plug>(agit-git-reset)
  nmap <buffer><nowait> rh    <Plug>(agit-git-reset-hard)
  nmap <buffer><nowait> rbb   <Plug>(agit-git-rebase)
  nmap <buffer><nowait> rbi   <Plug>(agit-git-rebase-i)
  nmap <buffer><nowait> cp    <Plug>(agit-git-cherry-pick)
  nmap <buffer><nowait> rv    <Plug>(agit-git-revert)
  nmap <buffer><nowait> di    <Plug>(agit-git-diff)
  nmap <buffer><nowait> dI    <Plug>(agit-git-diff-with-local)
'''
#}}}

#{{{ History
[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
  nnoremap <space>u :<C-u>MundoToggle<CR>
'''
#}}}

#{{{ Formatting
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
#}}}

#{{{ LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_source = '''
  lua << EOF
      vim.diagnostic.config({
        virtual_text = {
          source = true;
          prefix = '';
        };
      });

      -- [\[gopls\] delay diagnostics or not run them in insert mode · Issue \#127 · neovim/nvim\-lspconfig](https://github.com/neovim/nvim-lspconfig/issues/127)
      vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
        -- delay update diagnostics
        update_in_insert = false,
      });

      function bind_key_map()
        vim.cmd "nnoremap <buffer><silent> <Leader>a         :<C-u>lua vim.lsp.buf.code_action()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader><Leader>l :<C-u>lua vim.lsp.codelens.run()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader><Leader>L :<C-u>lua vim.diagnostic.open_float({focusable = false})<CR>"
        vim.cmd "nnoremap <buffer><silent> [d                :<C-u>lua vim.diagnostic.goto_prev()<CR>"
        vim.cmd "nnoremap <buffer><silent> ]d                :<C-u>lua vim.diagnostic.goto_next()<CR>"
        vim.cmd "nnoremap <buffer><silent> K                 :<C-u>lua vim.lsp.buf.hover()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>h         :<C-u>lua vim.lsp.buf.signature_help()<CR>"
        vim.cmd "nnoremap <buffer><silent> <C-]>             :<C-u>lua vim.lsp.buf.definition()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>i         :<C-u>lua vim.lsp.buf.implementation()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>c         :<C-u>lua vim.lsp.buf.incoming_calls()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>R         :<C-u>lua vim.lsp.buf.rename()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>ds        :<C-u>lua vim.lsp.buf.document_symbol()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>dr        :<C-u>lua vim.lsp.buf.references()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>a         :<C-u>lua vim.lsp.buf.code_action()<CR>"
        vim.cmd "vnoremap <buffer><silent> <Leader>a         :<C-u>lua vim.lsp.buf.range_code_action()<CR>"
        vim.cmd "nnoremap <buffer><silent> gq                :<C-u>lua vim.lsp.buf.format()<CR>"
        vim.cmd "vnoremap <buffer><silent> gq                :<C-u>lua vim.lsp.buf.range_formatting()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>h         :<C-u>lua vim.lsp.buf.document_highlight()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>H         :<C-u>lua vim.lsp.buf.clear_references()<CR>"
        vim.cmd "nnoremap <buffer><silent> <Leader>ws        :<C-u>lua vim.lsp.buf.workspace_symbol()<CR>"
      end

      function on_attach()
        bind_key_map()
        vim.cmd "hi! link DiagnosticError   ALEVirtualTextError"
        vim.cmd "hi! link DiagnosticWarn    ALEVirtualTextWarning"
        vim.cmd "hi! link DiagnosticInfo    Identifier"
        vim.cmd "hi! link DiagnosticHint    ALEVirtualTextWarning"
        vim.cmd "hi! link LspReferenceText  Normal"
        vim.cmd "hi! link LspReferenceRead  Identifier"
        vim.cmd "hi! link LspReferenceWrite MoreMsg"

        vim.cmd "hi! link LspCodeLens Comment"
        vim.cmd "hi! link LspCodeLensSeparator Comment"

        require'lsp_signature'.on_attach() -- for `ray-x/lsp_signature.nvim`
      end

      function on_attach_with_codelens()
        on_attach()
        vim.cmd "autocmd BufEnter,CursorHold,InsertLeave <buffer> lua vim.lsp.codelens.refresh()"
      end

      local lspconfig = require'lspconfig'

      lspconfig.vimls.setup{
        on_attach = on_attach;
      };

      lspconfig.gopls.setup{
        on_attach = on_attach_with_codelens;
        settings = {
          gopls = {
            ---- Build ----
            directoryFilters = {
              -- common
              "-**/.git",
              "-**/vendor",
              "-**/.symlinks",

              -- for Node.JS
              "-**/.next",
              "-**/.swc",
              "-**/node_modules",
              "-**/storybook-static",

              -- for Python
              "-**/.mypy_cache",
              "-**/__pycache__",
              "-**/.pytest_cache",
              "-**/.venv",
              "-**/venv",
              "-**/.neptune",

              -- for Terraform
              "-**/.terraform",

              -- for Dart and Flutter
              "-**/.dart_tool",

              -- for iOS
              "-**/Pods",
              "-**/.fvm",

              -- for MyProjects
              "-**/.cache",
              "-**/data",
              "-**/results",
              "-**/results_plots",
              "-**/output",
              "-**/.docker-compose-data",
              "-**/coverage",
            };

            templateExtensions = {
              ".go.tmpl",
              ".go.tpl",
              ".gotmpl",
              ".gotpl",
            };

            ---- Formatting ----
            ["local"] = os.getenv("GO_IMPORTS_LOCAL");

            ---- UI ----
            codelenses = {
              gc_details = true;
              generate = true;
              regenerate_cgo = true;
              test = true;
              tidy = true;
              upgrade_dependency = true;
              vendor = true;
            };

            ---- UI Completion ----
            usePlaceholders = true;

            ---- UI Diagnostic ----
            analyses = {
              nilness = true;
              unusedwrite = true;
            };

            ---- UI Documentation ----
            ---- UI Inlayhint ----
            ---- UI Navigation ----
          };
        };
        filetypes = {
          'go',
          'gomod',
        };
      };
      lspconfig.pylsp.setup{
        on_attach = on_attach;
        settings = {
          pylsp = {
            configurationSources = {'flake8'};
            plugins = {
              flake8 = {enabled = true;};
              mypy = {
                enabled = true;
                dmypy = true;
              };

              rope_autoimport = {enabled = true;};

              pydocstyle = {enabled = false;};
              mccabe = {enabled = false;};
              pycodestyle = {enabled = false;};
              pyflakes = {enabled = false;};

              black = {enabled = true;};

              autopep8 = {enabled = false;};
              yapf = {enabled = false;};
            };
          };
        };
      };

      function on_attach_for_tsserver(client)
        on_attach()
        client.server_capabilities.documentFormattingProvider = false;
        client.server_capabilities.documentRangeFormattingProvider = false;
      end
      lspconfig.tsserver.setup{
        on_attach = on_attach_for_tsserver;
      };
      lspconfig.denols.setup{
        on_attach = on_attach;
        root_dir = lspconfig.util.root_pattern("deno.json", "denops"),
      };
      lspconfig.astro.setup{
        on_attach = on_attach;
        root_dir = lspconfig.util.root_pattern("astro.config.ts", "astro.config.mjs"),
      };

      lspconfig.html.setup{
        on_attach = on_attach;
      };
      lspconfig.cssls.setup{
        on_attach = on_attach;
      };
      -- lspconfig.graphql.setup{
      --   on_attach = on_attach;
      --   filetypes = {
      --     'graphql',
      --     'typescript',
      --     'typescriptreact',
      --     'javascript',
      --     'javascriptreact',
      --   };
      -- };

      function on_attach_for_jsonls(client)
        on_attach()
        client.server_capabilities.documentFormattingProvider = false;
        client.server_capabilities.documentRangeFormattingProvider = false;
      end
      lspconfig.jsonls.setup{
        on_attach = on_attach_for_jsonls;
        settings = {
          json = {
            schemas = require('schemastore').json.schemas();
            validate = { enable = true };
          };
        };
      };
      -- lspconfig.yamlls.setup{
      --   on_attach = on_attach;
      -- };

      lspconfig.terraformls.setup{
        on_attach = on_attach;
      };

      lspconfig.dockerls.setup{
        on_attach = on_attach;
      };
EOF

  function! s:ReloadLSP() abort
    lua vim.lsp.stop_client(vim.lsp.get_active_clients())
    edit
  endfunction
  command! ReloadLSP call s:ReloadLSP()
  nnoremap <Leader>L :<C-u>ReloadLSP<CR>
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
hook_source = '''
  lua << EOF
    require'null-ls'.setup{
      diagnostics_format = '[#{c}] #{m} (#{s})';
      update_in_insert = false;

      sources = {
        -- make
        require'null-ls'.builtins.diagnostics.checkmake,
        -- Dockerfile
        require'null-ls'.builtins.diagnostics.hadolint,
        -- sh
        require'null-ls'.builtins.diagnostics.shellcheck,
        require'null-ls'.builtins.formatting.shfmt,

        -- prettier
        require'null-ls'.builtins.formatting.prettierd,
        -- javascript, typescript
        require'null-ls'.builtins.diagnostics.eslint_d,
        -- json
        require'null-ls'.builtins.formatting.fixjson,

        -- protobuf
        require'null-ls'.builtins.diagnostics.buf,

        -- GitHub Action
        require'null-ls'.builtins.diagnostics.actionlint.with({
          runtime_condition = require'null-ls.helpers'.cache.by_bufnr(function(params)
            return params.bufname:find(vim.pesc(".github/workflows")) ~= nil
          end)
        }),
      };
      on_attach = on_attach;
    };
EOF
'''
depends = [
  'nvim-lspconfig',
  'plenary.nvim',
]

#{{{ improvements
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
hook_source = '''
  lua << EOF
    require'lsp_signature'.setup{
      bind = true;
      handler_opts = {
        border = "rounded";
      };
      hi_parameter = "Underlined";
    };
EOF
'''

# for jsonls
[[plugins]]
repo = 'b0o/SchemaStore.nvim'
#}}}

#}}}

#{{{ Complement
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = [
  'denops.vim',
  'pum.vim',
]
hook_add = '''
  nnoremap : <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ? <Cmd>call CommandlinePre('/')<CR>?

  function! CommandlinePre(mode) abort
    " Note: It disables default command line completion!
    set wildchar=<C-t>
    set wildcharm=<C-t>

    cnoremap <buffer><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ exists('b:ddc_cmdline_completion') ? ddc#manual_complete() : "\<C-t>"

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('cmdlineSources',
        \ ['cmdline-history', 'necovim', 'cmdline', 'around', 'zsh'])
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')
    else
      call ddc#custom#patch_buffer('cmdlineSources',
        \ ['around', 'line'])
    endif

    augroup DDCCommandlinePre
      autocmd!
      autocmd User DDCCmdlineLeave ++once call CommandlinePost()
      autocmd InsertEnter <buffer> ++once call CommandlinePost()
    augroup END

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction

  function! CommandlinePost() abort
    silent! cunmap <buffer> <Tab>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif

    set wildcharm=<Tab>
  endfunction

    cnoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Use pum.vim

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()

  inoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''
hook_post_source = '''
  call ddc#custom#patch_global('ui', 'pum')

  call ddc#custom#patch_global('sources', [
    \   'nvim-lsp',
    \   'around',
    \   'buffer',
    \   'file',
    \ ])
  call ddc#custom#patch_global('sourceOptions', {
    \   '_': {
    \     'matchers': ['matcher_head', 'matcher_length'],
    \     'sorters': ['sorter_rank'],
    \   },
    \   'around': {
    \     'mark': 'A',
    \   },
    \   'buffer': {
    \     'mark': 'B',
    \   },
    \   'file': {
    \     'mark': 'F',
    \     'isVolatile': v:true,
    \     'forceCompletionPattern': '\S/\S*',
    \   },
    \   'nvim-lsp': {
    \     'mark': 'lsp',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'necovim': {
    \     'mark': 'vim',
    \   },
    \   'cmdline': {
    \     'mark': 'cmdline',
    \     'forceCompletionPattern': '.',
    \   },
    \   'cmdline-history': {
    \     'mark': 'history',
    \     'sorters': [],
    \     'forceCompletionPattern': '.',
    \   },
    \   'zsh': {
    \     'mark': 'zsh',
    \     'forceCompletionPattern': '.',
    \   },
    \ })
  call ddc#custom#patch_global('sourceParams', {
    \   'buffer': {
    \     'requireSameFiletype': v:false,
    \   },
    \   'cmdline-history': {
    \     'maxSize': &history,
    \   },
    \ })

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
    \   'InsertEnter', 'TextChangedI', 'TextChangedP',
    \   'CmdlineEnter', 'CmdlineChanged',
    \ ])

  inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()
  inoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  cnoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:ddc_cmdline_completion') ?
    \ ddc#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

#{{{ sources
[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'matsui54/ddc-buffer'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
#}}}

#{{{ filters
[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_length'

[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
#}}}

#{{{ improvements
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_add = '''
  let g:popup_preview_config = {
  \   'border': v:false,
  \ }
'''
hook_post_source = '''
  call popup_preview#enable()
'''
#}}}

#{{{ ecosystems
[[plugins]]
repo = 'Shougo/pum.vim'
#}}}

# TODO: support LSP `textEdit` event on complete done

#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-j> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }

    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#enable_complete_done = 1
'''
#}}}

#{{{ Async Execution
[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = '''
  let g:dispatch_no_maps = 1
  let g:dispatch_compilers = {}
  let g:dispatch_quickfix_height = 30
  nnoremap <Leader>r :<C-u>Dispatch<CR>
  nnoremap g<Leader>r :<C-u>Dispatch<CR>
  nnoremap <Leader>du :<C-u>Dispatch docker compose up --build -d<CR>
  nnoremap <Leader>dd :<C-u>Dispatch docker compose down<CR>

  nnoremap <silent> g<Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform apply'<CR>
'''
[plugins.ftplugin]
sh = '''
  nnoremap <buffer><silent> <Leader>r :<C-u>Dispatch "%:p"<CR>
'''
go_gomod = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch -dir=%:h go run .<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch -dir=%:h go generate .<CR>

  let g:dispatch_compilers['go test'] = 'go'
  nnoremap <buffer> <Leader>t :<C-u>Dispatch -dir=%:h go test .<CR>
  nnoremap <buffer> <Leader>gt :<C-u>Dispatch -dir=%:h go test ./...<CR>
  nnoremap <buffer> <Leader>pt :<C-u>Dispatch go test ./...<CR>

  let g:dispatch_compilers['golangci-lint run'] = 'go'
  nnoremap <buffer> <Leader>l :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 .<CR>
  nnoremap <buffer> <Leader>gl :<C-u>Dispatch -dir=%:h golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
  nnoremap <buffer> <Leader>pl :<C-u>Dispatch golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 ./...<CR>
'''
python = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch python -m "$(echo '%' \| tr / . \| sed -e 's/\.__main__\.py//' \| sed -e 's/\.py//')"<CR>
'''
javascript_javascriptreact_typescript_typescriptreact = '''
  let g:dispatch_compilers['npx eslint'] = 'go'
  nnoremap <buffer> <Leader>l :<C-u>Dispatch -dir=%:h npx eslint --cache -f unix "%"<CR>
  nnoremap <buffer> <Leader>gl :<C-u>Dispatch -dir=%:h npx eslint --cache -f unix .<CR>
  nnoremap <buffer> <Leader>pl :<C-u>Dispatch npx eslint --cache -f unix .<CR>
'''
terraform = '''
  nnoremap <buffer><silent> <Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform apply'<CR>
  nnoremap <buffer><silent> <Leader>t :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform plan'<CR>
  nnoremap <buffer><silent> <Leader><Leader>r :execute 'Dispatch -dir='.expand(exists("$TERRAFORM_DIR") ? "$TERRAFORM_DIR" : ".").' terraform init'<CR>
'''
marp = '''
  nnoremap <buffer> <Leader>r :<C-u>Dispatch marp --watch --preview %<CR>
  nnoremap <buffer> <Leader>G :<C-u>Dispatch marp --pdf --allow-local-files --output %:s?.marp.md?.pdf? %<CR>
'''

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
hook_add = '''
  let g:dispatch_handlers = ['neovim']
'''
#}}}

#{{{ Testing
[[plugins]]
repo = 'vim-test/vim-test'
on_ft =  [
  'go',
  'python',
]
depends = [
  'vim-dispatch',
]
hook_add = '''
  let g:test#strategy = 'dispatch'
'''
[plugins.ftplugin]
go = '''
  let g:test#go#gotest#file_pattern = '\v.*\.go$'
  nnoremap <buffer><silent> <Leader>T     :<C-u>TestNearest<CR>
  nnoremap <buffer><silent> <Leader><C-t> :<C-u>TestLast<CR>

  function! s:debugNearest()
    let g:test#go#runner = 'delve'
    TestNearest
    unlet g:test#go#runner
  endfunction
  command! -buffer DebugNearest call s:debugNearest()
'''
python = '''
  nnoremap <buffer><silent> <Leader>t :<C-u>TestFile -s -l -vv<CR>
  nnoremap <buffer><silent> <Leader>T :<C-u>TestNearest -s -l -vv<CR>
'''
#}}}

#{{{ Debugger
[[plugins]]
repo = 'mfussenegger/nvim-dap'
on_ft = [
  'go',
  'python',
]
hook_source = '''
  nnoremap <silent> <Leader>ff :<C-u>lua require'dap'.continue()<CR>

  nnoremap <silent> <Leader>fbb :<C-u>lua require'dap'.toggle_breakpoint()<CR>
  nnoremap <silent> <Leader>fbc :<C-u>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
  nnoremap <silent> <Leader>fbl :<C-u>lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>

  nnoremap <silent> <Leader>fj :<C-u>lua require'dap'.step_over()<CR>
  nnoremap <silent> <Leader>fl :<C-u>lua require'dap'.step_into()<CR>
  nnoremap <silent> <Leader>fh :<C-u>lua require'dap'.step_out()<CR>

  nnoremap <silent> <leader>f: :<C-u>lua require'dap'.repl.open()<CR>
  nnoremap <silent> <leader>fR :<C-u>lua require'dap'.run_last()<CR>

  nnoremap <silent> <Leader>fn :<C-u>lua require'dap'.down()<CR>
  nnoremap <silent> <Leader>fp :<C-u>lua require'dap'.up()<CR>
'''

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
on_source = 'nvim-dap'
depends = [
  'nvim-dap',
]
hook_source = '''
  nnoremap <buffer> <Leader>f<Space> :<C-u>lua require'dapui'.toggle()<CR>

  lua << EOF
    -- auto open
    require'dap'.listeners.after.event_initialized["dapup_config"] = function()
      require'dapui'.open()
    end
    -- auto close
    require'dap'.listeners.before.event_terminated["dapup_config"] = function()
      require'dapui'.close()
    end
    require'dap'.listeners.before.event_exited["dapup_config"] = function()
      require'dapui'.close()
    end

    require("dapui").setup({
      icons = { expanded = "▾", collapsed = "▸" },
      mappings = {
        -- Use a table to apply multiple mappings
        expand = "o",
        open = "<CR>",
        remove = "d",
        edit = "e",
        repl = "r",
      },
      layouts = {
        {
          elements = {
            { id = "scopes", size = 0.3 },
            { id = "watches", size = 0.2 },
            { id = "stacks", size = 0.3 },
            { id = "breakpoints", size = 0.2 },
          },
          size = 80,
          position = "left", -- Can be "left", "right", "top", "bottom"
        },
        {
          elements = { "repl" },
          size = 10,
          position = "bottom", -- Can be "left", "right", "top", "bottom"
        },
      },
      floating = {
        max_height = nil, -- These can be integers or a float between 0 and 1.
        max_width = nil, -- Floats will be treated as percentage of your screen.
        border = "single", -- Border style. Can be "single", "double" or "rounded"
        mappings = {
          close = "<Esc>",
        },
      },
      windows = { indent = 1 },
    })

EOF

'''

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
on_source = 'nvim-dap'
depends = [
  'nvim-dap',
]
hook_source = '''
  lua require("nvim-dap-virtual-text").setup()
'''

[[plugins]]
repo = 'leoluz/nvim-dap-go'
on_ft = [
  'go',
]
depends = [
  'nvim-dap',
  'nvim-treesitter',
]
hook_source = '''
  lua require('dap-go').setup()
'''
[plugins.ftplugin]
go = '''
  nnoremap <buffer> <Leader>ft :<C-u>lua require('dap-go').debug_test()<CR>
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap-python'
on_ft = [
  'python',
]
depends = [
  'nvim-dap',
  'nvim-treesitter',
]
hook_source = '''
  lua require('dap-python').setup()
'''
[plugins.ftplugin]
python = '''
  nnoremap <buffer> <Leader>ft :<C-u>:lua require('dap-python').test_method()<CR>
  nnoremap <buffer> <Leader>fc :<C-u>:lua require('dap-python').test_class()<CR>
'''

#}}}

#{{{ Utils
[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'direnv/direnv.vim'

#{{{ increment Date
[[plugins]]
repo = 'tpope/vim-speeddating'
hook_add = '''
    let g:speeddating_no_mappings = 1
    nmap  <C-A>     <Plug>SpeedDatingUp
    nmap  <C-X>     <Plug>SpeedDatingDown
    xmap  <C-A>     <Plug>SpeedDatingUp
    xmap  <C-X>     <Plug>SpeedDatingDown
'''
#}}}

#{{{ Editing Text Utils
[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'

[[plugins]] # edit surround easy
repo = 'machakann/vim-sandwich'
hook_add = '''
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1

    " add
    silent! nmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
    silent! xmap <unique> <Leader>wa <Plug>(operator-sandwich-add)
    silent! omap <unique> <Leader>wa <Plug>(operator-sandwich-g@)

    " delete
    silent! nmap <unique><silent> <Leader>wd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> <Leader>wdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
    silent! xmap <unique> <Leader>wd <Plug>(operator-sandwich-delete)

    " replace
    silent! nmap <unique><silent> <Leader>wr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> <Leader>wrb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
    silent! xmap <unique> <Leader>wr <Plug>(operator-sandwich-replace)
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'
hook_add = '''
    nmap <silent> <leader>x <Plug>(ArgWrapToggle)
'''
[plugins.ftplugin]
go = '''
    let b:argwrap_tail_comma = 1
'''

[[plugins]] # comment
repo = 'tyru/caw.vim'
[plugins.ftplugin]
pu_uml_plantuml = '''
    let b:caw_oneline_comment = "'"
    let b:caw_wrap_oneline_comment = ["/'", "'/"]
    let b:caw_wrap_multiline_comment = {'right': "'/", 'left': "/'"}
'''
dart = '''
    let b:caw_oneline_comment = "//"
    let b:caw_wrap_oneline_comment = ["/*", "*/"]
    let b:caw_wrap_multiline_comment = {'right': "*/", 'left': "/*"}
'''
json5 = '''
    let b:caw_oneline_comment = "//"
'''

[[plugins]] # for caw.vim
repo = 'kana/vim-repeat'
#}}}

#{{{ Memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    let g:memolist_memo_suffix = "txt"
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    nnoremap <Leader>mn :<C-u>MemoNew<CR>
'''
#}}}

#{{{ Diff tools
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
    nmap <silent> [<C-d> :<C-u>DirDiffPrev<CR>
    nmap <silent> ]<C-d> :<C-u>DirDiffNext<CR>
'''
#}}}

#}}}

#{{{ Highlights
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_done_update = '''
  TSUpdate
'''
merged = 0
hook_source = '''
  lua << EOF
    require'nvim-treesitter.configs'.setup{
      ignore_install = { 'smali' };
      ensure_installed = 'all';
      highlight = {
        enable = true;
      };
      indent = {
        enable = false;
      };
    };
EOF
'''
#}}}

#{{{ Filetype

[ftplugin] #{{{
snippets = '''
    setlocal noexpandtab
'''
vim = '''
    setlocal tabstop=2
    setlocal shiftwidth=2
'''
make = '''
    setlocal noexpandtab
    setlocal tabstop=8
    setlocal shiftwidth=8
'''
python = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
    nnoremap <buffer> gQ :<C-u>%!tidy-imports --black --quiet<CR>:<C-u>lua vim.lsp.buf.format()<CR>
'''
kotlin = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
markdown = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal spellcapcheck='[.?!]\_[\])'" \t]\+'
'''
css = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
javascript_javascriptreact_typescript_typescriptreact = '''
    nnoremap <buffer> gQ :<C-u>%!eslint_d -f unix --stdin --fix-to-stdout --stdin-filename "%"<CR>
'''
go = '''
    setlocal noexpandtab
    setlocal tabstop=2
    setlocal shiftwidth=2
    augroup GoAutocmd
      autocmd!
      autocmd BufWritePre *.go lua vim.lsp.buf.format()
    augroup END

    " https://github.com/golang/tools/blob/master/gopls/doc/vim.md#neovim-imports
    lua << EOF
      function go_org_imports(wait_ms)
        local params = vim.lsp.util.make_range_params()
        params.context = {only = {"source.organizeImports"}}
        local result = vim.lsp.buf_request_sync(0, "textDocument/codeAction", params, wait_ms)
        for cid, res in pairs(result or {}) do
          for _, r in pairs(res.result or {}) do
            if r.edit then
              local enc = (vim.lsp.get_client_by_id(cid) or {}).offset_encoding or "utf-16"
              vim.lsp.util.apply_workspace_edit(r.edit, enc)
            end
          end
        end
      end
EOF
    nnoremap <buffer> gQ :<C-u>lua go_org_imports(30000)<CR>
'''
#}}}

#{{{ CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']
#}}}

#{{{ HTML, Javascript And Typescript
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'javascript', 'typescript', 'javascriptreact', 'typescriptreact']
hook_source = '''
  let g:user_emmet_leader_key = '<C-e>'
  let g:user_emmet_expandabbr_key = '<C-e><C-e>'
  let g:user_emmet_expandword_key = '<C-e>w'
  let g:user_emmet_update_tag = '<C-e>u'
  let g:user_emmet_balancetaginward_key = '<C-e>d'
  let g:user_emmet_balancetagoutward_key = '<C-e>D'
  let g:user_emmet_next_key = '<C-e>n'
  let g:user_emmet_prev_key = '<C-e>p'
  let g:user_emmet_imagesize_key = '<C-e>I'
  let g:user_emmet_togglecomment_key = '<C-e>/'
  let g:user_emmet_splitjointag_key = '<C-e>j'
  let g:user_emmet_removetag_key = '<C-e>\d'
  let g:user_emmet_anchorizeurl_key = '<C-e>x'
  let g:user_emmet_anchorizesummary_key = '<C-e>X'
  let g:user_emmet_mergelines_key = '<C-e>\m'
  let g:user_emmet_codepretty_key = '<C-e>\s'

  let g:user_emmet_settings = {
        \   'variables': {
        \     'lang': 'ja'
        \   },
        \   'indentation': '  ',
        \   'includeLanguages': {
        \     'typescript': 'typescriptreact'
        \   },
        \   'html': {
        \     'empty_element_suffix': '/>'
        \   },
        \   'javascript': {
        \     'extends': 'jsx'
        \   }
        \ }
'''
#}}}

#{{{ Go
[[plugins]]
repo = 'rhysd/vim-goyacc'
on_ft = 'goyacc'

[[plugins]]
repo = 'mattn/vim-gomod'
#}}}

#{{{ Python
# [[plugins]]
# repo = 'heavenshell/vim-pydocstring'
# on_ft = 'python'
# build = 'make install'
# hook_add = '''
#   let g:pydocstring_enable_mapping = 0
#   let g:pydocstring_formatter = 'google'
# '''
# [[plugins]]
# repo = 'goerz/jupytext.vim'
#}}}

#{{{ Flutter
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
depends = [
  'nvim-lspconfig',
  'plenary.nvim',
]
hook_source = '''
  lua << EOF
      require'flutter-tools'.setup{
        lsp = {
          on_attach = on_attach;
        };
      }
EOF
'''
[plugins.ftplugin]
dart = '''
  nnoremap <buffer><silent> <space>t :<C-u>FlutterOutlineToggle<CR>
'''
flutterToolsOutline = '''
  nnoremap <buffer><silent> <space>t :<C-u>FlutterOutlineToggle<CR>
'''
#}}}

#{{{ Markdown
# Preview
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'plantuml']
build = 'cd app && yarn install'
hook_add = '''
    let g:mkdp_command_for_global = 1
    let g:mkdp_auto_close = 0
    let g:mkdp_markdown_css = g:vim_dir . '/markdown_preview-markdown.css'
    let g:mkdp_theme = 'light'
'''
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'json']
hook_add = '''
  let g:terraform_fmt_on_save = 1
'''
#}}}

#{{{ Binary
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
#}}}

#}}}

#{{{ Status bar
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
              \ 'colorscheme': 'iceberg',
              \ 'mode_map': { 'c': 'NORMAL' },
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename', 'nearest_method' ] ],
              \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ],
              \ },
              \ 'inactive': {
              \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename', 'nearest_method' ] ],
              \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
              \ },
              \ 'component_function': {
              \   'readonly': 'LightlineReadonly',
              \   'gitbranch': 'LightLineGitBranch',
              \   'filename': 'LightLineFilename',
              \   'fileformat': 'LightLineFileformat',
              \   'filetype': 'LightLineFiletype',
              \   'fileencoding': 'LightLineFileencoding',
              \   'mode': 'LightLineMode',
              \   'nearest_method': 'NearestMethodOrFunction',
              \ },
              \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
              \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
              \ }

  function! LightLineModified()
      return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
      return &ft !~? 'help' && &readonly ? "\uE0A2" : ''
  endfunction

  function! LightLineFilename()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? g:lightline.fname :
                  \ fname =~ '__Mundo\|NERD_tree' ? '' :
                  \ &ft == 'denite' ? denite#get_status() :
                  \ &ft == 'denite-filter' ? denite#get_status() :
                  \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                  \ ('' != fname ? fname : '[No Name]') .
                  \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineGitBranch()
      try
          if expand('%:t') !~? 'Tagbar\|Mundo' && &ft !~? 'denite\|defx'
              let mark = ''  " edit here for cool mark
              let _ = gina#component#repo#branch()
              return strlen(_) ? mark._ : ''
          endif
      catch
      endtry
      return ''
  endfunction

  function! LightLineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
      return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? 'Tagbar' :
                  \ fname == '__Mundo__' ? 'Mundo' :
                  \ fname == '__Mundo_Preview__' ? 'Mundo Preview' :
                  \ &ft == 'defx' ? 'Defx' :
                  \ &ft == 'denite' ? 'Denite' :
                  \ &ft == 'denite-filter' ? 'Denite Filter' :
                  \ &ft == 'vimshell' ? 'VimShell' :
                  \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
      let g:lightline.fname = a:fname
      return lightline#statusline(0)
  endfunction

  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0
'''
#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    set termguicolors
'''
hook_post_source = '''
    colorscheme iceberg
'''
#}}}

#{{{ UI Extensions
# [[plugins]]
# repo = 'petertriho/nvim-scrollbar'
# hook_post_source = '''
#   lua << EOF
#     require("scrollbar").setup()
# EOF
# '''
#}}}
