#{{{ General

[[plugins]]
repo = 'Shougo/dein.vim'

#{{{ denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    nmap <silent> <C-p><C-f> :<C-u>Denite filetype<CR>
    nmap <silent> <C-p>p     :<C-u>Denite file_rec<CR>
    nmap <silent> <C-p><C-p> :<C-u>Denite file_rec:
    nmap <silent> <C-p>GO    :<C-u>Denite file_rec:$GOPATH/src<CR>
    nmap <silent> <C-p>l     :<C-u>Denite line<CR>
    nmap <silent> <C-p>g     :<C-u>Denite grep<CR>
    nmap <silent> <C-p><C-g> :<C-u>Denite grep:
    nmap <silent> <C-p>c     :<C-u>Denite command<CR>
    nmap <silent> <C-p>o     :<C-u>Denite file_mru<CR>
    nmap <silent> <C-p>y     :<C-u>Denite neoyank<CR>
    nmap <silent> <C-p>m     :<C-u>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>
'''
hook_source = '''
    call denite#custom#var('file_rec', 'command',
          \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences',
          \ '-g', ''])

    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'default_opts',
          \ ['--nocolor', '--nogroup', '--follow', '--hidden', '--column',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences'
          \ ])

    call denite#custom#source(
          \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
    call denite#custom#source('file_mru', 'converters',
          \ ['converter_relative_word'])

    call denite#custom#map('_', "\<C-j>", 'move_to_next_line')
    call denite#custom#map('_', "\<C-k>", 'move_to_prev_line')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'nixprime/cpsm'
on_source = 'denite.nvim'
build = 'env PY3=ON ./install.sh'
#}}}

#{{{ config
[[plugins]]
repo = 'Shougo/context_filetype.vim'
#}}}

#{{{ temporary filetype
[[plugins]]
repo = 'osyo-manga/vim-precious'
#}}}

#{{{ Status bar
# color scheme for lightline
[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'
depends = 'vim-hybrid'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
                \ 'colorscheme': 'hybrid',
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
                \   'right': [ [ 'neomake', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'component_function': {
                \   'fugitive': 'LightLineFugitive',
                \   'filename': 'LightLineFilename',
                \   'fileformat': 'LightLineFileformat',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'mode': 'LightLineMode',
                \ },
                \ 'component_expand': {
                \   'neomake': 'LightlineNeomake',
                \ },
                \ 'component_type': {
                \   'neomake': 'error',
                \ },
                \ 'subseparator': { 'left': '|', 'right': '|' }
                \ }

    function! LightLineModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help' && &readonly ? 'RO' : ''
    endfunction

    function! LightLineFilename()
        let fname = expand('%:t')
        return fname == 'ControlP' ? g:lightline.ctrlp_item :
                    \ fname == '__Tagbar__' ? g:lightline.fname :
                    \ fname =~ '__Gundo\|NERD_tree' ? '' :
                    \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \ &ft == 'unite' ? unite#get_status_string() :
                    \ &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ ('' != fname ? fname : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
        try
            if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
                let mark = ''  " edit here for cool mark
                let _ = fugitive#head()
                return strlen(_) ? mark._ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ fname == '__Gundo__' ? 'Gundo' :
                    \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                    \ fname =~ 'NERD_tree' ? 'NERDTree' :
                    \ &ft == 'unite' ? 'Unite' :
                    \ &ft == 'vimfiler' ? 'VimFiler' :
                    \ &ft == 'vimshell' ? 'VimShell' :
                    \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    let g:tagbar_status_func = 'TagbarStatusFunc'

    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
        return lightline#statusline(0)
    endfunction

    function LightlineNeomake()
        return '%{neomake#statusline#LoclistStatus()}'
    endfunction

    let g:unite_force_overwrite_statusline = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimshell_force_overwrite_statusline = 0
'''
#}}}

#{{{ history
[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
    let g:mundo_prefer_python3 = 1
    nnoremap <space>u :<C-u>MundoToggle<CR>
'''
#}}}

#{{{ content
[[plugins]]
repo = 'vim-scripts/diffchar.vim'
hook_add = '''
    let g:DiffUnit = "Word1"
'''
#}}}

#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    let g:hybrid_use_Xresources = 1
    set background=dark
    augroup colorscheme_hybrid
      autocmd!
      autocmd  VimEnter * nested colorscheme hybrid
    augroup END
'''
#}}}

#{{{ Programming

#{{{ deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#mappings#manual_complete()
    function! s:check_back_space() abort "{{{
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#mappings#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"

    inoremap <expr><C-g> deoplete#mappings#undo_completion()
    " <C-l>: redraw candidates
    inoremap <expr><C-l> deoplete#mappings#refresh()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#mappings#close_popup() . "\<CR>"
    endfunction

    inoremap <expr> '  pumvisible() ? deoplete#mappings#close_popup() : "'"

    " call deoplete#custom#set('_', 'matchers', ['matcher_head'])
    call deoplete#custom#set('ghc', 'sorters', ['sorter_word'])
    " call deoplete#custom#set('buffer', 'mark', '')
    " call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
    " call deoplete#custom#set('_', 'disabled_syntaxes', ['Comment', 'String'])
    " call deoplete#custom#set('buffer', 'mark', '*')

    " Use auto delimiter
    " call deoplete#custom#set('_', 'converters',
    "       \ ['converter_auto_paren',
    "       \  'converter_auto_delimiter', 'remove_overlap'])
    call deoplete#custom#set('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])

    " call deoplete#custom#set('buffer', 'min_pattern_length', 9999)
    call deoplete#custom#set('clang', 'input_pattern', '\.\w*|\.->\w*|\w+::\w*')
    call deoplete#custom#set('clang', 'max_pattern_length', -1)

    let g:deoplete#keyword_patterns = {}
    let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
    " let g:deoplete#keyword_patterns.tex = '\\?[a-zA-Z_]\w*'
    let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'

    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni#input_patterns.python = ''
    let g:deoplete#omni#functions = {}
    let g:deoplete#omni#functions.lua = 'xolox#lua#omnifunc'

    " inoremap <silent><expr> <C-t> deoplete#mappings#manual_complete('file')

    let g:deoplete#enable_refresh_always = 1
    let g:deoplete#enable_camel_case = 1
    " let g:deoplete#auto_complete_start_length = 3

    " deoplete-clang "{{{
    " libclang shared library path
    let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'

    " clang builtin header path
    let g:deoplete#sources#clang#clang_header = '/usr/include/clang'

    " libclang default compile flags
    let g:deoplete#sources#clang#flags = ['-x', 'c++', '-std=c++11']

    " compile_commands.json directory path
    " Not file path. Need build directory path
    " let g:deoplete#sources#clang#clang_complete_database =
    "       \ expand('~/src/neovim/build')

    " let g:deoplete#enable_profile = 1
    " call deoplete#enable_logging('DEBUG', 'deoplete.log')
    " call deoplete#custom#set('clang', 'debug_enabled', 1)
'''
#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
    imap <silent><c-K> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-K> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-k> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-k> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-K> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    inoremap <silent> (( <C-r>=neosnippet#anonymous('\left(${1}\right)${0}')<CR>
'''
#}}}

#{{{ Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent> <space>e :<C-u>NERDTreeToggle<CR>
    let g:NERDTreeMinimalUI=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
on_cmd = 'NERDTreeToggle'
#}}}

#{{{ Visual
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>(choosewin)'
hook_add = '''
    " invoke with '-'
    nmap  -  <Plug>(choosewin)

    " use overlay feature
    let g:choosewin_overlay_enable = 1

    " workaround for overlay font broken on mutibyte buffer.
    let g:choosewin_overlay_clear_multibyte = 1

    " tmux like overlay color
    let g:choosewin_color_overlay = {
                \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
                \ 'cterm': [ 25, 25 ]
                \ }
    let g:choosewin_color_overlay_current = {
                \ 'gui': ['firebrick1', 'firebrick1' ],
                \ 'cterm': [ 124, 124 ]
                \ }

    let g:choosewin_blink_on_land      = 0 " dont' blink at land
    let g:choosewin_statusline_replace = 0 " don't replace statusline
    let g:choosewin_tabline_replace    = 0 " don't replace tabline
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_color_term = 236
'''
#}}}

#{{{ Editor
[[plugins]] # edit surround easy
repo = 'tpope/vim-surround'

[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

    if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['"'] = {
                \ 'pattern': '"',
                \ 'ignore_groups': ['!Comment']
                \ }
'''

[[plugins]] # comment stuff out
repo = 'tpope/vim-commentary'

[[plugins]] # reuse register
repo = 'LeafCage/yankround.vim'
hook_add = '''
    let g:yankround_use_ctrlp = 1
    let g:yankround_max_history = 50

    nmap p <Plug>(yankround-p)
    xmap p <Plug>(yankround-p)
    nmap P <Plug>(yankround-P)
    nmap gp <Plug>(yankround-gp)
    xmap gp <Plug>(yankround-gp)
    nmap gP <Plug>(yankround-gP)
    nmap <C-k> <Plug>(yankround-prev)
    nmap <C-j> <Plug>(yankround-next)
    cmap <C-r> <Plug>(yankround-insert-register)
    cmap <C-y> <Plug>(yankround-pop)
'''

[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'
#}}}

#{{{ Motion
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " based on [Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa](http://haya14busa.com/mastering-vim-easymotion/)
    " =======================================
    " Boost your productivity with EasyMotion
    " =======================================
    " Disable default mappings
    " If you are true vimmer, you should explicitly map keys by yourself.
    " Do not rely on default bidings.
    let g:EasyMotion_do_mapping = 0

    " Or map prefix key at least(Default: <Leader><Leader>)
    " map <Leader> <Plug>(easymotion-prefix)

    " =======================================
    " Find Motions
    " =======================================
    " Jump to anywhere you want by just `4` or `3` key strokes without thinking!
    " `s{char}{char}{target}`
    nmap s <Plug>(easymotion-s2)
    xmap s <Plug>(easymotion-s2)
    omap z <Plug>(easymotion-s2)
    " Of course, you can map to any key you want such as `<Space>`
    " map <Space>(easymotion-s2)

    " Turn on case sensitive feature
    let g:EasyMotion_smartcase = 1

    " =======================================
    " Line Motions
    " =======================================
    " `JK` Motions: Extend line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    " keep cursor column with `JK` motions
    let g:EasyMotion_startofline = 0

    " =======================================
    " General Configuration
    " =======================================
    let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
    " Show target key with upper case to improve readability
    let g:EasyMotion_use_upper = 1
    " Jump to first match with enter & space
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_space_jump_first = 1
    let g:EasyMotion_use_migemo = 1


    " =======================================
    " Search Motions
    " =======================================
    " Extend search motions with vital-over command line interface
    " Incremental highlight of all the matches
    " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
    " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
    " :h easymotion-command-line
    nmap g/ <Plug>(easymotion-sn)
    xmap g/ <Plug>(easymotion-sn)
    omap g/ <Plug>(easymotion-tn)
'''

[[plugins]] # highlight substitute target
repo = 'osyo-manga/vim-over'
hook_add = '''
    nnoremap <silent> <Leader>s :<C-u>OverCommandLine<CR>
'''

[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'
#}}}

#{{{ syntax check
[[plugins]] # syntax check
repo = 'neomake/neomake'
hook_add = '''
    autocmd! BufWritePost * Neomake
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'
#}}}

#{{{ Git/Gist
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'idanarye/vim-merginal'

[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>(gista-'
#}}}

#{{{ Javascript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']

[[plugins]]
repo = 'gavocanov/vim-js-indent'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']

[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
'''

[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['jst', 'ejs']

[[plugins]]
repo = 'digitaltoad/vim-jade'
on_ft = 'jade'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'
#}}}

#{{{ TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
build = 'npm install -g clausreinke/typescript-tools typescript'
on_ft = 'typescript'
#}}}

#{{{ go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go_fmt_options = '-s'
    " metalinterにオプションを付ける方法が用意されていなかったのでとりあえず無理やり混ぜ込む
    let g:go_metalinter_deadline = '10s --tests'
    let g:go_metalinter_enabled = [
                \ 'deadcode',
                \ 'errcheck',
                \ 'gofmt',
                \ 'ineffassign',
                \ 'interfacer',
                \ 'structcheck',
                \ 'varcheck',
                \ 'vet',
                \ ]
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_build_constraints = 1
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [
                \ 'p:package',
                \ 'i:imports:1',
                \ 'c:constants',
                \ 'v:variables',
                \ 't:types',
                \ 'n:interfaces',
                \ 'w:fields',
                \ 'e:embedded',
                \ 'm:methods',
                \ 'r:constructor',
                \ 'f:functions'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                \ 't' : 'ctype',
                \ 'n' : 'ntype'
                \ },
                \ 'scope2kind' : {
                \ 'ctype' : 't',
                \ 'ntype' : 'n'
                \ },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }
    let g:go_term_enabled = 1

    " for neomake
    let s:goargs = go#package#ImportPath(expand('%:p:h'))
    let g:neomake_go_errcheck_maker = {
                \ 'exe': 'errcheck',
                \ 'args': ['-abspath', s:goargs],
                \ 'append_file': 0,
                \ "errorformat":
                    \ '%E%f:%l:%c: %m'
                    \ . ',%W%f:%l:%c %#%m'
                \ }
    let g:neomake_go_enabled_makers = ['errcheck', 'govet']
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
#}}}

#{{{ Protocol Buffers
[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = 'proto'
#}}}

#{{{ Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'
#}}}

#{{{ Ruby
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'ruby-matchit'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = 'ruby'

[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'
#}}}

#{{{ Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'groovy'
#}}}

#{{{ Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'
#}}}

#{{{ clang
[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp']
#}}}

#{{{ html
# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:user_emmet_leader_key=','

    let g:user_emmet_settings = {
                \   'variables': {
                \     'lang': 'ja'
                \   },
                \   'indentation': '  '
                \ }
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
#}}}

#{{{ css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade', 'css']

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = 'stylus'
#}}}

#{{{ Markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:markdown_enable_spell_checking = 0
    let g:markdown_mapping_switch_status = '<Learder>x'
'''

# Preview
[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = 'open-browser.vim'
hook_source = '''
    " realtime preview
    let g:previm_enable_realtime = 1
'''
#}}}

#{{{ JSON
[[plugins]] # Preview
repo = 'elzr/vim-json'
on_ft = 'javascript'
#}}}

#{{{ TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

#{{{ Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'dockerfile'
#}}}

#{{{ Ansible
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = 'ansible'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
hook_source = '''
    let g:plantuml_executable_script = '$HOME/.dotfiles/plantuml.sh'
'''
#}}}

#{{{ Graphviz
[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = 'dot'
hook_source = '''
    let g:WMGraphviz_output='png'
'''
#}}}

#{{{ SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_ft = 'sql'

[[plugins]]
repo = 'vim-scripts/Align'
on_ft = 'sql'
#}}}

#}}}

#{{{ Misc
[[plugins]] # the_silver_searcher
repo = 'rking/ag.vim'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]] # quickrun
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
                \ 'runner': 'vimproc',
                \ 'runner/vimproc/updatetime': 40,
                \ }
'''

[[plugins]] # qargs
repo = 'henrik/vim-qargs'

[[plugins]] # list tags
repo = 'majutsushi/tagbar'
build = 'brew install ctags'
hook_add = '''
    nmap <space>t :<C-u>TagbarToggle<CR>
'''

[[plugins]] # mark and highlight words
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-'
hook_add = '''
    nmap <Space>m <Plug>(quickhl-manual-this)
    xmap <Space>m <Plug>(quickhl-manual-this)
    nmap <Space>M <Plug>(quickhl-manual-reset)
    xmap <Space>M <Plug>(quickhl-manual-reset)

    nmap <Space>j <Plug>(quickhl-cword-toggle)
    nmap <Space>] <Plug>(quickhl-tag-toggle)
    map ,h <Plug>(operator-quickhl-manual-this-motion)
'''

# memo
[[plugins]]
repo = 'fuenor/qfixgrep'

[[plugins]]
repo = 'glidenote/memolist.vim'
depends = 'qfixgrep'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    " suffix type (default markdown)
    let g:memolist_memo_suffix = "txt"

    " date format (default %Y-%m-%d %H:%M)
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    "" let g:memolist_memo_date = "epoch"
    "" let g:memolist_memo_date = "%D %T"

    " tags prompt (default 0)
    "" let g:memolist_prompt_tags = 1

    " categories prompt (default 0)
    let g:memolist_prompt_categories = 1

    " use qfixgrep (default 0)
    let g:memolist_qfixgrep = 1

    " use vimfler (default 0)
    "" let g:memolist_vimfiler = 1

    " use arbitrary vimfler option (default -split -winwidth=50)
    "" let g:memolist_vimfiler_option = "-split -winwidth=50 -simple"

    " use unite (default 0)
    "" let g:memolist_unite = 1

    " use arbitrary unite option (default is empty)
    "" let g:memolist_unite_option = "-auto-preview -start-insert"

    " use arbitrary unite source (default is 'file')
    "" let g:memolist_unite_source = "file_rec"

    " use template
    let g:memolist_template_dir_path = "~/.vim/template/memolist"

    " remove filename prefix (default 0)
    "" let g:memolist_filename_prefix_none = 1

    " use various Ex commands (default '')
    let g:memolist_ex_cmd = 'CtrlP'
    let g:memolist_ex_cmd = 'NERDTree'

    nnoremap <Leader>mn :<C-u>MemoNew<CR>
    nnoremap <Leader>ml :<C-u>MemoList<CR>
    nnoremap <Leader>mg :<C-u>MemoGrep<CR>
    " use CtrlP
    nnoremap <Leader>mf :<C-u>exe "CtrlP" g:memolist_path<cr><f5>
'''

[[plugins]] # use histogram algorithm for vimdiff
repo = 'chrisbra/vim-diff-enhanced'
hook_add = '''
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=histogram")'
'''
#}}}
