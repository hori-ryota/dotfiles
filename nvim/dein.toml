#{{{ General

[[plugins]]
repo = 'Shougo/dein.vim'

#{{{ config
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
#}}}

#{{{ LSP
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = './install.sh'
hook_add = '''
    let g:LanguageClient_diagnosticsEnable = 0
    let g:LanguageClient_diagnosticsList = 'Location'
    let g:LanguageClient_serverCommands = {
        \ 'go': [
            " https://github.com/saibing/bingo
            " go get -u github.com/saibing/bingo
            \ 'bingo', '--mode', 'stdio', '--logfile', '/tmp/lspserver.log'
        \ ],
        \ 'java': [
            " https://github.com/Ruin0x11/intellij-lsp-server
            \ 'tcp://localhost:7777'
        \ ],
        \ 'kotlin': [
            " https://github.com/Ruin0x11/intellij-lsp-server
            \ 'tcp://localhost:7777'
        \ ],
        \ 'javascript': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'javascript.jsx': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'typescript': [
            " https://www.npmjs.com/package/javascript-typescript-langserver
            " npm install -g javascript-typescript-langserver
            \ 'javascript-typescript-stdio'
        \ ],
        \ 'c': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'c++': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'objc': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'objc++': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ],
        \ 'swift': [
            " https://github.com/apple/sourcekit-lsp
            \ 'sourcekit-lsp'
        \ ]
        \ }

    function! LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
        nnoremap <buffer><silent> <Leader><Leader> :<C-u>Denite contextMenu<CR>
        nnoremap <buffer><silent> K                :<C-u>call LanguageClient_textDocument_hover()<CR>
        nnoremap <buffer><silent> <C-]>            :<C-u>call LanguageClient_textDocument_definition()<CR>
        nnoremap <buffer><silent> <Leader>i        :<C-u>call LanguageClient_textDocument_implementation()<CR>
        nnoremap <buffer><silent> <Leader>R        :<C-u>call LanguageClient_textDocument_rename()<CR>
        nnoremap <buffer><silent> <Leader>s        :<C-u>Denite documentSymbol<CR>
        nnoremap <buffer><silent> <Leader>dr       :<C-u>Denite references<CR>
        nnoremap <buffer><silent> <Leader>a        :<C-u>call LanguageClient_textDocument_codeAction()<CR>
        nnoremap <buffer><silent> gq               :<C-u>call LanguageClient_textDocument_formatting()<CR>
        vnoremap <buffer><silent> gq               :<C-u>call LanguageClient_textDocument_rangeFormatting()<CR>
        nnoremap <buffer><silent> <Leader>h        :<C-u>call LanguageClient_textDocument_documentHighlight()<CR>
        nnoremap <buffer><silent> <Leader>H        :<C-u>call LanguageClient_clearDocumentHighlight()<CR>
        nnoremap <buffer><silent> <Leader>S        :<C-u>Denite workspaceSymbol<CR>
      endif
    endfunction

    autocmd FileType * call LC_maps()
'''
#}}}

#{{{ denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'cpsm'
on_cmd = 'Denite'
hook_add = '''
    nnoremap <silent> <Space>ft       :<C-u>Denite filetype<CR>
    nnoremap <silent> <Space><Space>  :<C-u>Denite file_rec<CR>
    nnoremap <silent> <Space>P        :<C-u>DeniteProjectDir file_rec<CR>
    nnoremap <silent> <Space>b        :<C-u>DeniteBufferDir file_rec<CR>
    nnoremap <silent> <Space>i<Space> :<C-u>Denite file_rec:
    nnoremap <silent> <Space>/        :<C-u>Denite line<CR>
    nnoremap <silent> <Space>r        :<C-u>Denite grep<CR>
    nnoremap <silent> <Space>ir       :<C-u>Denite grep:
    nnoremap <silent> <Space>:        :<C-u>Denite command<CR>
    nnoremap <silent> <Space>;        :<C-u>Denite command_history<CR>
    nnoremap <silent> <Space>o        :<C-u>Denite file_mru<CR>
    nnoremap <silent> <Space>y        :<C-u>Denite neoyank<CR>
    nnoremap <silent> <Space>p        :<C-u>Denite ghq<CR>
    nnoremap <silent> <Space>n        :<C-u>Denite neosnippet<CR>
    nnoremap <silent> <Space>ml       :<C-u>Denite -auto-preview -sorters=sorter_word,sorter_reverse file_rec:`expand(g:memolist_path)`<CR>
    nnoremap <silent> <Space>mg       :<C-u>Denite grep:`expand(g:memolist_path)`<CR>
    nnoremap <silent> <space>c        :<C-u>Denite -mode=normal -auto-resize quickfix<CR>
    nnoremap <silent> <space>l        :<C-u>Denite -mode=normal -auto-resize location_list<CR>
    nnoremap <silent> ]d              :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
    nnoremap <silent> [d              :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
    nnoremap <silent> <space>.        :<C-u>Denite -resume -cursor-pos=+0<CR>
'''
hook_source = '''
    call denite#custom#var('file_rec', 'command',
          \ ['ag', '--follow', '--vimgrep', '--hidden',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences',
          \ '-g', ''])

    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences'
          \ ])

    call denite#custom#source(
          \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
    call denite#custom#source('file_mru', 'converters',
          \ ['converter_relative_word'])

    " Change mappings.
    call denite#custom#map(
          \ 'insert',
          \ '<C-j>',
          \ '<denite:move_to_next_line>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-k>',
          \ '<denite:move_to_previous_line>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-Space>',
          \ '<denite:move_up_path>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-v>',
          \ '<denite:do_action:vsplit>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-s>',
          \ '<denite:do_action:split>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-y>',
          \ '<denite:do_action:preview>',
          \ 'noremap'
          \)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'nixprime/cpsm'
on_source = ['denite.nvim', 'deoplete.nvim']
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'chemzqm/unite-location'
on_source = 'denite.nvim'
#}}}

#{{{ Filer
[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
hook_add = '''
    nnoremap <silent> <space>e :<C-u>Defx<CR>
    nnoremap <silent> <space>E :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
    nnoremap <silent> <Space>h :<C-u>Denite defx/history<CR>

    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
                    \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
                    \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
                    \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
                    \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
                    \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> K
                    \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
                    \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
                    \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
                    \ defx#do_action('toggle_columns',
                    \                'mark:filename:type:size:time')
        nnoremap <silent><buffer><expr> d
                    \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
                    \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
                    \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
                    \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
                    \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
                    \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
                    \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
                    \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
                    \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> S
                    \ defx#do_action('toggle_sort', 'Time')
        nnoremap <silent><buffer><expr> q
                    \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
                    \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
                    \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
                    \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
                    \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
                    \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
                    \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
                    \ defx#do_action('change_vim_cwd')
    endfunction
'''
#}}}

#{{{ fmt
[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
let g:neoformat_run_all_formatters = 1
'''
build = '''
brew install astyle
'''
#}}}

#{{{ temporary filetype
[[plugins]]
repo = 'osyo-manga/vim-precious'
#}}}

#{{{ Status bar
# color scheme for lightline
[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'
depends = 'vim-hybrid'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
                \ 'colorscheme': 'hybrid',
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename' ] ],
                \   'right': [ [ 'ale', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'component_function': {
                \   'readonly': 'LightlineReadonly',
                \   'gitbranch': 'LightLineGitBranch',
                \   'filename': 'LightLineFilename',
                \   'fileformat': 'LightLineFileformat',
                \   'filetype': 'LightLineFiletype',
                \   'fileencoding': 'LightLineFileencoding',
                \   'mode': 'LightLineMode',
                \ },
                \ 'component_expand': {
                \   'ale': 'ALEStatus',
                \ },
                \ 'component_type': {
                \   'ale': 'error',
                \ },
                \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
                \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
                \ }

    function! LightLineModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help' && &readonly ? "\uE0A2" : ''
    endfunction

    function! LightLineFilename()
        let fname = expand('%:t')
        return fname == 'ControlP' ? g:lightline.ctrlp_item :
                    \ fname == '__Tagbar__' ? g:lightline.fname :
                    \ fname =~ '__Gundo\|NERD_tree' ? '' :
                    \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \ &ft == 'unite' ? unite#get_status_string() :
                    \ &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ ('' != fname ? fname : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineGitBranch()
        try
            if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'defx'
                let mark = ''  " edit here for cool mark
                let _ = gina#component#repo#branch()
                return strlen(_) ? mark._ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ fname == '__Gundo__' ? 'Gundo' :
                    \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                    \ fname =~ 'NERD_tree' ? 'NERDTree' :
                    \ &ft == 'unite' ? 'Unite' :
                    \ &ft == 'vimfiler' ? 'VimFiler' :
                    \ &ft == 'vimshell' ? 'VimShell' :
                    \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    let g:tagbar_status_func = 'TagbarStatusFunc'

    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
        return lightline#statusline(0)
    endfunction

    function! ALEStatus()
      let l:count = ale#statusline#Count(bufnr(''))
      let l:errors = l:count.error + l:count.style_error
      let l:warnings = l:count.warning + l:count.style_warning
      return l:count.total == 0 ? 'OK' : 'E' . l:errors . ' W' . l:warnings
    endfunction

    augroup LightLineOnALE
    autocmd!
    autocmd User ALELint call lightline#update()
    augroup END

    let g:unite_force_overwrite_statusline = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimshell_force_overwrite_statusline = 0
'''
#}}}

#{{{ history
[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
    let g:mundo_prefer_python3 = 1
    nnoremap <space>u :<C-u>MundoToggle<CR>
'''
#}}}

#{{{ Color Scheme
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    let g:hybrid_custom_term_colors = 1
    " let g:hybrid_reduced_contrast = 1
    set background=dark
    augroup colorscheme_hybrid
      autocmd!
      autocmd VimEnter * nested colorscheme hybrid
    augroup END
'''
#}}}

#}}}

#{{{ Programming

#{{{ deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1

    call deoplete#custom#option('camel_case', v:true)
    call deoplete#custom#option('max_list', 1000)

    call deoplete#custom#source('_', 'max_abbr_width', 0)
    call deoplete#custom#source('_', 'max_menu_width', 0)

    call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])
    call deoplete#custom#source('_', 'sorters', [])

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#manual_complete()
    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction "}}}

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

    inoremap <expr><C-g>         deoplete#refresh()
    inoremap <expr><C-e>         deoplete#cancel_popup()
    inoremap <silent><expr><C-l> deoplete#complete_common_string()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#close_popup() . "\<CR>"
    endfunction

    call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_event = 'InsertEnter'
build = './install.sh'
#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-j> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }
'''
#}}}

#{{{ Editor Action
[[plugins]] # edit surround easy
repo = 'tpope/vim-surround'

[[plugins]] # for vim-surround
repo = 'tpope/vim-repeat'

[[plugins]] # Aligning Text
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # comment stuff out
repo = 'tyru/caw.vim'

[[plugins]] # for caw.vim
repo = 'kana/vim-repeat'

[[plugins]] # easily search for, substitute, and abbreviate multiple variants of a word
repo = 'tpope/vim-abolish'

[[plugins]] # for binary
repo = 'Shougo/vinarise.vim'
#}}}

#{{{ Motion
[[plugins]] # highlight substitute target
repo = 'osyo-manga/vim-over'
hook_add = '''
    nnoremap <silent> <Leader>s :<C-u>OverCommandLine<CR>
'''

[[plugins]] # pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'
#}}}

#{{{ syntax check
[[plugins]] # syntax check
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_echo_msg_format = '[%linter%] %s (%severity%)'
    let g:ale_statusline_format = ['E%d', 'W%d', '']

    let g:ale_linters = {
                \ 'dockerfile': [
                    \ 'dockerfile_lint',
                    \ 'hadolint',
                    \ ],
                \ 'go': [
                    \ 'golangci-lint'
                    \ ],
                \ 'html': [
                    \ 'htmlhint'
                    \ ],
                \ 'proto': [
                    \ 'prototool'
                    \ ],
                \ }
    let g:ale_go_golangci_lint_options = '--fast --disable gochecknoinits --disable gochecknoglobals'
    let g:ale_go_golangci_lint_package = 1
    " let g:ale_go_gometalinter_options = '--fast --exclude ".*\.pb\.go" --exclude ".*_mock\.go" --enable-gc --disable golint --disable maligned --disable vetshadow'
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'
#}}}

#{{{ Git/Gist
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
    call gina#custom#mapping#nmap(
                \ 'status', '<space>gs',
                \ ':<C-u>Gina status<CR>',
                \ {'noremap': 1, 'silent': 1},
                \)

    call gina#custom#execute(
                \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
                \ 'setlocal winfixheight',
                \)
'''

# TODO: gina移行
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    let g:fugitive_github_domains = ['[^/]*']
    nnoremap <silent> <space>g :<C-u>Git<space>
    nnoremap <silent> <space>ga :<C-u>Gwrite<CR>
    nnoremap <silent> <space>gc :<C-u>Gcommit<CR>
    nnoremap <silent> <space>gs :<C-u>Gstatus<CR>
    nnoremap <silent> <space>gr :<C-u>Gbrowse<CR>
    nnoremap <silent> <space>gd :<C-u>Gdiff<CR>
    nnoremap <silent> <space>gbl :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    let g:gitgutter_enabled = 0
    let g:gitgutter_eager = 0
    nnoremap <silent> <space>gg :<C-u>GitGutterToggle<CR>
    nnoremap <silent> <space>gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
    nnoremap <silent> <space>gl :<C-u>Agit<CR>
    nnoremap <silent> <space>gL :<C-u>AgitFile<CR>
'''
[plugins.ftplugin]
agit = '''
    nmap <buffer> ch <Plug>(agit-git-cherry-pick)
    nmap <buffer> Rv <Plug>(agit-git-revert)
'''

[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>(gista-'
#}}}
#{{{ ft

[ftplugin] #{{{
#{{{ python
python = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ css
css = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ make
make = '''
    setlocal noexpandtab
    setlocal tabstop=8
    setlocal shiftwidth=8
'''
#}}}
#{{{ Markdown
markdown = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#}}}
#{{{ vim
vim = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''
#}}}
#{{{ snippets
snippets = '''
    setlocal noexpandtab
'''
#}}}
#{{{ revealjs
revealjs = '''
    nnoremap <buffer> <Leader>b :<C-u>!npm run build<CR>
    nnoremap <buffer> <Leader>r :<C-u>!npm run start<CR>
    nnoremap <buffer> <Leader>t :<C-u>!npm run test<CR>
'''
#}}}
#{{{ talkiejs
talkiejs = '''
    nnoremap <buffer> <Leader>b :<C-u>!npm run build<CR>
    nnoremap <buffer> <Leader>r :<C-u>!npm run start<CR>
    nnoremap <buffer> <Leader>w :<C-u>!npm run d<CR>
    nnoremap <buffer> <Leader>t :<C-u>!npm run test<CR>
'''
#}}}
#}}}

#{{{ TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
build = 'npm install -g clausreinke/typescript-tools typescript'
on_ft = 'typescript'
#}}}

#{{{ go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go_fmt_autosave = 1
    let g:go_fmt_experimental = 1
    let g:go_test_timeout = '1m'
    " let g:go_info_mode = 'guru'
    let g:go_jump_to_error = 0
    let g:go_fmt_command = 'goimports' " overwritten goimports binary by goreturns
    let g:go_fmt_options = {
                \ 'gofmt': '-s',
                \ 'goimports': '-b -e',
                \ }
    let g:go_mod_fmt_autosave = 1
    let g:go_def_mapping_enabled = 0
    let g:go_snippet_engine = "disable"
    let g:go_metalinter_autosave = 0

    " let g:go_metalinter_enabled = [
    "            \ 'deadcode',
    "             " \ 'dupl',
    "            \ 'errcheck',
    "             " \ 'gochecknoglobals',
    "            \ 'gochecknoinits',
    "             " \ 'goconst',
    "             " \ 'gocyclo',
    "            \ 'gofmt',
    "            \ 'goimports',
    "             " \ 'golint',
    "            \ 'gosec',
    "             " \ 'gosimple', " use megacheck
    "            \ 'gotype',
    "            \ 'gotypex',
    "            \ 'ineffassign',
    "            \ 'interfacer',
    "             " \ 'lll',
    "            \ 'maligned',
    "            \ 'megacheck',
    "            \ 'misspell',
    "            \ 'nakedret',
    "            \ 'safesql',
    "             " \ 'staticcheck', " use megacheck
    "            \ 'structcheck',
    "             " \ 'test',
    "             " \ 'testify',
    "            \ 'unconvert',
    "            \ 'unparam',
    "             " \ 'unused', " use megacheck
    "            \ 'varcheck',
    "            \ 'vet',
    "             " \ 'vetshadow',
    "            \ ]
    "
    " let g:go_metalinter_deadline = '2m'

    let g:go_term_enabled = 1

    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_space_tab_error = 1
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_arguments = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_string_spellcheck = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_variable_declarations = 1
    let g:go_highlight_variable_assignments = 1
'''
[plugins.ftplugin]
go = '''
    " nmap     <buffer><silent> K          <Plug>(go-doc)
    " nmap     <buffer><silent> <C-]>      <Plug>(go-def)
    " nmap     <buffer><silent> <Leader>i  <Plug>(go-implements)
    " nmap     <buffer><silent> <Leader>R  <Plug>(go-rename)
    " nnoremap <buffer><silent> <Leader>s  :<C-u>Denite decls:%<CR>
    " nmap     <buffer><silent> <Leader>dr <Plug>(go-referrers)
    " nmap     <buffer><silent> gq         <Plug>(go-imports)
    " nnoremap <buffer><silent> <Leader>h  :<C-u>GoSameIds<CR>
    " nnoremap <buffer><silent> <Leader>H  :<C-u>GoSameIdsClear<CR>
    " nnoremap <buffer><silent> <Leader>S  :<C-u>Denite decls<CR>

    nmap <buffer> <leader>r <Plug>(go-run)
    nmap <buffer> <leader>b :<C-u>make<CR>
    nmap <buffer> <leader>t <Plug>(go-test)
    nmap <buffer> <leader>c <Plug>(go-coverage-toggle)
    nmap <buffer> <leader>T <Plug>(go-test-func)

    nmap <buffer> <Leader>da <Plug>(go-alternate-edit)
    nmap <buffer> <Leader>de <Plug>(go-describe)
    nmap <buffer> <Leader>dc <Plug>(go-callers)

    " nmap <buffer> <Leader>I <Plug>(go-info)

    " nmap <buffer> <Leader>m <Plug>(go-metalinter)
    " nnoremap <buffer> <Leader>M :<C-u>GoMetaLinter ./...<CR>

    nnoremap <buffer> <Leader>e :<C-u>GoErrCheck<CR>
    nnoremap <buffer> <Leader>E :<C-u>GoErrCheck ./...<CR>

    nmap <buffer> <Leader>G <Plug>(go-generate)

    function! GolangciLint(...)
        set errorformat=%f:%l:%c:\ %m,%f:%l:\ %m
        let results = system('golangci-lint run --enable-all --out-format line-number ' . join(a:000))
        cexpr split(results, '\n')
    endfunction

    nnoremap <buffer><silent> <leader>m :<C-u>call GolangciLint(expand('%:.:h'))<CR>
    nnoremap <buffer><silent> <leader>M :<C-u>call GolangciLint('./...')<CR>
'''

[[plugins]]
repo = 'buoto/gotests-vim'
build = 'go get -u github.com/cweill/gotests/...'
on_ft = 'go'
#}}}

#{{{ Protocol Buffers
[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = 'proto'
[plugins.ftplugin]
proto = '''
    setlocal tabstop=4
    setlocal shiftwidth=4
'''

[[plugins]]
repo = 'uber/prototool'
rtp = 'vim/prototool'
on_ft = 'proto'
#}}}

#{{{ Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#goto_command = '<C-]>'
    let g:jedi#use_tabs_not_buffers = 0  " current default is 1.
    let g:jedi#rename_command = '<Leader>R'
    let g:jedi#usages_command = '<Leader>I'
    let g:jedi#completions_enabled = 0
    let g:jedi#smart_auto_mappings = 1

    " Unite/ref and pydoc are more useful.
    let g:jedi#documentation_command = '<Leader>gd'
    let g:jedi#auto_close_doc = 1
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'
#}}}

#{{{ Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'groovy'
#}}}

#{{{ Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'
#}}}

#{{{ Swift
[[plugins]]
repo = 'apple/swift'
rtp = 'utils/vim'
on_ft = ['swift', 'sil', 'swiftgyb']
#}}}

#{{{ html
# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:user_emmet_leader_key=','

    let g:user_emmet_settings = {
                \   'variables': {
                \     'lang': 'ja'
                \   },
                \   'indentation': '  '
                \ }
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
#}}}

#{{{ css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade', 'css']
#}}}

#{{{ Markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:markdown_enable_spell_checking = 0
    let g:markdown_mapping_switch_status = '<Learder>x'
'''

#{{{ Preview
# TODO: 'iamcco/markdown-preview.nvim'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'html']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = 'open-browser.vim'
hook_source = '''
    " realtime preview
    let g:previm_enable_realtime = 1
'''
#}}}

#{{{ Hugo
[[plugins]]
repo = 'robertbasic/vim-hugo-helper'
on_ft = 'markdown'
#}}}

#}}}

#{{{ JSON
[[plugins]] # Preview
repo = 'elzr/vim-json'
on_ft = 'javascript'
hook_add = '''
    let g:vim_json_syntax_conceal = 0
'''
#}}}

#{{{ TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

#{{{ Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile', 'docker-compose']
#}}}

#{{{ nginx
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft= 'nginx'
#}}}

#{{{ Ansible
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = 'ansible'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']
#}}}

#{{{ Hashicorp Configuration Language
[[plugins]]
repo = 'fatih/vim-hclfmt'
on_ft = ['terraform', 'javascript']
hook_source = '''
    let g:hcl_fmt_autosave = 0
    let g:tf_fmt_autosave = 0
    let g:nomad_fmt_autosave = 0
'''
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
[plugins.ftplugin]
pu_uml_plamtuml = '''
    command! OpenUml :!start chrome %
    nnoremap <silent> <buffer> <LocalLeader>b :make<CR>
    nnoremap <silent> <buffer> <LocalLeader>r :OpenUml<CR>
'''
#}}}

#{{{ Graphviz
[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = 'dot'
hook_source = '''
    let g:WMGraphviz_output='png'
'''
[plugins.ftplugin]
dot = '''
    nnoremap <silent> <buffer> <LocalLeader>lp :GraphvizCompilePDF<CR>
'''
#}}}

#{{{ SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_ft = 'sql'

[[plugins]]
repo = 'vim-scripts/Align'
on_ft = 'sql'
#}}}

#{{{ Kubernetes
# repo = 'andrewstuart/vim-kubernetes'
#
# repo = 'c9s/helper.vim'
# repo = 'c9s/treemenu.vim'
# repo = 'c9s/vikube.vim'
#}}}

#}}}

#{{{ Misc
[[plugins]] # Argumentative aids with manipulating and moving between function arguments.
repo = 'PeterRincker/vim-argumentative'

[[plugins]] # the_silver_searcher
repo = 'rking/ag.vim'

[[plugins]] # replacement in quickfix
repo = 'thinca/vim-qfreplace'

[[plugins]] # quickrun
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
                \ 'runner': 'vimproc',
                \ 'runner/vimproc/updatetime': 40,
                \ }
    let g:quickrun_config.html = {
                \ 'outputter': 'browser'
                \ }
'''

[[plugins]] # list tags
repo = 'majutsushi/tagbar'
build = 'brew install ctags'
hook_add = '''
    nmap <space>t :<C-u>TagbarToggle<CR>
'''

[[plugins]] # increment date
repo = 'tpope/vim-speeddating'

# memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    let g:memolist_path = "~/Dropbox/memo"
    " suffix type (default markdown)
    let g:memolist_memo_suffix = "txt"

    " date format (default %Y-%m-%d %H:%M)
    let g:memolist_memo_date = "%Y-%m-%d %H:%M"
    "" let g:memolist_memo_date = "epoch"
    "" let g:memolist_memo_date = "%D %T"

    " tags prompt (default 0)
    "" let g:memolist_prompt_tags = 1

    " categories prompt (default 0)
    let g:memolist_prompt_categories = 1

    " use qfixgrep (default 0)
    " let g:memolist_qfixgrep = 1

    " use vimfler (default 0)
    " let g:memolist_vimfiler = 1

    " use arbitrary vimfler option (default -split -winwidth=50)
    " let g:memolist_vimfiler_option = "-split -winwidth=80 -simple"

    " use unite (default 0)
    "" let g:memolist_unite = 1

    " use arbitrary unite option (default is empty)
    "" let g:memolist_unite_option = "-auto-preview -start-insert"

    " use arbitrary unite source (default is 'file')
    "" let g:memolist_unite_source = "file_rec"

    " use template
    let g:memolist_template_dir_path = "~/.vim/template/memolist"

    " remove filename prefix (default 0)
    "" let g:memolist_filename_prefix_none = 1

    nnoremap <Leader>mn :<C-u>MemoNew<CR>
'''

[[plugins]] # use histogram algorithm for vimdiff
repo = 'chrisbra/vim-diff-enhanced'
hook_add = '''
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=histogram")'
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
    nmap <silent> [<C-d> :<C-u>DirDiffPrev<CR>
    nmap <silent> ]<C-d> :<C-u>DirDiffNext<CR>
'''

[[plugins]] # switch between a single-line statement and a multi-line one
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
    let g:calendar_frame = 'default'
    let g:calendar_first_day = 'monday'
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]] # esa
repo = 'upamune/esa.vim'
depends = 'webapi-vim'

[[plugins]]
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'
#}}}

# csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'
