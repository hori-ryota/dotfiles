#{{{ General

#{{{ denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'cpsm'
on_cmd = 'Denite'
hook_add = '''
    nmap <silent> <Space>ft       :<C-u>Denite filetype<CR>
    nmap <silent> <Space><Space>  :<C-u>Denite file_rec<CR>
    nmap <silent> <Space>i<Space> :<C-u>Denite file_rec:
    nmap <silent> <Space>/        :<C-u>Denite line<CR>
    nmap <silent> <Space>r        :<C-u>Denite grep<CR>
    nmap <silent> <Space>ir       :<C-u>Denite grep:
    nmap <silent> <Space>:        :<C-u>Denite command<CR>
    nmap <silent> <Space>;        :<C-u>Denite command_history<CR>
    nmap <silent> <Space>o        :<C-u>Denite file_mru<CR>
    nmap <silent> <Space>y        :<C-u>Denite neoyank<CR>
    nmap <silent> <Space>p        :<C-u>Denite ghq<CR>
    nmap <silent> <Space>m        :<C-u>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>
    nmap <silent> <space>c        :<C-u>Denite -mode=normal -auto-resize quickfix<CR>
    nmap <silent> <space>l        :<C-u>Denite -mode=normal -auto-resize location_list<CR>
'''
hook_source = '''
    call denite#custom#var('file_rec', 'command',
          \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences',
          \ '-g', ''])

    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    call denite#custom#var('grep', 'default_opts',
          \ ['--nocolor', '--nogroup', '--follow', '--hidden', '--column',
          \ '--ignore-dir', '.git', '--ignore', '\.DS_Store', '--ignore-dir', 'node_modules', '--ignore-dir', 'Alfred.alfredpreferences'
          \ ])

    call denite#custom#source(
          \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
    call denite#custom#source('file_mru', 'converters',
          \ ['converter_relative_word'])

	" Change mappings.
	call denite#custom#map(
	      \ 'insert',
	      \ '<C-j>',
	      \ '<denite:move_to_next_line>',
	      \ 'noremap'
	      \)
	call denite#custom#map(
	      \ 'insert',
	      \ '<C-k>',
	      \ '<denite:move_to_previous_line>',
	      \ 'noremap'
	      \)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'nixprime/cpsm'
on_source = 'denite.nvim'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'chemzqm/unite-location'
on_source = 'denite.nvim'
#}}}

#}}}

#{{{ Programming

#{{{ deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_camel_case = 1
    let g:deoplete#max_list = 10000
    let g:deoplete#max_menu_width = 0
    let g:deoplete#max_abbr_width = 0
    let g:deoplete#auto_complete_delay = 0
    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#manual_complete()
    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction "}}}

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

    inoremap <expr><C-g> deoplete#undo_completion()
    " <C-l>: redraw candidates
    inoremap <expr><C-l> deoplete#refresh()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#close_popup() . "\<CR>"
    endfunction

    inoremap <expr> '  pumvisible() ? deoplete#close_popup() : "'"
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_i = 1
hook_source = '''
    let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1
#}}}

#{{{ Snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1
on_ft = 'snippet'

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1
on_ft = 'snippet'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_source = '''
    imap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    smap <silent><c-k> <Plug>(neosnippet_jump_or_expand)
    xmap <silent><c-k> <Plug>(neosnippet_expand_target)
    imap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    smap <silent><c-j> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><c-j> <Plug>(neosnippet_register_oneshot_snippet)

    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory = g:vim_dir . '/snippets'

    inoremap <silent> (( <C-r>=neosnippet#anonymous('\left(${1}\right)${0}')<CR>
'''
#}}}

#{{{ Filer
# for NERDTree
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
on_cmd = 'NERDTreeToggle'
#}}}

#{{{ Git/Gist
[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>(gista-'
#}}}

#{{{ Javascript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']

[[plugins]]
repo = 'gavocanov/vim-js-indent'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']

[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = ['javascript', 'html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
'''

[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['jst', 'ejs']

[[plugins]]
repo = 'digitaltoad/vim-jade'
on_ft = 'jade'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'moll/vim-node'
on_ft = 'javascript'
#}}}

#{{{ TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
build = 'npm install -g clausreinke/typescript-tools typescript'
on_ft = 'typescript'

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = 'npm install -g typescript'
on_ft = 'typescript'
depends = 'deoplete.nvim'
#}}}

#{{{ go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go_fmt_autosave = 1
    let g:go_test_timeout= '1m'
    let g:go_info_mode = 'guru'
    let g:go_jump_to_error = 0
    let g:go_fmt_options = {
                \ 'gofmt': '-s',
                \ 'goimports': '',
                \ }
    let g:go_def_mapping_enabled = 0
    let g:go_snippet_engine = "neosnippet"
    let g:go_metalinter_autosave = 1
    let g:go_metalinter_autosave_enabled = [
                " \ 'deadcode',
                " \ 'dupl',
                " \ 'errcheck',
                \ 'gas',
                " \ 'goconst',
                " \ 'gocyclo',
                " \ 'gofmt',
                " \ 'goimports',
                " \ 'golint',
                " \ 'gosimple',
                \ 'gotype',
                \ 'gotypex',
                \ 'ineffassign',
                " \ 'interfacer',
                " \ 'lll',
                " \ 'maligned',
                " \ 'megacheck',
                \ 'misspell',
                " \ 'nakedret',
                " \ 'safesql',
                " \ 'staticcheck',
                " \ 'structcheck',
                " \ 'test',
                " \ 'testify',
                " \ 'unconvert',
                " \ 'unparam',
                " \ 'unused',
                " \ 'varcheck',
                \ 'vet',
                " \ 'vetshadow',
                \ ]

    let g:go_metalinter_enabled = [
                \ 'deadcode',
                \ 'dupl',
                \ 'errcheck',
                \ 'gas',
                " \ 'goconst',
                " \ 'gocyclo',
                " \ 'gofmt',
                " \ 'goimports',
                " \ 'golint',
                " \ 'gosimple',
                \ 'gotype',
                \ 'gotypex',
                \ 'ineffassign',
                \ 'interfacer',
                " \ 'lll',
                \ 'maligned',
                \ 'megacheck',
                \ 'misspell',
                \ 'nakedret',
                " \ 'safesql',
                " \ 'staticcheck',
                \ 'structcheck',
                " \ 'test',
                " \ 'testify',
                \ 'unconvert',
                " \ 'unparam',
                " \ 'unused',
                \ 'varcheck',
                \ 'vet',
                " \ 'vetshadow',
                \ ]

    let g:go_metalinter_excludes = ['.*\.pb\.go', '.*_mock\.go']
    let g:go_metalinter_deadline = '1m'

    let g:go_term_enabled = 1

    let g:go_gocode_autobuild = 0
    let g:go_gocode_unimported_packages = 1

    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_space_tab_error = 1
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_arguments = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_string_spellcheck = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_variable_declarations = 1
    let g:go_highlight_variable_assignments = 1
'''

[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
build = 'make'
on_i = 1
on_ft = 'go'
hook_source = '''
    let s:cache_home = empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME

    let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
    let g:deoplete#sources#go#pointer = 1
    let g:deoplete#sources#go#use_cache = 1
    let g:deoplete#sources#go#json_directory = s:cache_home . '/deoplete/go/$GOOS_$GOARCH'
    let g:deoplete#sources#go#cgo = 0
    let g:deoplete#sources#go#package_dot = 1
    " let g:deoplete#sources#go#auto_goos = 1
'''

[[plugins]]
repo = 'buoto/gotests-vim'
build = 'go get -u github.com/cweill/gotests/...'
on_ft = 'go'

[[plugins]]
repo = 'jodosha/vim-godebug'
on_ft = 'go'

[[plugins]]
repo = 'garyburd/go-explorer'
on_ft = 'go'
#}}}

#{{{ Protocol Buffers
[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = 'proto'
#}}}

#{{{ Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#goto_command = '<C-]>'
    let g:jedi#use_tabs_not_buffers = 0  " current default is 1.
    let g:jedi#rename_command = '<Leader>R'
    let g:jedi#usages_command = '<Leader>I'
    let g:jedi#completions_enabled = 0
    let g:jedi#smart_auto_mappings = 1

    " Unite/ref and pydoc are more useful.
    let g:jedi#documentation_command = '<Leader>gd'
    let g:jedi#auto_close_doc = 1
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'
#}}}

#{{{ Ruby
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = 'ruby'

[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'
#}}}

#{{{ Java
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_source = '''
    setlocal omnifunc=javacomplete#Complete
    nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    nmap <F5> <Plug>(JavaComplete-Imports-Add)
    imap <F5> <Plug>(JavaComplete-Imports-Add)
    nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
    imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
    nmap <F8> <Plug>(JavaComplete-Imports-SortImports)
    imap <F8> <Plug>(JavaComplete-Imports-SortImports)
    nmap <leader>jI <Plug>(JavaComplete-Imports-AddMissing)
    nmap <leader>jR <Plug>(JavaComplete-Imports-RemoveUnused)
    nmap <leader>ji <Plug>(JavaComplete-Imports-AddSmart)
    nmap <leader>jii <Plug>(JavaComplete-Imports-Add)
    nmap <Leader>jis <Plug>(JavaComplete-Imports-SortImports)

    imap <C-j>I <Plug>(JavaComplete-Imports-AddMissing)
    imap <C-j>R <Plug>(JavaComplete-Imports-RemoveUnused)
    imap <C-j>i <Plug>(JavaComplete-Imports-AddSmart)
    imap <C-j>ii <Plug>(JavaComplete-Imports-Add)

    nmap <leader>jM <Plug>(JavaComplete-Generate-AbstractMethods)

    imap <C-j>jM <Plug>(JavaComplete-Generate-AbstractMethods)

    nmap <leader>jA <Plug>(JavaComplete-Generate-Accessors)
    nmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
    nmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
    nmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)
    nmap <leader>jts <Plug>(JavaComplete-Generate-ToString)
    nmap <leader>jeq <Plug>(JavaComplete-Generate-EqualsAndHashCode)
    nmap <leader>jc <Plug>(JavaComplete-Generate-Constructor)
    nmap <leader>jcc <Plug>(JavaComplete-Generate-DefaultConstructor)

    imap <C-j>s <Plug>(JavaComplete-Generate-AccessorSetter)
    imap <C-j>g <Plug>(JavaComplete-Generate-AccessorGetter)
    imap <C-j>a <Plug>(JavaComplete-Generate-AccessorSetterGetter)

    vmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
    vmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
    vmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)
    let g:JavaComplete_UsePython3 = 1
    let g:JavaComplete_EnableDefaultMappings = 0

    nmap <leader>ia <Plug>(JavaComplete-Imports-AddMissing)
    nmap <leader>id <Plug>(JavaComplete-Imports-RemoveUnused)
    nmap <leader>is <Plug>(JavaComplete-Imports-SortImports)

    augroup my_javacomplete
        autocmd!
        " autocmd BufWritePre * JCimportsAddMissing
        " autocmd BufWritePre * JCimportsRemoveUnused
        autocmd BufWritePre * JCimportsSort
    augroup END
'''
#}}}

#{{{ Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'groovy'
#}}}

#{{{ Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'
#}}}

#{{{ clang
#}}}

#{{{ html
# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
hook_source = '''
    let g:user_emmet_leader_key=','

    let g:user_emmet_settings = {
                \   'variables': {
                \     'lang': 'ja'
                \   },
                \   'indentation': '  '
                \ }
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade']
#}}}

#{{{ css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'ejs', 'erb', 'jst', 'jade', 'css']

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = 'stylus'
#}}}

#{{{ Markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:markdown_enable_spell_checking = 0
    let g:markdown_mapping_switch_status = '<Learder>x'
'''

# Preview
[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'html']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = 'open-browser.vim'
hook_source = '''
    " realtime preview
    let g:previm_enable_realtime = 1
'''
#}}}

#{{{ JSON
[[plugins]] # Preview
repo = 'elzr/vim-json'
on_ft = 'javascript'
#}}}

#{{{ TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

#{{{ Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile', 'docker-compose']
#}}}

#{{{ nginx
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft= 'nginx'
#}}}

#{{{ Ansible
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = 'ansible'
#}}}

#{{{ Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']
#}}}

#{{{ Hashicorp Configuration Language
[[plugins]]
repo = 'fatih/vim-hclfmt'
on_ft = ['terraform', 'javascript']
hook_source = '''
    let g:hcl_fmt_autosave = 0
    let g:tf_fmt_autosave = 0
    let g:nomad_fmt_autosave = 0
'''
#}}}

#{{{ PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
#}}}

#{{{ Graphviz
[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = 'dot'
hook_source = '''
    let g:WMGraphviz_output='png'
'''
#}}}

#{{{ SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_ft = 'sql'

[[plugins]]
repo = 'vim-scripts/Align'
on_ft = 'sql'
#}}}

#}}}

#{{{ Misc
[[plugins]] # mark and highlight words
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-'
hook_add = '''
    nmap <Space>m <Plug>(quickhl-manual-this)
    xmap <Space>m <Plug>(quickhl-manual-this)
    nmap <Space>M <Plug>(quickhl-manual-reset)
    xmap <Space>M <Plug>(quickhl-manual-reset)

    nmap <Space>j <Plug>(quickhl-cword-toggle)
    nmap <Space>] <Plug>(quickhl-tag-toggle)
    map ,h <Plug>(operator-quickhl-manual-this-motion)
'''

[[plugins]]
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

[[plugins]] # hugo
repo = 'robertbasic/vim-hugo-helper'
on_ft = 'markdown'
#}}}
